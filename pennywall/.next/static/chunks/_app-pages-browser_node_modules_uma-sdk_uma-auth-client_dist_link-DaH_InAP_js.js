"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_uma-sdk_uma-auth-client_dist_link-DaH_InAP_js"],{

/***/ "(app-pages-browser)/./node_modules/@uma-sdk/uma-auth-client/dist/link-DaH_InAP.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@uma-sdk/uma-auth-client/dist/link-DaH_InAP.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   l: function() { return /* binding */ Nr; }\n/* harmony export */ });\n/* harmony import */ var _main_BAWg_Pqh_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./main-BAWg-Pqh.js */ \"(app-pages-browser)/./node_modules/@uma-sdk/uma-auth-client/dist/main-BAWg-Pqh.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n\n\nfunction Bt(a, e) {\n    for(var n = 0; n < e.length; n++){\n        const s = e[n];\n        if (typeof s != \"string\" && !Array.isArray(s)) {\n            for(const t in s)if (t !== \"default\" && !(t in a)) {\n                const o = Object.getOwnPropertyDescriptor(s, t);\n                o && Object.defineProperty(a, t, o.get ? o : {\n                    enumerable: !0,\n                    get: ()=>s[t]\n                });\n            }\n        }\n    }\n    return Object.freeze(Object.defineProperty(a, Symbol.toStringTag, {\n        value: \"Module\"\n    }));\n}\n_c = Bt;\nvar ze = {\n    exports: {}\n}, G = {};\nG._ = G._interop_require_default = Vt;\nfunction Vt(a) {\n    return a && a.__esModule ? a : {\n        default: a\n    };\n}\n_c1 = Vt;\nvar Y = {\n    exports: {}\n}, _e = {}, Qe;\nfunction Mt() {\n    return Qe || (Qe = 1, function(a) {\n        Object.defineProperty(a, \"__esModule\", {\n            value: !0\n        });\n        function e(i, r) {\n            for(var u in r)Object.defineProperty(i, u, {\n                enumerable: !0,\n                get: r[u]\n            });\n        }\n        e(a, {\n            searchParamsToUrlQuery: function() {\n                return n;\n            },\n            urlQueryToSearchParams: function() {\n                return t;\n            },\n            assign: function() {\n                return o;\n            }\n        });\n        function n(i) {\n            const r = {};\n            return i.forEach((u, c)=>{\n                typeof r[c] > \"u\" ? r[c] = u : Array.isArray(r[c]) ? r[c].push(u) : r[c] = [\n                    r[c],\n                    u\n                ];\n            }), r;\n        }\n        function s(i) {\n            return typeof i == \"string\" || typeof i == \"number\" && !isNaN(i) || typeof i == \"boolean\" ? String(i) : \"\";\n        }\n        function t(i) {\n            const r = new URLSearchParams();\n            return Object.entries(i).forEach((u)=>{\n                let [c, l] = u;\n                Array.isArray(l) ? l.forEach((d)=>r.append(c, s(d))) : r.set(c, s(l));\n            }), r;\n        }\n        function o(i) {\n            for(var r = arguments.length, u = new Array(r > 1 ? r - 1 : 0), c = 1; c < r; c++)u[c - 1] = arguments[c];\n            return u.forEach((l)=>{\n                Array.from(l.keys()).forEach((d)=>i.delete(d)), l.forEach((d, p)=>i.append(p, d));\n            }), i;\n        }\n    }(_e)), _e;\n}\n_c2 = Mt;\nvar me = {}, Z = {}, Ye;\nfunction Ft() {\n    if (Ye) return Z;\n    Ye = 1;\n    function a(n) {\n        if (typeof WeakMap != \"function\") return null;\n        var s = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();\n        return (a = function(o) {\n            return o ? t : s;\n        })(n);\n    }\n    Z._ = Z._interop_require_wildcard = e;\n    function e(n, s) {\n        if (!s && n && n.__esModule) return n;\n        if (n === null || typeof n != \"object\" && typeof n != \"function\") return {\n            default: n\n        };\n        var t = a(s);\n        if (t && t.has(n)) return t.get(n);\n        var o = {}, i = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for(var r in n)if (r !== \"default\" && Object.prototype.hasOwnProperty.call(n, r)) {\n            var u = i ? Object.getOwnPropertyDescriptor(n, r) : null;\n            u && (u.get || u.set) ? Object.defineProperty(o, r, u) : o[r] = n[r];\n        }\n        return o.default = n, t && t.set(n, o), o;\n    }\n    return Z;\n}\n_c3 = Ft;\nvar Ze;\nfunction Ct() {\n    return Ze || (Ze = 1, function(a) {\n        var e = {};\n        Object.defineProperty(a, \"__esModule\", {\n            value: !0\n        });\n        function n(c, l) {\n            for(var d in l)Object.defineProperty(c, d, {\n                enumerable: !0,\n                get: l[d]\n            });\n        }\n        n(a, {\n            formatUrl: function() {\n                return i;\n            },\n            urlObjectKeys: function() {\n                return r;\n            },\n            formatWithValidation: function() {\n                return u;\n            }\n        });\n        const t = /* @__PURE__ */ Ft()._(Mt()), o = /https?|ftp|gopher|file/;\n        function i(c) {\n            let { auth: l, hostname: d } = c, p = c.protocol || \"\", g = c.pathname || \"\", E = c.hash || \"\", f = c.query || \"\", _ = !1;\n            l = l ? encodeURIComponent(l).replace(/%3A/i, \":\") + \"@\" : \"\", c.host ? _ = l + c.host : d && (_ = l + (~d.indexOf(\":\") ? \"[\" + d + \"]\" : d), c.port && (_ += \":\" + c.port)), f && typeof f == \"object\" && (f = String(t.urlQueryToSearchParams(f)));\n            let m = c.search || f && \"?\" + f || \"\";\n            return p && !p.endsWith(\":\") && (p += \":\"), c.slashes || (!p || o.test(p)) && _ !== !1 ? (_ = \"//\" + (_ || \"\"), g && g[0] !== \"/\" && (g = \"/\" + g)) : _ || (_ = \"\"), E && E[0] !== \"#\" && (E = \"#\" + E), m && m[0] !== \"?\" && (m = \"?\" + m), g = g.replace(/[?#]/g, encodeURIComponent), m = m.replace(\"#\", \"%23\"), \"\" + p + _ + g + m + E;\n        }\n        const r = [\n            \"auth\",\n            \"hash\",\n            \"host\",\n            \"hostname\",\n            \"href\",\n            \"path\",\n            \"pathname\",\n            \"port\",\n            \"protocol\",\n            \"query\",\n            \"search\",\n            \"slashes\"\n        ];\n        function u(c) {\n            return e.NODE_ENV === \"development\" && c !== null && typeof c == \"object\" && Object.keys(c).forEach((l)=>{\n                r.includes(l) || console.warn(\"Unknown key passed via urlObject into url.format: \" + l);\n            }), i(c);\n        }\n    }(me)), me;\n}\n_c4 = Ct;\nvar ge = {}, Je;\nfunction Kt() {\n    return Je || (Je = 1, function(a) {\n        Object.defineProperty(a, \"__esModule\", {\n            value: !0\n        }), Object.defineProperty(a, \"omit\", {\n            enumerable: !0,\n            get: function() {\n                return e;\n            }\n        });\n        function e(n, s) {\n            const t = {};\n            return Object.keys(n).forEach((o)=>{\n                s.includes(o) || (t[o] = n[o]);\n            }), t;\n        }\n    }(ge)), ge;\n}\n_c5 = Kt;\nvar ye = {}, et;\nfunction le() {\n    return et || (et = 1, function(a) {\n        var e = {};\n        Object.defineProperty(a, \"__esModule\", {\n            value: !0\n        });\n        function n(y, v) {\n            for(var h in v)Object.defineProperty(y, h, {\n                enumerable: !0,\n                get: v[h]\n            });\n        }\n        n(a, {\n            WEB_VITALS: function() {\n                return s;\n            },\n            execOnce: function() {\n                return t;\n            },\n            isAbsoluteUrl: function() {\n                return i;\n            },\n            getLocationOrigin: function() {\n                return r;\n            },\n            getURL: function() {\n                return u;\n            },\n            getDisplayName: function() {\n                return c;\n            },\n            isResSent: function() {\n                return l;\n            },\n            normalizeRepeatedSlashes: function() {\n                return d;\n            },\n            loadGetInitialProps: function() {\n                return p;\n            },\n            SP: function() {\n                return g;\n            },\n            ST: function() {\n                return E;\n            },\n            DecodeError: function() {\n                return f;\n            },\n            NormalizeError: function() {\n                return _;\n            },\n            PageNotFoundError: function() {\n                return m;\n            },\n            MissingStaticPage: function() {\n                return T;\n            },\n            MiddlewareNotFoundError: function() {\n                return P;\n            },\n            stringifyError: function() {\n                return w;\n            }\n        });\n        const s = [\n            \"CLS\",\n            \"FCP\",\n            \"FID\",\n            \"INP\",\n            \"LCP\",\n            \"TTFB\"\n        ];\n        function t(y) {\n            let v = !1, h;\n            return function() {\n                for(var R = arguments.length, j = new Array(R), N = 0; N < R; N++)j[N] = arguments[N];\n                return v || (v = !0, h = y(...j)), h;\n            };\n        }\n        const o = /^[a-zA-Z][a-zA-Z\\d+\\-.]*?:/, i = (y)=>o.test(y);\n        function r() {\n            const { protocol: y, hostname: v, port: h } = window.location;\n            return y + \"//\" + v + (h ? \":\" + h : \"\");\n        }\n        function u() {\n            const { href: y } = window.location, v = r();\n            return y.substring(v.length);\n        }\n        function c(y) {\n            return typeof y == \"string\" ? y : y.displayName || y.name || \"Unknown\";\n        }\n        function l(y) {\n            return y.finished || y.headersSent;\n        }\n        function d(y) {\n            const v = y.split(\"?\");\n            return v[0].replace(/\\\\/g, \"/\").replace(/\\/\\/+/g, \"/\") + (v[1] ? \"?\" + v.slice(1).join(\"?\") : \"\");\n        }\n        async function p(y, v) {\n            if (e.NODE_ENV !== \"production\") {\n                var h;\n                if ((h = y.prototype) != null && h.getInitialProps) {\n                    const N = '\"' + c(y) + '.getInitialProps()\" is defined as an instance method - visit https://nextjs.org/docs/messages/get-initial-props-as-an-instance-method for more information.';\n                    throw new Error(N);\n                }\n            }\n            const R = v.res || v.ctx && v.ctx.res;\n            if (!y.getInitialProps) return v.ctx && v.Component ? {\n                pageProps: await p(v.Component, v.ctx)\n            } : {};\n            const j = await y.getInitialProps(v);\n            if (R && l(R)) return j;\n            if (!j) {\n                const N = '\"' + c(y) + '.getInitialProps()\" should resolve to an object. But found \"' + j + '\" instead.';\n                throw new Error(N);\n            }\n            return e.NODE_ENV !== \"production\" && Object.keys(j).length === 0 && !v.ctx && console.warn(\"\" + c(y) + \" returned an empty object from `getInitialProps`. This de-optimizes and prevents automatic static optimization. https://nextjs.org/docs/messages/empty-object-getInitialProps\"), j;\n        }\n        const g = typeof performance < \"u\", E = g && [\n            \"mark\",\n            \"measure\",\n            \"getEntriesByName\"\n        ].every((y)=>typeof performance[y] == \"function\");\n        class f extends Error {\n        }\n        class _ extends Error {\n        }\n        class m extends Error {\n            constructor(v){\n                super(), this.code = \"ENOENT\", this.name = \"PageNotFoundError\", this.message = \"Cannot find module for page: \" + v;\n            }\n        }\n        class T extends Error {\n            constructor(v, h){\n                super(), this.message = \"Failed to load static file for page: \" + v + \" \" + h;\n            }\n        }\n        class P extends Error {\n            constructor(){\n                super(), this.code = \"ENOENT\", this.message = \"Cannot find the middleware module\";\n            }\n        }\n        function w(y) {\n            return JSON.stringify({\n                message: y.message,\n                stack: y.stack\n            });\n        }\n    }(ye)), ye;\n}\nvar J = {\n    exports: {}\n}, ve = {}, tt;\nfunction At() {\n    return tt || (tt = 1, function(a) {\n        Object.defineProperty(a, \"__esModule\", {\n            value: !0\n        }), Object.defineProperty(a, \"removeTrailingSlash\", {\n            enumerable: !0,\n            get: function() {\n                return e;\n            }\n        });\n        function e(n) {\n            return n.replace(/\\/$/, \"\") || \"/\";\n        }\n    }(ve)), ve;\n}\n_c6 = At;\nvar Pe = {}, rt;\nfunction He() {\n    return rt || (rt = 1, function(a) {\n        Object.defineProperty(a, \"__esModule\", {\n            value: !0\n        }), Object.defineProperty(a, \"parsePath\", {\n            enumerable: !0,\n            get: function() {\n                return e;\n            }\n        });\n        function e(n) {\n            const s = n.indexOf(\"#\"), t = n.indexOf(\"?\"), o = t > -1 && (s < 0 || t < s);\n            return o || s > -1 ? {\n                pathname: n.substring(0, o ? t : s),\n                query: o ? n.substring(t, s > -1 ? s : void 0) : \"\",\n                hash: s > -1 ? n.slice(s) : \"\"\n            } : {\n                pathname: n,\n                query: \"\",\n                hash: \"\"\n            };\n        }\n    }(Pe)), Pe;\n}\n_c7 = He;\nvar nt;\nfunction fe() {\n    return nt || (nt = 1, function(a, e) {\n        var n = {};\n        Object.defineProperty(e, \"__esModule\", {\n            value: !0\n        }), Object.defineProperty(e, \"normalizePathTrailingSlash\", {\n            enumerable: !0,\n            get: function() {\n                return o;\n            }\n        });\n        const s = At(), t = He(), o = (i)=>{\n            if (!i.startsWith(\"/\") || n.__NEXT_MANUAL_TRAILING_SLASH) return i;\n            const { pathname: r, query: u, hash: c } = (0, t.parsePath)(i);\n            return n.__NEXT_TRAILING_SLASH ? /\\.[^/]+\\/?$/.test(r) ? \"\" + (0, s.removeTrailingSlash)(r) + u + c : r.endsWith(\"/\") ? \"\" + r + u + c : r + \"/\" + u + c : \"\" + (0, s.removeTrailingSlash)(r) + u + c;\n        };\n        (typeof e.default == \"function\" || typeof e.default == \"object\" && e.default !== null) && typeof e.default.__esModule > \"u\" && (Object.defineProperty(e.default, \"__esModule\", {\n            value: !0\n        }), Object.assign(e.default, e), a.exports = e.default);\n    }(J, J.exports)), J.exports;\n}\nvar Re = {}, ee = {\n    exports: {}\n}, be = {}, ot;\nfunction Dt() {\n    return ot || (ot = 1, function(a) {\n        Object.defineProperty(a, \"__esModule\", {\n            value: !0\n        }), Object.defineProperty(a, \"pathHasPrefix\", {\n            enumerable: !0,\n            get: function() {\n                return n;\n            }\n        });\n        const e = He();\n        function n(s, t) {\n            if (typeof s != \"string\") return !1;\n            const { pathname: o } = (0, e.parsePath)(s);\n            return o === t || o.startsWith(t + \"/\");\n        }\n    }(be)), be;\n}\n_c8 = Dt;\nvar it;\nfunction Gt() {\n    return it || (it = 1, function(a, e) {\n        var n = {};\n        Object.defineProperty(e, \"__esModule\", {\n            value: !0\n        }), Object.defineProperty(e, \"hasBasePath\", {\n            enumerable: !0,\n            get: function() {\n                return o;\n            }\n        });\n        const s = Dt(), t = n.__NEXT_ROUTER_BASEPATH || \"\";\n        function o(i) {\n            return (0, s.pathHasPrefix)(i, t);\n        }\n        (typeof e.default == \"function\" || typeof e.default == \"object\" && e.default !== null) && typeof e.default.__esModule > \"u\" && (Object.defineProperty(e.default, \"__esModule\", {\n            value: !0\n        }), Object.assign(e.default, e), a.exports = e.default);\n    }(ee, ee.exports)), ee.exports;\n}\n_c9 = Gt;\nvar at;\nfunction Ut() {\n    return at || (at = 1, function(a) {\n        Object.defineProperty(a, \"__esModule\", {\n            value: !0\n        }), Object.defineProperty(a, \"isLocalURL\", {\n            enumerable: !0,\n            get: function() {\n                return s;\n            }\n        });\n        const e = le(), n = Gt();\n        function s(t) {\n            if (!(0, e.isAbsoluteUrl)(t)) return !0;\n            try {\n                const o = (0, e.getLocationOrigin)(), i = new URL(t, o);\n                return i.origin === o && (0, n.hasBasePath)(i.pathname);\n            } catch (e) {\n                return !1;\n            }\n        }\n    }(Re)), Re;\n}\n_c10 = Ut;\nvar Ee = {}, Oe = {}, ut;\nfunction Xt() {\n    return ut || (ut = 1, function(a) {\n        Object.defineProperty(a, \"__esModule\", {\n            value: !0\n        }), Object.defineProperty(a, \"getSortedRoutes\", {\n            enumerable: !0,\n            get: function() {\n                return n;\n            }\n        });\n        class e {\n            insert(t) {\n                this._insert(t.split(\"/\").filter(Boolean), [], !1);\n            }\n            smoosh() {\n                return this._smoosh();\n            }\n            _smoosh(t) {\n                t === void 0 && (t = \"/\");\n                const o = [\n                    ...this.children.keys()\n                ].sort();\n                this.slugName !== null && o.splice(o.indexOf(\"[]\"), 1), this.restSlugName !== null && o.splice(o.indexOf(\"[...]\"), 1), this.optionalRestSlugName !== null && o.splice(o.indexOf(\"[[...]]\"), 1);\n                const i = o.map((r)=>this.children.get(r)._smoosh(\"\" + t + r + \"/\")).reduce((r, u)=>[\n                        ...r,\n                        ...u\n                    ], []);\n                if (this.slugName !== null && i.push(...this.children.get(\"[]\")._smoosh(t + \"[\" + this.slugName + \"]/\")), !this.placeholder) {\n                    const r = t === \"/\" ? \"/\" : t.slice(0, -1);\n                    if (this.optionalRestSlugName != null) throw new Error('You cannot define a route with the same specificity as a optional catch-all route (\"' + r + '\" and \"' + r + \"[[...\" + this.optionalRestSlugName + ']]\").');\n                    i.unshift(r);\n                }\n                return this.restSlugName !== null && i.push(...this.children.get(\"[...]\")._smoosh(t + \"[...\" + this.restSlugName + \"]/\")), this.optionalRestSlugName !== null && i.push(...this.children.get(\"[[...]]\")._smoosh(t + \"[[...\" + this.optionalRestSlugName + \"]]/\")), i;\n            }\n            _insert(t, o, i) {\n                if (t.length === 0) {\n                    this.placeholder = !1;\n                    return;\n                }\n                if (i) throw new Error(\"Catch-all must be the last part of the URL.\");\n                let r = t[0];\n                if (r.startsWith(\"[\") && r.endsWith(\"]\")) {\n                    let l = function(d, p) {\n                        if (d !== null && d !== p) throw new Error(\"You cannot use different slug names for the same dynamic path ('\" + d + \"' !== '\" + p + \"').\");\n                        o.forEach((g)=>{\n                            if (g === p) throw new Error('You cannot have the same slug name \"' + p + '\" repeat within a single dynamic path');\n                            if (g.replace(/\\W/g, \"\") === r.replace(/\\W/g, \"\")) throw new Error('You cannot have the slug names \"' + g + '\" and \"' + p + '\" differ only by non-word symbols within a single dynamic path');\n                        }), o.push(p);\n                    }, u = r.slice(1, -1), c = !1;\n                    if (u.startsWith(\"[\") && u.endsWith(\"]\") && (u = u.slice(1, -1), c = !0), u.startsWith(\"...\") && (u = u.substring(3), i = !0), u.startsWith(\"[\") || u.endsWith(\"]\")) throw new Error(\"Segment names may not start or end with extra brackets ('\" + u + \"').\");\n                    if (u.startsWith(\".\")) throw new Error(\"Segment names may not start with erroneous periods ('\" + u + \"').\");\n                    if (i) if (c) {\n                        if (this.restSlugName != null) throw new Error('You cannot use both an required and optional catch-all route at the same level (\"[...' + this.restSlugName + ']\" and \"' + t[0] + '\" ).');\n                        l(this.optionalRestSlugName, u), this.optionalRestSlugName = u, r = \"[[...]]\";\n                    } else {\n                        if (this.optionalRestSlugName != null) throw new Error('You cannot use both an optional and required catch-all route at the same level (\"[[...' + this.optionalRestSlugName + ']]\" and \"' + t[0] + '\").');\n                        l(this.restSlugName, u), this.restSlugName = u, r = \"[...]\";\n                    }\n                    else {\n                        if (c) throw new Error('Optional route parameters are not yet supported (\"' + t[0] + '\").');\n                        l(this.slugName, u), this.slugName = u, r = \"[]\";\n                    }\n                }\n                this.children.has(r) || this.children.set(r, new e()), this.children.get(r)._insert(t.slice(1), o, i);\n            }\n            constructor(){\n                this.placeholder = !0, this.children = /* @__PURE__ */ new Map(), this.slugName = null, this.restSlugName = null, this.optionalRestSlugName = null;\n            }\n        }\n        function n(s) {\n            const t = new e();\n            return s.forEach((o)=>t.insert(o)), t.smoosh();\n        }\n    }(Oe)), Oe;\n}\n_c11 = Xt;\nvar we = {}, st;\nfunction Qt() {\n    return st || (st = 1, function(a) {\n        Object.defineProperty(a, \"__esModule\", {\n            value: !0\n        }), Object.defineProperty(a, \"isDynamicRoute\", {\n            enumerable: !0,\n            get: function() {\n                return n;\n            }\n        });\n        const e = /\\/\\[[^/]+?\\](?=\\/|$)/;\n        function n(s) {\n            return e.test(s);\n        }\n    }(we)), we;\n}\n_c12 = Qt;\nvar ct;\nfunction Yt() {\n    return ct || (ct = 1, function(a) {\n        Object.defineProperty(a, \"__esModule\", {\n            value: !0\n        });\n        function e(t, o) {\n            for(var i in o)Object.defineProperty(t, i, {\n                enumerable: !0,\n                get: o[i]\n            });\n        }\n        e(a, {\n            getSortedRoutes: function() {\n                return n.getSortedRoutes;\n            },\n            isDynamicRoute: function() {\n                return s.isDynamicRoute;\n            }\n        });\n        const n = Xt(), s = Qt();\n    }(Ee)), Ee;\n}\n_c13 = Yt;\nvar Ne = {}, Te = {}, lt;\nfunction Zt() {\n    return lt || (lt = 1, function(a) {\n        Object.defineProperty(a, \"__esModule\", {\n            value: !0\n        }), Object.defineProperty(a, \"getRouteMatcher\", {\n            enumerable: !0,\n            get: function() {\n                return n;\n            }\n        });\n        const e = le();\n        function n(s) {\n            let { re: t, groups: o } = s;\n            return (i)=>{\n                const r = t.exec(i);\n                if (!r) return !1;\n                const u = (l)=>{\n                    try {\n                        return decodeURIComponent(l);\n                    } catch (e1) {\n                        throw new e.DecodeError(\"failed to decode param\");\n                    }\n                }, c = {};\n                return Object.keys(o).forEach((l)=>{\n                    const d = o[l], p = r[d.pos];\n                    p !== void 0 && (c[l] = ~p.indexOf(\"/\") ? p.split(\"/\").map((g)=>u(g)) : d.repeat ? [\n                        u(p)\n                    ] : u(p));\n                }), c;\n            };\n        }\n    }(Te)), Te;\n}\n_c14 = Zt;\nvar je = {}, Se = {}, Le = {}, qe = {}, ft;\nfunction Jt() {\n    return ft || (ft = 1, function(a) {\n        Object.defineProperty(a, \"__esModule\", {\n            value: !0\n        }), Object.defineProperty(a, \"ensureLeadingSlash\", {\n            enumerable: !0,\n            get: function() {\n                return e;\n            }\n        });\n        function e(n) {\n            return n.startsWith(\"/\") ? n : \"/\" + n;\n        }\n    }(qe)), qe;\n}\n_c15 = Jt;\nvar Ie = {}, dt;\nfunction er() {\n    return dt || (dt = 1, function(a) {\n        Object.defineProperty(a, \"__esModule\", {\n            value: !0\n        }), Object.defineProperty(a, \"isGroupSegment\", {\n            enumerable: !0,\n            get: function() {\n                return e;\n            }\n        });\n        function e(n) {\n            return n[0] === \"(\" && n.endsWith(\")\");\n        }\n    }(Ie)), Ie;\n}\nvar ht;\nfunction tr() {\n    return ht || (ht = 1, function(a) {\n        Object.defineProperty(a, \"__esModule\", {\n            value: !0\n        });\n        function e(i, r) {\n            for(var u in r)Object.defineProperty(i, u, {\n                enumerable: !0,\n                get: r[u]\n            });\n        }\n        e(a, {\n            normalizeAppPath: function() {\n                return t;\n            },\n            normalizeRscPath: function() {\n                return o;\n            }\n        });\n        const n = Jt(), s = er();\n        function t(i) {\n            return (0, n.ensureLeadingSlash)(i.split(\"/\").reduce((r, u, c, l)=>!u || (0, s.isGroupSegment)(u) || u[0] === \"@\" || (u === \"page\" || u === \"route\") && c === l.length - 1 ? r : r + \"/\" + u, \"\"));\n        }\n        function o(i, r) {\n            return r ? i.replace(/\\.rsc($|\\?)/, // $1 ensures `?` is preserved\n            \"$1\") : i;\n        }\n    }(Le)), Le;\n}\nvar pt;\nfunction rr() {\n    return pt || (pt = 1, function(a) {\n        Object.defineProperty(a, \"__esModule\", {\n            value: !0\n        });\n        function e(i, r) {\n            for(var u in r)Object.defineProperty(i, u, {\n                enumerable: !0,\n                get: r[u]\n            });\n        }\n        e(a, {\n            INTERCEPTION_ROUTE_MARKERS: function() {\n                return s;\n            },\n            isInterceptionRouteAppPath: function() {\n                return t;\n            },\n            extractInterceptionRouteInformation: function() {\n                return o;\n            }\n        });\n        const n = tr(), s = [\n            \"(..)(..)\",\n            \"(.)\",\n            \"(..)\",\n            \"(...)\"\n        ];\n        function t(i) {\n            return i.split(\"/\").find((r)=>s.find((u)=>r.startsWith(u))) !== void 0;\n        }\n        function o(i) {\n            let r, u, c;\n            for (const l of i.split(\"/\"))if (u = s.find((d)=>l.startsWith(d)), u) {\n                [r, c] = i.split(u, 2);\n                break;\n            }\n            if (!r || !u || !c) throw new Error(\"Invalid interception route: \".concat(i, \". Must be in the format /<intercepting route>/(..|...|..)(..)/<intercepted route>\"));\n            switch(r = (0, n.normalizeAppPath)(r), u){\n                case \"(.)\":\n                    r === \"/\" ? c = \"/\".concat(c) : c = r + \"/\" + c;\n                    break;\n                case \"(..)\":\n                    if (r === \"/\") throw new Error(\"Invalid interception route: \".concat(i, \". Cannot use (..) marker at the root level, use (.) instead.\"));\n                    c = r.split(\"/\").slice(0, -1).concat(c).join(\"/\");\n                    break;\n                case \"(...)\":\n                    c = \"/\" + c;\n                    break;\n                case \"(..)(..)\":\n                    const l = r.split(\"/\");\n                    if (l.length <= 2) throw new Error(\"Invalid interception route: \".concat(i, \". Cannot use (..)(..) marker at the root level or one level up.\"));\n                    c = l.slice(0, -2).concat(c).join(\"/\");\n                    break;\n                default:\n                    throw new Error(\"Invariant: unexpected marker\");\n            }\n            return {\n                interceptingRoute: r,\n                interceptedRoute: c\n            };\n        }\n    }(Se)), Se;\n}\nvar Me = {}, _t;\nfunction nr() {\n    return _t || (_t = 1, function(a) {\n        Object.defineProperty(a, \"__esModule\", {\n            value: !0\n        }), Object.defineProperty(a, \"escapeStringRegexp\", {\n            enumerable: !0,\n            get: function() {\n                return s;\n            }\n        });\n        const e = /[|\\\\{}()[\\]^$+*?.-]/, n = /[|\\\\{}()[\\]^$+*?.-]/g;\n        function s(t) {\n            return e.test(t) ? t.replace(n, \"\\\\$&\") : t;\n        }\n    }(Me)), Me;\n}\nvar mt;\nfunction or() {\n    return mt || (mt = 1, function(a) {\n        Object.defineProperty(a, \"__esModule\", {\n            value: !0\n        });\n        function e(f, _) {\n            for(var m in _)Object.defineProperty(f, m, {\n                enumerable: !0,\n                get: _[m]\n            });\n        }\n        e(a, {\n            getRouteRegex: function() {\n                return c;\n            },\n            getNamedRouteRegex: function() {\n                return g;\n            },\n            getNamedMiddlewareRegex: function() {\n                return E;\n            }\n        });\n        const n = rr(), s = nr(), t = At(), o = \"nxtP\", i = \"nxtI\";\n        function r(f) {\n            const _ = f.startsWith(\"[\") && f.endsWith(\"]\");\n            _ && (f = f.slice(1, -1));\n            const m = f.startsWith(\"...\");\n            return m && (f = f.slice(3)), {\n                key: f,\n                repeat: m,\n                optional: _\n            };\n        }\n        function u(f) {\n            const _ = (0, t.removeTrailingSlash)(f).slice(1).split(\"/\"), m = {};\n            let T = 1;\n            return {\n                parameterizedRoute: _.map((P)=>{\n                    const w = n.INTERCEPTION_ROUTE_MARKERS.find((v)=>P.startsWith(v)), y = P.match(/\\[((?:\\[.*\\])|.+)\\]/);\n                    if (w && y) {\n                        const { key: v, optional: h, repeat: R } = r(y[1]);\n                        return m[v] = {\n                            pos: T++,\n                            repeat: R,\n                            optional: h\n                        }, \"/\" + (0, s.escapeStringRegexp)(w) + \"([^/]+?)\";\n                    } else if (y) {\n                        const { key: v, repeat: h, optional: R } = r(y[1]);\n                        return m[v] = {\n                            pos: T++,\n                            repeat: h,\n                            optional: R\n                        }, h ? R ? \"(?:/(.+?))?\" : \"/(.+?)\" : \"/([^/]+?)\";\n                    } else return \"/\" + (0, s.escapeStringRegexp)(P);\n                }).join(\"\"),\n                groups: m\n            };\n        }\n        function c(f) {\n            const { parameterizedRoute: _, groups: m } = u(f);\n            return {\n                re: new RegExp(\"^\" + _ + \"(?:/)?$\"),\n                groups: m\n            };\n        }\n        function l() {\n            let f = 0;\n            return ()=>{\n                let _ = \"\", m = ++f;\n                for(; m > 0;)_ += String.fromCharCode(97 + (m - 1) % 26), m = Math.floor((m - 1) / 26);\n                return _;\n            };\n        }\n        function d(f) {\n            let { getSafeRouteKey: _, segment: m, routeKeys: T, keyPrefix: P } = f;\n            const { key: w, optional: y, repeat: v } = r(m);\n            let h = w.replace(/\\W/g, \"\");\n            P && (h = \"\" + P + h);\n            let R = !1;\n            return (h.length === 0 || h.length > 30) && (R = !0), isNaN(parseInt(h.slice(0, 1))) || (R = !0), R && (h = _()), P ? T[h] = \"\" + P + w : T[h] = \"\" + w, v ? y ? \"(?:/(?<\" + h + \">.+?))?\" : \"/(?<\" + h + \">.+?)\" : \"/(?<\" + h + \">[^/]+?)\";\n        }\n        function p(f, _) {\n            const m = (0, t.removeTrailingSlash)(f).slice(1).split(\"/\"), T = l(), P = {};\n            return {\n                namedParameterizedRoute: m.map((w)=>{\n                    const y = n.INTERCEPTION_ROUTE_MARKERS.some((h)=>w.startsWith(h)), v = w.match(/\\[((?:\\[.*\\])|.+)\\]/);\n                    return y && v ? d({\n                        getSafeRouteKey: T,\n                        segment: v[1],\n                        routeKeys: P,\n                        keyPrefix: _ ? i : void 0\n                    }) : v ? d({\n                        getSafeRouteKey: T,\n                        segment: v[1],\n                        routeKeys: P,\n                        keyPrefix: _ ? o : void 0\n                    }) : \"/\" + (0, s.escapeStringRegexp)(w);\n                }).join(\"\"),\n                routeKeys: P\n            };\n        }\n        function g(f, _) {\n            const m = p(f, _);\n            return {\n                ...c(f),\n                namedRegex: \"^\" + m.namedParameterizedRoute + \"(?:/)?$\",\n                routeKeys: m.routeKeys\n            };\n        }\n        function E(f, _) {\n            const { parameterizedRoute: m } = u(f), { catchAll: T = !0 } = _;\n            if (m === \"/\") return {\n                namedRegex: \"^/\" + (T ? \".*\" : \"\") + \"$\"\n            };\n            const { namedParameterizedRoute: P } = p(f, !1);\n            let w = T ? \"(?:(/.*)?)\" : \"\";\n            return {\n                namedRegex: \"^\" + P + w + \"$\"\n            };\n        }\n    }(je)), je;\n}\nvar gt;\nfunction ir() {\n    return gt || (gt = 1, function(a) {\n        Object.defineProperty(a, \"__esModule\", {\n            value: !0\n        }), Object.defineProperty(a, \"interpolateAs\", {\n            enumerable: !0,\n            get: function() {\n                return s;\n            }\n        });\n        const e = Zt(), n = or();\n        function s(t, o, i) {\n            let r = \"\";\n            const u = (0, n.getRouteRegex)(t), c = u.groups, l = // Try to match the dynamic route against the asPath\n            (o !== t ? (0, e.getRouteMatcher)(u)(o) : \"\") || // Fall back to reading the values from the href\n            // TODO: should this take priority; also need to change in the router.\n            i;\n            r = t;\n            const d = Object.keys(c);\n            return d.every((p)=>{\n                let g = l[p] || \"\";\n                const { repeat: E, optional: f } = c[p];\n                let _ = \"[\" + (E ? \"...\" : \"\") + p + \"]\";\n                return f && (_ = (g ? \"\" : \"/\") + \"[\" + _ + \"]\"), E && !Array.isArray(g) && (g = [\n                    g\n                ]), (f || p in l) && // Interpolate group into data URL if present\n                (r = r.replace(_, E ? g.map(// these values should be fully encoded instead of just\n                // path delimiter escaped since they are being inserted\n                // into the URL and we expect URL encoded segments\n                // when parsing dynamic route params\n                (m)=>encodeURIComponent(m)).join(\"/\") : encodeURIComponent(g)) || \"/\");\n            }) || (r = \"\"), {\n                params: d,\n                result: r\n            };\n        }\n    }(Ne)), Ne;\n}\nvar yt;\nfunction ar() {\n    return yt || (yt = 1, function(a, e) {\n        Object.defineProperty(e, \"__esModule\", {\n            value: !0\n        }), Object.defineProperty(e, \"resolveHref\", {\n            enumerable: !0,\n            get: function() {\n                return l;\n            }\n        });\n        const n = Mt(), s = Ct(), t = Kt(), o = le(), i = fe(), r = Ut(), u = Yt(), c = ir();\n        function l(d, p, g) {\n            let E, f = typeof p == \"string\" ? p : (0, s.formatWithValidation)(p);\n            const _ = f.match(/^[a-zA-Z]{1,}:\\/\\//), m = _ ? f.slice(_[0].length) : f;\n            if ((m.split(\"?\")[0] || \"\").match(/(\\/\\/|\\\\)/)) {\n                console.error(\"Invalid href '\" + f + \"' passed to next/router in page: '\" + d.pathname + \"'. Repeated forward-slashes (//) or backslashes \\\\ are not valid in the href.\");\n                const P = (0, o.normalizeRepeatedSlashes)(m);\n                f = (_ ? _[0] : \"\") + P;\n            }\n            if (!(0, r.isLocalURL)(f)) return g ? [\n                f\n            ] : f;\n            try {\n                E = new URL(f.startsWith(\"#\") ? d.asPath : d.pathname, \"http://n\");\n            } catch (e) {\n                E = new URL(\"/\", \"http://n\");\n            }\n            try {\n                const P = new URL(f, E);\n                P.pathname = (0, i.normalizePathTrailingSlash)(P.pathname);\n                let w = \"\";\n                if ((0, u.isDynamicRoute)(P.pathname) && P.searchParams && g) {\n                    const v = (0, n.searchParamsToUrlQuery)(P.searchParams), { result: h, params: R } = (0, c.interpolateAs)(P.pathname, P.pathname, v);\n                    h && (w = (0, s.formatWithValidation)({\n                        pathname: h,\n                        hash: P.hash,\n                        query: (0, t.omit)(v, R)\n                    }));\n                }\n                const y = P.origin === E.origin ? P.href.slice(P.origin.length) : P.href;\n                return g ? [\n                    y,\n                    w || y\n                ] : y;\n            } catch (e) {\n                return g ? [\n                    f\n                ] : f;\n            }\n        }\n        (typeof e.default == \"function\" || typeof e.default == \"object\" && e.default !== null) && typeof e.default.__esModule > \"u\" && (Object.defineProperty(e.default, \"__esModule\", {\n            value: !0\n        }), Object.assign(e.default, e), a.exports = e.default);\n    }(Y, Y.exports)), Y.exports;\n}\nvar te = {\n    exports: {}\n}, Ce = {}, Ae = {}, vt;\nfunction xt() {\n    return vt || (vt = 1, function(a) {\n        Object.defineProperty(a, \"__esModule\", {\n            value: !0\n        }), Object.defineProperty(a, \"addPathPrefix\", {\n            enumerable: !0,\n            get: function() {\n                return n;\n            }\n        });\n        const e = He();\n        function n(s, t) {\n            if (!s.startsWith(\"/\") || !t) return s;\n            const { pathname: o, query: i, hash: r } = (0, e.parsePath)(s);\n            return \"\" + t + o + i + r;\n        }\n    }(Ae)), Ae;\n}\nvar Pt;\nfunction ur() {\n    return Pt || (Pt = 1, function(a) {\n        Object.defineProperty(a, \"__esModule\", {\n            value: !0\n        }), Object.defineProperty(a, \"addLocale\", {\n            enumerable: !0,\n            get: function() {\n                return s;\n            }\n        });\n        const e = xt(), n = Dt();\n        function s(t, o, i, r) {\n            if (!o || o === i) return t;\n            const u = t.toLowerCase();\n            return !r && ((0, n.pathHasPrefix)(u, \"/api\") || (0, n.pathHasPrefix)(u, \"/\" + o.toLowerCase())) ? t : (0, e.addPathPrefix)(t, \"/\" + o);\n        }\n    }(Ce)), Ce;\n}\nvar Rt;\nfunction sr() {\n    return Rt || (Rt = 1, function(a, e) {\n        var n = {};\n        Object.defineProperty(e, \"__esModule\", {\n            value: !0\n        }), Object.defineProperty(e, \"addLocale\", {\n            enumerable: !0,\n            get: function() {\n                return t;\n            }\n        });\n        const s = fe(), t = function(o) {\n            for(var i = arguments.length, r = new Array(i > 1 ? i - 1 : 0), u = 1; u < i; u++)r[u - 1] = arguments[u];\n            return n.__NEXT_I18N_SUPPORT ? (0, s.normalizePathTrailingSlash)(ur().addLocale(o, ...r)) : o;\n        };\n        (typeof e.default == \"function\" || typeof e.default == \"object\" && e.default !== null) && typeof e.default.__esModule > \"u\" && (Object.defineProperty(e.default, \"__esModule\", {\n            value: !0\n        }), Object.assign(e.default, e), a.exports = e.default);\n    }(te, te.exports)), te.exports;\n}\nvar De = {}, bt;\nfunction cr() {\n    return bt || (bt = 1, function(a) {\n        var e = {};\n        Object.defineProperty(a, \"__esModule\", {\n            value: !0\n        }), Object.defineProperty(a, \"RouterContext\", {\n            enumerable: !0,\n            get: function() {\n                return t;\n            }\n        });\n        const t = /* @__PURE__ */ G._(react__WEBPACK_IMPORTED_MODULE_1__).default.createContext(null);\n        e.NODE_ENV !== \"production\" && (t.displayName = \"RouterContext\");\n    }(De)), De;\n}\nvar Ue = {}, Et;\nfunction lr() {\n    return Et || (Et = 1, function(a) {\n        \"use client\";\n        var e = {};\n        Object.defineProperty(a, \"__esModule\", {\n            value: !0\n        });\n        function n(l, d) {\n            for(var p in d)Object.defineProperty(l, p, {\n                enumerable: !0,\n                get: d[p]\n            });\n        }\n        n(a, {\n            CacheStates: function() {\n                return o;\n            },\n            AppRouterContext: function() {\n                return i;\n            },\n            LayoutRouterContext: function() {\n                return r;\n            },\n            GlobalLayoutRouterContext: function() {\n                return u;\n            },\n            TemplateContext: function() {\n                return c;\n            }\n        });\n        const t = /* @__PURE__ */ G._(react__WEBPACK_IMPORTED_MODULE_1__);\n        var o;\n        (function(l) {\n            l.LAZY_INITIALIZED = \"LAZYINITIALIZED\", l.DATA_FETCH = \"DATAFETCH\", l.READY = \"READY\";\n        })(o || (o = {}));\n        const i = t.default.createContext(null), r = t.default.createContext(null), u = t.default.createContext(null), c = t.default.createContext(null);\n        e.NODE_ENV !== \"production\" && (i.displayName = \"AppRouterContext\", r.displayName = \"LayoutRouterContext\", u.displayName = \"GlobalLayoutRouterContext\", c.displayName = \"TemplateContext\");\n    }(Ue)), Ue;\n}\nvar re = {\n    exports: {}\n}, ne = {\n    exports: {}\n}, Ot;\nfunction fr() {\n    return Ot || (Ot = 1, function(a, e) {\n        Object.defineProperty(e, \"__esModule\", {\n            value: !0\n        });\n        function n(o, i) {\n            for(var r in i)Object.defineProperty(o, r, {\n                enumerable: !0,\n                get: i[r]\n            });\n        }\n        n(e, {\n            requestIdleCallback: function() {\n                return s;\n            },\n            cancelIdleCallback: function() {\n                return t;\n            }\n        });\n        const s = typeof self < \"u\" && self.requestIdleCallback && self.requestIdleCallback.bind(window) || function(o) {\n            let i = Date.now();\n            return self.setTimeout(function() {\n                o({\n                    didTimeout: !1,\n                    timeRemaining: function() {\n                        return Math.max(0, 50 - (Date.now() - i));\n                    }\n                });\n            }, 1);\n        }, t = typeof self < \"u\" && self.cancelIdleCallback && self.cancelIdleCallback.bind(window) || function(o) {\n            return clearTimeout(o);\n        };\n        (typeof e.default == \"function\" || typeof e.default == \"object\" && e.default !== null) && typeof e.default.__esModule > \"u\" && (Object.defineProperty(e.default, \"__esModule\", {\n            value: !0\n        }), Object.assign(e.default, e), a.exports = e.default);\n    }(ne, ne.exports)), ne.exports;\n}\nvar wt;\nfunction dr() {\n    return wt || (wt = 1, function(a, e) {\n        Object.defineProperty(e, \"__esModule\", {\n            value: !0\n        }), Object.defineProperty(e, \"useIntersection\", {\n            enumerable: !0,\n            get: function() {\n                return c;\n            }\n        });\n        const n = react__WEBPACK_IMPORTED_MODULE_1__, s = fr(), t = typeof IntersectionObserver == \"function\", o = /* @__PURE__ */ new Map(), i = [];\n        function r(l) {\n            const d = {\n                root: l.root || null,\n                margin: l.rootMargin || \"\"\n            }, p = i.find((_)=>_.root === d.root && _.margin === d.margin);\n            let g;\n            if (p && (g = o.get(p), g)) return g;\n            const E = /* @__PURE__ */ new Map(), f = new IntersectionObserver((_)=>{\n                _.forEach((m)=>{\n                    const T = E.get(m.target), P = m.isIntersecting || m.intersectionRatio > 0;\n                    T && P && T(P);\n                });\n            }, l);\n            return g = {\n                id: d,\n                observer: f,\n                elements: E\n            }, i.push(d), o.set(d, g), g;\n        }\n        function u(l, d, p) {\n            const { id: g, observer: E, elements: f } = r(p);\n            return f.set(l, d), E.observe(l), function() {\n                if (f.delete(l), E.unobserve(l), f.size === 0) {\n                    E.disconnect(), o.delete(g);\n                    const m = i.findIndex((T)=>T.root === g.root && T.margin === g.margin);\n                    m > -1 && i.splice(m, 1);\n                }\n            };\n        }\n        function c(l) {\n            let { rootRef: d, rootMargin: p, disabled: g } = l;\n            const E = g || !t, [f, _] = (0, n.useState)(!1), m = (0, n.useRef)(null), T = (0, n.useCallback)((w)=>{\n                m.current = w;\n            }, []);\n            (0, n.useEffect)(()=>{\n                if (t) {\n                    if (E || f) return;\n                    const w = m.current;\n                    if (w && w.tagName) return u(w, (v)=>v && _(v), {\n                        root: d == null ? void 0 : d.current,\n                        rootMargin: p\n                    });\n                } else if (!f) {\n                    const w = (0, s.requestIdleCallback)(()=>_(!0));\n                    return ()=>(0, s.cancelIdleCallback)(w);\n                }\n            }, [\n                E,\n                p,\n                d,\n                f,\n                m.current\n            ]);\n            const P = (0, n.useCallback)(()=>{\n                _(!1);\n            }, []);\n            return [\n                T,\n                f,\n                P\n            ];\n        }\n        (typeof e.default == \"function\" || typeof e.default == \"object\" && e.default !== null) && typeof e.default.__esModule > \"u\" && (Object.defineProperty(e.default, \"__esModule\", {\n            value: !0\n        }), Object.assign(e.default, e), a.exports = e.default);\n    }(re, re.exports)), re.exports;\n}\nvar oe = {\n    exports: {}\n}, ie = {\n    exports: {}\n}, xe = {}, Nt;\nfunction hr() {\n    return Nt || (Nt = 1, function(a) {\n        Object.defineProperty(a, \"__esModule\", {\n            value: !0\n        }), Object.defineProperty(a, \"normalizeLocalePath\", {\n            enumerable: !0,\n            get: function() {\n                return e;\n            }\n        });\n        function e(n, s) {\n            let t;\n            const o = n.split(\"/\");\n            return (s || []).some((i)=>o[1] && o[1].toLowerCase() === i.toLowerCase() ? (t = i, o.splice(1, 1), n = o.join(\"/\") || \"/\", !0) : !1), {\n                pathname: n,\n                detectedLocale: t\n            };\n        }\n    }(xe)), xe;\n}\nvar Tt;\nfunction pr() {\n    return Tt || (Tt = 1, function(a, e) {\n        var n = {};\n        Object.defineProperty(e, \"__esModule\", {\n            value: !0\n        }), Object.defineProperty(e, \"normalizeLocalePath\", {\n            enumerable: !0,\n            get: function() {\n                return s;\n            }\n        });\n        const s = (t, o)=>n.__NEXT_I18N_SUPPORT ? hr().normalizeLocalePath(t, o) : {\n                pathname: t,\n                detectedLocale: void 0\n            };\n        (typeof e.default == \"function\" || typeof e.default == \"object\" && e.default !== null) && typeof e.default.__esModule > \"u\" && (Object.defineProperty(e.default, \"__esModule\", {\n            value: !0\n        }), Object.assign(e.default, e), a.exports = e.default);\n    }(ie, ie.exports)), ie.exports;\n}\nvar ae = {\n    exports: {}\n}, ke = {}, jt;\nfunction _r() {\n    return jt || (jt = 1, function(a) {\n        Object.defineProperty(a, \"__esModule\", {\n            value: !0\n        }), Object.defineProperty(a, \"detectDomainLocale\", {\n            enumerable: !0,\n            get: function() {\n                return e;\n            }\n        });\n        function e(n, s, t) {\n            if (n) {\n                t && (t = t.toLowerCase());\n                for (const r of n){\n                    var o, i;\n                    const u = (o = r.domain) == null ? void 0 : o.split(\":\")[0].toLowerCase();\n                    if (s === u || t === r.defaultLocale.toLowerCase() || (i = r.locales) != null && i.some((c)=>c.toLowerCase() === t)) return r;\n                }\n            }\n        }\n    }(ke)), ke;\n}\nvar St;\nfunction mr() {\n    return St || (St = 1, function(a, e) {\n        var n = {};\n        Object.defineProperty(e, \"__esModule\", {\n            value: !0\n        }), Object.defineProperty(e, \"detectDomainLocale\", {\n            enumerable: !0,\n            get: function() {\n                return s;\n            }\n        });\n        const s = function() {\n            for(var t = arguments.length, o = new Array(t), i = 0; i < t; i++)o[i] = arguments[i];\n            if (n.__NEXT_I18N_SUPPORT) return _r().detectDomainLocale(...o);\n        };\n        (typeof e.default == \"function\" || typeof e.default == \"object\" && e.default !== null) && typeof e.default.__esModule > \"u\" && (Object.defineProperty(e.default, \"__esModule\", {\n            value: !0\n        }), Object.assign(e.default, e), a.exports = e.default);\n    }(ae, ae.exports)), ae.exports;\n}\nvar Lt;\nfunction gr() {\n    return Lt || (Lt = 1, function(a, e) {\n        var n = {};\n        Object.defineProperty(e, \"__esModule\", {\n            value: !0\n        }), Object.defineProperty(e, \"getDomainLocale\", {\n            enumerable: !0,\n            get: function() {\n                return o;\n            }\n        });\n        const s = fe(), t = n.__NEXT_ROUTER_BASEPATH || \"\";\n        function o(i, r, u, c) {\n            if (n.__NEXT_I18N_SUPPORT) {\n                const l = pr().normalizeLocalePath, d = mr().detectDomainLocale, p = r || l(i, u).detectedLocale, g = d(c, void 0, p);\n                if (g) {\n                    const E = \"http\" + (g.http ? \"\" : \"s\") + \"://\", f = p === g.defaultLocale ? \"\" : \"/\" + p;\n                    return \"\" + E + g.domain + (0, s.normalizePathTrailingSlash)(\"\" + t + f + i);\n                }\n                return !1;\n            } else return !1;\n        }\n        (typeof e.default == \"function\" || typeof e.default == \"object\" && e.default !== null) && typeof e.default.__esModule > \"u\" && (Object.defineProperty(e.default, \"__esModule\", {\n            value: !0\n        }), Object.assign(e.default, e), a.exports = e.default);\n    }(oe, oe.exports)), oe.exports;\n}\nvar ue = {\n    exports: {}\n}, qt;\nfunction yr() {\n    return qt || (qt = 1, function(a, e) {\n        var n = {};\n        Object.defineProperty(e, \"__esModule\", {\n            value: !0\n        }), Object.defineProperty(e, \"addBasePath\", {\n            enumerable: !0,\n            get: function() {\n                return i;\n            }\n        });\n        const s = xt(), t = fe(), o = n.__NEXT_ROUTER_BASEPATH || \"\";\n        function i(r, u) {\n            return (0, t.normalizePathTrailingSlash)(n.__NEXT_MANUAL_CLIENT_BASE_PATH && !u ? r : (0, s.addPathPrefix)(r, o));\n        }\n        (typeof e.default == \"function\" || typeof e.default == \"object\" && e.default !== null) && typeof e.default.__esModule > \"u\" && (Object.defineProperty(e.default, \"__esModule\", {\n            value: !0\n        }), Object.assign(e.default, e), a.exports = e.default);\n    }(ue, ue.exports)), ue.exports;\n}\nvar se = {\n    exports: {}\n}, It;\nfunction vr() {\n    return It || (It = 1, function(a, e) {\n        Object.defineProperty(e, \"__esModule\", {\n            value: !0\n        });\n        function n(d, p) {\n            for(var g in p)Object.defineProperty(d, g, {\n                enumerable: !0,\n                get: p[g]\n            });\n        }\n        n(e, {\n            PrefetchKind: function() {\n                return l;\n            },\n            ACTION_REFRESH: function() {\n                return s;\n            },\n            ACTION_NAVIGATE: function() {\n                return t;\n            },\n            ACTION_RESTORE: function() {\n                return o;\n            },\n            ACTION_SERVER_PATCH: function() {\n                return i;\n            },\n            ACTION_PREFETCH: function() {\n                return r;\n            },\n            ACTION_FAST_REFRESH: function() {\n                return u;\n            },\n            ACTION_SERVER_ACTION: function() {\n                return c;\n            }\n        });\n        const s = \"refresh\", t = \"navigate\", o = \"restore\", i = \"server-patch\", r = \"prefetch\", u = \"fast-refresh\", c = \"server-action\";\n        var l;\n        (function(d) {\n            d.AUTO = \"auto\", d.FULL = \"full\", d.TEMPORARY = \"temporary\";\n        })(l || (l = {})), (typeof e.default == \"function\" || typeof e.default == \"object\" && e.default !== null) && typeof e.default.__esModule > \"u\" && (Object.defineProperty(e.default, \"__esModule\", {\n            value: !0\n        }), Object.assign(e.default, e), a.exports = e.default);\n    }(se, se.exports)), se.exports;\n}\n(function(a, e) {\n    var _s = $RefreshSig$();\n    \"use client\";\n    var n = {};\n    Object.defineProperty(e, \"__esModule\", {\n        value: !0\n    }), Object.defineProperty(e, \"default\", {\n        enumerable: !0,\n        get: function() {\n            return v;\n        }\n    });\n    const t = /* @__PURE__ */ G._(react__WEBPACK_IMPORTED_MODULE_1__), o = ar(), i = Ut(), r = Ct(), u = le(), c = sr(), l = cr(), d = lr(), p = dr(), g = gr(), E = yr(), f = vr(), _ = /* @__PURE__ */ new Set();\n    function m(h, R, j, N, L, M) {\n        if (typeof window > \"u\" || !M && !(0, i.isLocalURL)(R)) return;\n        if (!N.bypassPrefetchedCheck) {\n            const z = // Let the link's locale prop override the default router locale.\n            typeof N.locale < \"u\" ? N.locale : \"locale\" in h ? h.locale : void 0, H = R + \"%\" + j + \"%\" + z;\n            if (_.has(H)) return;\n            _.add(H);\n        }\n        const W = M ? h.prefetch(R, L) : h.prefetch(R, j, N);\n        Promise.resolve(W).catch((z)=>{\n            if (n.NODE_ENV !== \"production\") throw z;\n        });\n    }\n    function T(h) {\n        const j = h.currentTarget.getAttribute(\"target\");\n        return j && j !== \"_self\" || h.metaKey || h.ctrlKey || h.shiftKey || h.altKey || // triggers resource download\n        h.nativeEvent && h.nativeEvent.which === 2;\n    }\n    function P(h, R, j, N, L, M, W, z, H, de) {\n        const { nodeName: he } = h.currentTarget;\n        if (he.toUpperCase() === \"A\" && (T(h) || // app-router supports external urls out of the box so it shouldn't short-circuit here as support for e.g. `replace` is added in the app-router.\n        !H && !(0, i.isLocalURL)(j))) return;\n        h.preventDefault();\n        const A = ()=>{\n            const $ = W !== null && W !== void 0 ? W : !0;\n            \"beforePopState\" in R ? R[L ? \"replace\" : \"push\"](j, N, {\n                shallow: M,\n                locale: z,\n                scroll: $\n            }) : R[L ? \"replace\" : \"push\"](N || j, {\n                forceOptimisticNavigation: !de,\n                scroll: $\n            });\n        };\n        H ? t.default.startTransition(A) : A();\n    }\n    function w(h) {\n        return typeof h == \"string\" ? h : (0, r.formatUrl)(h);\n    }\n    const v = /* @__PURE__ */ t.default.forwardRef(_s(function(R, j) {\n        _s();\n        let N;\n        const { href: L, as: M, children: W, prefetch: z = null, passHref: H, replace: de, shallow: he, scroll: We, locale: A, onClick: $, onMouseEnter: pe, onTouchStart: $e, legacyBehavior: C = !1, ...zt } = R;\n        N = W, C && (typeof N == \"string\" || typeof N == \"number\") && (N = /* @__PURE__ */ t.default.createElement(\"a\", null, N));\n        const S = t.default.useContext(l.RouterContext), Ht = t.default.useContext(d.AppRouterContext), D = S !== null && S !== void 0 ? S : Ht, U = !S, F = z !== !1, X = z === null ? f.PrefetchKind.AUTO : f.PrefetchKind.FULL;\n        if (n.NODE_ENV !== \"production\") {\n            let b = function(O) {\n                return new Error(\"Failed prop type: The prop `\" + O.key + \"` expects a \" + O.expected + \" in `<Link>`, but got `\" + O.actual + \"` instead.\" + (typeof window < \"u\" ? \"\\nOpen your browser's console to view the Component stack trace.\" : \"\"));\n            };\n            Object.keys({\n                href: !0\n            }).forEach((O)=>{\n                if (O === \"href\" && (R[O] == null || typeof R[O] != \"string\" && typeof R[O] != \"object\")) throw b({\n                    key: O,\n                    expected: \"`string` or `object`\",\n                    actual: R[O] === null ? \"null\" : typeof R[O]\n                });\n            }), Object.keys({\n                as: !0,\n                replace: !0,\n                scroll: !0,\n                shallow: !0,\n                passHref: !0,\n                prefetch: !0,\n                locale: !0,\n                onClick: !0,\n                onMouseEnter: !0,\n                onTouchStart: !0,\n                legacyBehavior: !0\n            }).forEach((O)=>{\n                const k = typeof R[O];\n                if (O === \"as\") {\n                    if (R[O] && k !== \"string\" && k !== \"object\") throw b({\n                        key: O,\n                        expected: \"`string` or `object`\",\n                        actual: k\n                    });\n                } else if (O === \"locale\") {\n                    if (R[O] && k !== \"string\") throw b({\n                        key: O,\n                        expected: \"`string`\",\n                        actual: k\n                    });\n                } else if (O === \"onClick\" || O === \"onMouseEnter\" || O === \"onTouchStart\") {\n                    if (R[O] && k !== \"function\") throw b({\n                        key: O,\n                        expected: \"`function`\",\n                        actual: k\n                    });\n                } else if ((O === \"replace\" || O === \"scroll\" || O === \"shallow\" || O === \"passHref\" || O === \"prefetch\" || O === \"legacyBehavior\") && R[O] != null && k !== \"boolean\") throw b({\n                    key: O,\n                    expected: \"`boolean`\",\n                    actual: k\n                });\n            });\n            const Xe = t.default.useRef(!1);\n            R.prefetch && !Xe.current && !U && (Xe.current = !0, console.warn(\"Next.js auto-prefetches automatically based on viewport. The prefetch attribute is no longer needed. More: https://nextjs.org/docs/messages/prefetch-true-deprecated\"));\n        }\n        if (n.NODE_ENV !== \"production\" && U && !M) {\n            let b;\n            if (typeof L == \"string\" ? b = L : typeof L == \"object\" && typeof L.pathname == \"string\" && (b = L.pathname), b && b.split(\"/\").some((V)=>V.startsWith(\"[\") && V.endsWith(\"]\"))) throw new Error(\"Dynamic href `\" + b + \"` found in <Link> while using the `/app` router, this is not supported. Read more: https://nextjs.org/docs/messages/app-dir-dynamic-href\");\n        }\n        const { href: x, as: I } = t.default.useMemo(()=>{\n            if (!S) {\n                const V = w(L);\n                return {\n                    href: V,\n                    as: M ? w(M) : V\n                };\n            }\n            const [b, K] = (0, o.resolveHref)(S, L, !0);\n            return {\n                href: b,\n                as: M ? (0, o.resolveHref)(S, M) : K || b\n            };\n        }, [\n            S,\n            L,\n            M\n        ]), Be = t.default.useRef(x), Ve = t.default.useRef(I);\n        let q;\n        if (C) if (n.NODE_ENV === \"development\") {\n            $ && console.warn('\"onClick\" was passed to <Link> with `href` of `' + L + '` but \"legacyBehavior\" was set. The legacy behavior requires onClick be set on the child of next/link'), pe && console.warn('\"onMouseEnter\" was passed to <Link> with `href` of `' + L + '` but \"legacyBehavior\" was set. The legacy behavior requires onMouseEnter be set on the child of next/link');\n            try {\n                q = t.default.Children.only(N);\n            } catch (e) {\n                throw N ? new Error(\"Multiple children were passed to <Link> with `href` of `\" + L + \"` but only one child is supported https://nextjs.org/docs/messages/link-multiple-children\" + (typeof window < \"u\" ? \" \\nOpen your browser's console to view the Component stack trace.\" : \"\")) : new Error(\"No children were passed to <Link> with `href` of `\" + L + \"` but one child is required https://nextjs.org/docs/messages/link-no-children\");\n            }\n        } else q = t.default.Children.only(N);\n        else if (n.NODE_ENV === \"development\" && (N == null ? void 0 : N.type) === \"a\") throw new Error(\"Invalid <Link> with <a> child. Please remove <a> or use <Link legacyBehavior>.\\nLearn more: https://nextjs.org/docs/messages/invalid-new-link-with-extra-anchor\");\n        const B = C ? q && typeof q == \"object\" && q.ref : j, [Fe, Ke, Ge] = (0, p.useIntersection)({\n            rootMargin: \"200px\"\n        }), Wt = t.default.useCallback((b)=>{\n            (Ve.current !== I || Be.current !== x) && (Ge(), Ve.current = I, Be.current = x), Fe(b), B && (typeof B == \"function\" ? B(b) : typeof B == \"object\" && (B.current = b));\n        }, [\n            I,\n            B,\n            x,\n            Ge,\n            Fe\n        ]);\n        t.default.useEffect(()=>{\n            n.NODE_ENV === \"production\" && D && (!Ke || !F || m(D, x, I, {\n                locale: A\n            }, {\n                kind: X\n            }, U));\n        }, [\n            I,\n            x,\n            Ke,\n            A,\n            F,\n            S == null ? void 0 : S.locale,\n            D,\n            U,\n            X\n        ]);\n        const Q = {\n            ref: Wt,\n            onClick (b) {\n                if (n.NODE_ENV !== \"production\" && !b) throw new Error('Component rendered inside next/link has to pass click event to \"onClick\" prop.');\n                !C && typeof $ == \"function\" && $(b), C && q.props && typeof q.props.onClick == \"function\" && q.props.onClick(b), D && (b.defaultPrevented || P(b, D, x, I, de, he, We, A, U, F));\n            },\n            onMouseEnter (b) {\n                !C && typeof pe == \"function\" && pe(b), C && q.props && typeof q.props.onMouseEnter == \"function\" && q.props.onMouseEnter(b), D && ((!F || n.NODE_ENV === \"development\") && U || m(D, x, I, {\n                    locale: A,\n                    priority: !0,\n                    // @see {https://github.com/vercel/next.js/discussions/40268?sort=top#discussioncomment-3572642}\n                    bypassPrefetchedCheck: !0\n                }, {\n                    kind: X\n                }, U));\n            },\n            onTouchStart (b) {\n                !C && typeof $e == \"function\" && $e(b), C && q.props && typeof q.props.onTouchStart == \"function\" && q.props.onTouchStart(b), D && (!F && U || m(D, x, I, {\n                    locale: A,\n                    priority: !0,\n                    // @see {https://github.com/vercel/next.js/discussions/40268?sort=top#discussioncomment-3572642}\n                    bypassPrefetchedCheck: !0\n                }, {\n                    kind: X\n                }, U));\n            }\n        };\n        if ((0, u.isAbsoluteUrl)(I)) Q.href = I;\n        else if (!C || H || q.type === \"a\" && !(\"href\" in q.props)) {\n            const b = typeof A < \"u\" ? A : S == null ? void 0 : S.locale, K = (S == null ? void 0 : S.isLocaleDomain) && (0, g.getDomainLocale)(I, b, S == null ? void 0 : S.locales, S == null ? void 0 : S.domainLocales);\n            Q.href = K || (0, E.addBasePath)((0, c.addLocale)(I, b, S == null ? void 0 : S.defaultLocale));\n        }\n        return C ? /* @__PURE__ */ t.default.cloneElement(q, Q) : /* @__PURE__ */ t.default.createElement(\"a\", {\n            ...zt,\n            ...Q\n        }, N);\n    }, \"mnx72oW3hG0kdp38h1IdUdP8GzA=\"));\n    (typeof e.default == \"function\" || typeof e.default == \"object\" && e.default !== null) && typeof e.default.__esModule > \"u\" && (Object.defineProperty(e.default, \"__esModule\", {\n        value: !0\n    }), Object.assign(e.default, e), a.exports = e.default);\n})(ze, ze.exports);\nvar Pr = ze.exports, kt = Pr;\nconst Rr = /* @__PURE__ */ (0,_main_BAWg_Pqh_js__WEBPACK_IMPORTED_MODULE_0__.g)(kt), Nr = /* @__PURE__ */ Bt({\n    __proto__: null,\n    default: Rr\n}, [\n    kt\n]);\n //# sourceMappingURL=link-DaH_InAP.js.map\nvar _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15;\n$RefreshReg$(_c, \"Bt\");\n$RefreshReg$(_c1, \"Vt\");\n$RefreshReg$(_c2, \"Mt\");\n$RefreshReg$(_c3, \"Ft\");\n$RefreshReg$(_c4, \"Ct\");\n$RefreshReg$(_c5, \"Kt\");\n$RefreshReg$(_c6, \"At\");\n$RefreshReg$(_c7, \"He\");\n$RefreshReg$(_c8, \"Dt\");\n$RefreshReg$(_c9, \"Gt\");\n$RefreshReg$(_c10, \"Ut\");\n$RefreshReg$(_c11, \"Xt\");\n$RefreshReg$(_c12, \"Qt\");\n$RefreshReg$(_c13, \"Yt\");\n$RefreshReg$(_c14, \"Zt\");\n$RefreshReg$(_c15, \"Jt\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AdW1hLXNkay91bWEtYXV0aC1jbGllbnQvZGlzdC9saW5rLURhSF9JbkFQLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUFBLEVBQUFDLENBQUEsR0FBWUQsRUFBQUUsd0JBQUEsR0FBbUNBO0FBQy9DLFNBQVNBLEdBQXlCQyxDQUFBQTtJQUM5QixPQUFPQSxLQUFPQSxFQUFJQyxVQUFBLEdBQWFELElBQU07UUFBRUUsU0FBU0Y7SUFBQUE7QUFDcEQ7TUFGU0Q7Ozs7OztRQ0ZUSSxPQUFPQyxjQUFBLENBQXdCQyxHQUFBLGNBQWM7WUFDekNDLE9BQU87UUFDWDtRQU1BLFNBQVNDLEVBQVFDLENBQUFBLEVBQVFDLENBQUFBO1lBQ3JCLFFBQVFDLEtBQVFELEVBQUlOLE9BQU9DLGNBQUEsQ0FBZUksR0FBUUUsR0FBTTtnQkFDcERDLFlBQVk7Z0JBQ1pDLEtBQUtILENBQUFBLENBQUlDLEVBQUk7WUFDckI7UUFDQztRQUNESCxFQUFRRixHQUFTO1lBQ2JRLHdCQUF3QjtnQkFDcEIsT0FBT0E7WUFDVjtZQUNEQyx3QkFBd0I7Z0JBQ3BCLE9BQU9BO1lBQ1Y7WUFDREMsUUFBUTtnQkFDSixPQUFPQTtZQUNWO1FBQ0w7UUFDQSxTQUFTRixFQUF1QkcsQ0FBQUE7WUFDNUIsTUFBTUMsSUFBUTtZQUNkLE9BQUFELEVBQWFFLE9BQUEsQ0FBUSxDQUFDWixHQUFPYTtnQkFDckIsT0FBT0YsQ0FBQUEsQ0FBTUUsRUFBRyxHQUFNLE1BQ3RCRixDQUFBQSxDQUFNRSxFQUFHLEdBQUliLElBQ05jLE1BQU1DLE9BQUEsQ0FBUUosQ0FBQUEsQ0FBTUUsRUFBSSxJQUMvQkYsQ0FBQUEsQ0FBTUUsRUFBRyxDQUFFRyxJQUFBLENBQUtoQixLQUVoQlcsQ0FBQUEsQ0FBTUUsRUFBRyxHQUFJO29CQUNURixDQUFBQSxDQUFNRSxFQUFHO29CQUNUYjtpQkFDaEI7WUFFQSxJQUNXVztRQUNW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TyxTQUFTQSxFQUFZdEcsT0FBQSxFQUFTc0csS0FBZSxPQUFPLFNBQVNBLEVBQVl4RixhQUFhO1lBQ3JQK0csRUFBVzlhLElBQUEsR0FBT2tiLEtBQUFBLENBQUFBLEdBQW9CcEYsRUFBYTFCLFdBQUEsTUFBaUJrQixFQUFXbEgsU0FBQSxFQUFXaUksR0FBSTRFLEdBQVcxQixLQUFlLE9BQU8sU0FBU0EsRUFBWWhMLGFBQWE7UUFDcks7UUFDTyxPQUFBNkssSUFBc0MsZ0JBQUE5SixFQUFBMVcsT0FBQSxDQUFRd2lCLFlBQUEsQ0FBYWhCLEdBQU9VLEtBQTRCLGdCQUFBeEwsRUFBTzFXLE9BQUEsQ0FBUTBnQixhQUFBLENBQWMsS0FBSztZQUNuSSxHQUFHRCxFQUFBQTtZQUNILEdBQUd5QixDQUFBQTtRQUFBLEdBQ0pyVztJQUNQO0lBR0ssUUFBTzFMLEVBQVFILE9BQUEsSUFBWSxjQUFlLE9BQU9HLEVBQVFILE9BQUEsSUFBWSxZQUFZRyxFQUFRSCxPQUFBLEtBQVksU0FBVSxPQUFPRyxFQUFRSCxPQUFBLENBQVFELFVBQUEsR0FBZSxPQUN4SkUsQ0FBQUEsT0FBT0MsY0FBQSxDQUFlQyxFQUFRSCxPQUFBLEVBQVMsY0FBYztRQUFFSSxPQUFPO0lBQUEsSUFDdkRILE9BQUFZLE1BQUEsQ0FBT1YsRUFBUUgsT0FBQSxFQUFTRyxJQUMvQitKLEVBQWlCL0osT0FBQSxHQUFBQSxFQUFRSCxPQUFBOztxQkNuYTNCeWlCLEtBQWlCNWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvY2pzL19pbnRlcm9wX3JlcXVpcmVfZGVmYXVsdC5janM/NjQzYyIsIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvcXVlcnlzdHJpbmcuanM/MWRmZCIsIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvY2pzL19pbnRlcm9wX3JlcXVpcmVfd2lsZGNhcmQuY2pzPzVjMzEiLCJ3ZWJwYWNrOi8vX05fRS8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2Zvcm1hdC11cmwuanM/ODlmOCIsIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvb21pdC5qcz9lOGFhIiwid2VicGFjazovL19OX0UvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL3V0aWxzLmpzP2JiMmQiLCJ3ZWJwYWNrOi8vX05fRS8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL3JlbW92ZS10cmFpbGluZy1zbGFzaC5qcz9mMmY3Iiwid2VicGFjazovL19OX0UvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL3JvdXRlci91dGlscy9wYXJzZS1wYXRoLmpzP2Q3NjQiLCJ3ZWJwYWNrOi8vX05fRS8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9ub3JtYWxpemUtdHJhaWxpbmctc2xhc2guanM/NDk3OCIsIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvcGF0aC1oYXMtcHJlZml4LmpzPzNjYWEiLCJ3ZWJwYWNrOi8vX05fRS8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9oYXMtYmFzZS1wYXRoLmpzPzdmMjEiLCJ3ZWJwYWNrOi8vX05fRS8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2lzLWxvY2FsLXVybC5qcz84MzRlIiwid2VicGFjazovL19OX0UvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL3JvdXRlci91dGlscy9zb3J0ZWQtcm91dGVzLmpzPzgwMDAiLCJ3ZWJwYWNrOi8vX05fRS8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2lzLWR5bmFtaWMuanM/YmNlOSIsIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvaW5kZXguanM/OGZmNiIsIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvcm91dGUtbWF0Y2hlci5qcz9lODRkIiwid2VicGFjazovL19OX0UvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL3BhZ2UtcGF0aC9lbnN1cmUtbGVhZGluZy1zbGFzaC5qcz8xMDQyIiwid2VicGFjazovL19OX0UvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL3NlZ21lbnQuanM/NzRiNCIsIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvYXBwLXBhdGhzLmpzPzg5YTYiLCJ3ZWJwYWNrOi8vX05fRS8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvaGVscGVycy9pbnRlcmNlcHRpb24tcm91dGVzLmpzPzRjMjkiLCJ3ZWJwYWNrOi8vX05fRS8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvZXNjYXBlLXJlZ2V4cC5qcz85ODI4Iiwid2VicGFjazovL19OX0UvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL3JvdXRlci91dGlscy9yb3V0ZS1yZWdleC5qcz8zODc0Iiwid2VicGFjazovL19OX0UvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL3JvdXRlci91dGlscy9pbnRlcnBvbGF0ZS1hcy5qcz85MmExIiwid2VicGFjazovL19OX0UvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvcmVzb2x2ZS1ocmVmLmpzPzZhOGMiLCJ3ZWJwYWNrOi8vX05fRS8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2FkZC1wYXRoLXByZWZpeC5qcz83NzBkIiwid2VicGFjazovL19OX0UvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL3JvdXRlci91dGlscy9hZGQtbG9jYWxlLmpzPzBiOWMiLCJ3ZWJwYWNrOi8vX05fRS8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9hZGQtbG9jYWxlLmpzP2UzZjUiLCJ3ZWJwYWNrOi8vX05fRS8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyLWNvbnRleHQuc2hhcmVkLXJ1bnRpbWUuanM/MzA4MyIsIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9hcHAtcm91dGVyLWNvbnRleHQuc2hhcmVkLXJ1bnRpbWUuanM/NWViYSIsIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L3JlcXVlc3QtaWRsZS1jYWxsYmFjay5qcz9kNGU3Iiwid2VicGFjazovL19OX0UvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvdXNlLWludGVyc2VjdGlvbi5qcz83YWQzIiwid2VicGFjazovL19OX0UvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL2kxOG4vbm9ybWFsaXplLWxvY2FsZS1wYXRoLmpzPzYwNjYiLCJ3ZWJwYWNrOi8vX05fRS8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9ub3JtYWxpemUtbG9jYWxlLXBhdGguanM/NWEyOCIsIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9pMThuL2RldGVjdC1kb21haW4tbG9jYWxlLmpzPzUwOGEiLCJ3ZWJwYWNrOi8vX05fRS8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9kZXRlY3QtZG9tYWluLWxvY2FsZS5qcz83ZWUzIiwid2VicGFjazovL19OX0UvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvZ2V0LWRvbWFpbi1sb2NhbGUuanM/YTlmMiIsIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2FkZC1iYXNlLXBhdGguanM/NDlhMCIsIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2NvbXBvbmVudHMvcm91dGVyLXJlZHVjZXIvcm91dGVyLXJlZHVjZXItdHlwZXMuanM/NDJhMyIsIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2xpbmsuanM/YTVmYyIsIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9uZXh0L2xpbmsuanM/NjM5ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fID0gZXhwb3J0cy5faW50ZXJvcF9yZXF1aXJlX2RlZmF1bHQgPSBfaW50ZXJvcF9yZXF1aXJlX2RlZmF1bHQ7XG5mdW5jdGlvbiBfaW50ZXJvcF9yZXF1aXJlX2RlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICAgIHNlYXJjaFBhcmFtc1RvVXJsUXVlcnk6IG51bGwsXG4gICAgdXJsUXVlcnlUb1NlYXJjaFBhcmFtczogbnVsbCxcbiAgICBhc3NpZ246IG51bGxcbn0pO1xuZnVuY3Rpb24gX2V4cG9ydCh0YXJnZXQsIGFsbCkge1xuICAgIGZvcih2YXIgbmFtZSBpbiBhbGwpT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgbmFtZSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGFsbFtuYW1lXVxuICAgIH0pO1xufVxuX2V4cG9ydChleHBvcnRzLCB7XG4gICAgc2VhcmNoUGFyYW1zVG9VcmxRdWVyeTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBzZWFyY2hQYXJhbXNUb1VybFF1ZXJ5O1xuICAgIH0sXG4gICAgdXJsUXVlcnlUb1NlYXJjaFBhcmFtczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB1cmxRdWVyeVRvU2VhcmNoUGFyYW1zO1xuICAgIH0sXG4gICAgYXNzaWduOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGFzc2lnbjtcbiAgICB9XG59KTtcbmZ1bmN0aW9uIHNlYXJjaFBhcmFtc1RvVXJsUXVlcnkoc2VhcmNoUGFyYW1zKSB7XG4gICAgY29uc3QgcXVlcnkgPSB7fTtcbiAgICBzZWFyY2hQYXJhbXMuZm9yRWFjaCgodmFsdWUsIGtleSk9PntcbiAgICAgICAgaWYgKHR5cGVvZiBxdWVyeVtrZXldID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICBxdWVyeVtrZXldID0gdmFsdWU7XG4gICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShxdWVyeVtrZXldKSkge1xuICAgICAgICAgICAgcXVlcnlba2V5XS5wdXNoKHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHF1ZXJ5W2tleV0gPSBbXG4gICAgICAgICAgICAgICAgcXVlcnlba2V5XSxcbiAgICAgICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBxdWVyeTtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeVVybFF1ZXJ5UGFyYW0ocGFyYW0pIHtcbiAgICBpZiAodHlwZW9mIHBhcmFtID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiBwYXJhbSA9PT0gXCJudW1iZXJcIiAmJiAhaXNOYU4ocGFyYW0pIHx8IHR5cGVvZiBwYXJhbSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZyhwYXJhbSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxufVxuZnVuY3Rpb24gdXJsUXVlcnlUb1NlYXJjaFBhcmFtcyh1cmxRdWVyeSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgICBPYmplY3QuZW50cmllcyh1cmxRdWVyeSkuZm9yRWFjaCgocGFyYW0pPT57XG4gICAgICAgIGxldCBba2V5LCB2YWx1ZV0gPSBwYXJhbTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICB2YWx1ZS5mb3JFYWNoKChpdGVtKT0+cmVzdWx0LmFwcGVuZChrZXksIHN0cmluZ2lmeVVybFF1ZXJ5UGFyYW0oaXRlbSkpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdC5zZXQoa2V5LCBzdHJpbmdpZnlVcmxRdWVyeVBhcmFtKHZhbHVlKSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gYXNzaWduKHRhcmdldCkge1xuICAgIGZvcih2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHNlYXJjaFBhcmFtc0xpc3QgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKyl7XG4gICAgICAgIHNlYXJjaFBhcmFtc0xpc3RbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cbiAgICBzZWFyY2hQYXJhbXNMaXN0LmZvckVhY2goKHNlYXJjaFBhcmFtcyk9PntcbiAgICAgICAgQXJyYXkuZnJvbShzZWFyY2hQYXJhbXMua2V5cygpKS5mb3JFYWNoKChrZXkpPT50YXJnZXQuZGVsZXRlKGtleSkpO1xuICAgICAgICBzZWFyY2hQYXJhbXMuZm9yRWFjaCgodmFsdWUsIGtleSk9PnRhcmdldC5hcHBlbmQoa2V5LCB2YWx1ZSkpO1xuICAgIH0pO1xuICAgIHJldHVybiB0YXJnZXQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXF1ZXJ5c3RyaW5nLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApIHtcbiAgICBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7XG5cbiAgICB2YXIgY2FjaGVCYWJlbEludGVyb3AgPSBuZXcgV2Vha01hcCgpO1xuICAgIHZhciBjYWNoZU5vZGVJbnRlcm9wID0gbmV3IFdlYWtNYXAoKTtcblxuICAgIHJldHVybiAoX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24obm9kZUludGVyb3ApIHtcbiAgICAgICAgcmV0dXJuIG5vZGVJbnRlcm9wID8gY2FjaGVOb2RlSW50ZXJvcCA6IGNhY2hlQmFiZWxJbnRlcm9wO1xuICAgIH0pKG5vZGVJbnRlcm9wKTtcbn1cbmV4cG9ydHMuXyA9IGV4cG9ydHMuX2ludGVyb3BfcmVxdWlyZV93aWxkY2FyZCA9IF9pbnRlcm9wX3JlcXVpcmVfd2lsZGNhcmQ7XG5mdW5jdGlvbiBfaW50ZXJvcF9yZXF1aXJlX3dpbGRjYXJkKG9iaiwgbm9kZUludGVyb3ApIHtcbiAgICBpZiAoIW5vZGVJbnRlcm9wICYmIG9iaiAmJiBvYmouX19lc01vZHVsZSkgcmV0dXJuIG9iajtcbiAgICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4geyBkZWZhdWx0OiBvYmogfTtcblxuICAgIHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCk7XG5cbiAgICBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHJldHVybiBjYWNoZS5nZXQob2JqKTtcblxuICAgIHZhciBuZXdPYmogPSB7fTtcbiAgICB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICAgIGlmIChrZXkgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgICAgIHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsO1xuICAgICAgICAgICAgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTtcbiAgICAgICAgICAgIGVsc2UgbmV3T2JqW2tleV0gPSBvYmpba2V5XTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5ld09iai5kZWZhdWx0ID0gb2JqO1xuXG4gICAgaWYgKGNhY2hlKSBjYWNoZS5zZXQob2JqLCBuZXdPYmopO1xuXG4gICAgcmV0dXJuIG5ld09iajtcbn1cbiIsIi8vIEZvcm1hdCBmdW5jdGlvbiBtb2RpZmllZCBmcm9tIG5vZGVqc1xuLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICAgIGZvcm1hdFVybDogbnVsbCxcbiAgICB1cmxPYmplY3RLZXlzOiBudWxsLFxuICAgIGZvcm1hdFdpdGhWYWxpZGF0aW9uOiBudWxsXG59KTtcbmZ1bmN0aW9uIF9leHBvcnQodGFyZ2V0LCBhbGwpIHtcbiAgICBmb3IodmFyIG5hbWUgaW4gYWxsKU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIG5hbWUsIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiBhbGxbbmFtZV1cbiAgICB9KTtcbn1cbl9leHBvcnQoZXhwb3J0cywge1xuICAgIGZvcm1hdFVybDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBmb3JtYXRVcmw7XG4gICAgfSxcbiAgICB1cmxPYmplY3RLZXlzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHVybE9iamVjdEtleXM7XG4gICAgfSxcbiAgICBmb3JtYXRXaXRoVmFsaWRhdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBmb3JtYXRXaXRoVmFsaWRhdGlvbjtcbiAgICB9XG59KTtcbmNvbnN0IF9pbnRlcm9wX3JlcXVpcmVfd2lsZGNhcmQgPSByZXF1aXJlKFwiQHN3Yy9oZWxwZXJzL18vX2ludGVyb3BfcmVxdWlyZV93aWxkY2FyZFwiKTtcbmNvbnN0IF9xdWVyeXN0cmluZyA9IC8qI19fUFVSRV9fKi8gX2ludGVyb3BfcmVxdWlyZV93aWxkY2FyZC5fKHJlcXVpcmUoXCIuL3F1ZXJ5c3RyaW5nXCIpKTtcbmNvbnN0IHNsYXNoZWRQcm90b2NvbHMgPSAvaHR0cHM/fGZ0cHxnb3BoZXJ8ZmlsZS87XG5mdW5jdGlvbiBmb3JtYXRVcmwodXJsT2JqKSB7XG4gICAgbGV0IHsgYXV0aCwgaG9zdG5hbWUgfSA9IHVybE9iajtcbiAgICBsZXQgcHJvdG9jb2wgPSB1cmxPYmoucHJvdG9jb2wgfHwgXCJcIjtcbiAgICBsZXQgcGF0aG5hbWUgPSB1cmxPYmoucGF0aG5hbWUgfHwgXCJcIjtcbiAgICBsZXQgaGFzaCA9IHVybE9iai5oYXNoIHx8IFwiXCI7XG4gICAgbGV0IHF1ZXJ5ID0gdXJsT2JqLnF1ZXJ5IHx8IFwiXCI7XG4gICAgbGV0IGhvc3QgPSBmYWxzZTtcbiAgICBhdXRoID0gYXV0aCA/IGVuY29kZVVSSUNvbXBvbmVudChhdXRoKS5yZXBsYWNlKC8lM0EvaSwgXCI6XCIpICsgXCJAXCIgOiBcIlwiO1xuICAgIGlmICh1cmxPYmouaG9zdCkge1xuICAgICAgICBob3N0ID0gYXV0aCArIHVybE9iai5ob3N0O1xuICAgIH0gZWxzZSBpZiAoaG9zdG5hbWUpIHtcbiAgICAgICAgaG9zdCA9IGF1dGggKyAofmhvc3RuYW1lLmluZGV4T2YoXCI6XCIpID8gXCJbXCIgKyBob3N0bmFtZSArIFwiXVwiIDogaG9zdG5hbWUpO1xuICAgICAgICBpZiAodXJsT2JqLnBvcnQpIHtcbiAgICAgICAgICAgIGhvc3QgKz0gXCI6XCIgKyB1cmxPYmoucG9ydDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAocXVlcnkgJiYgdHlwZW9mIHF1ZXJ5ID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIHF1ZXJ5ID0gU3RyaW5nKF9xdWVyeXN0cmluZy51cmxRdWVyeVRvU2VhcmNoUGFyYW1zKHF1ZXJ5KSk7XG4gICAgfVxuICAgIGxldCBzZWFyY2ggPSB1cmxPYmouc2VhcmNoIHx8IHF1ZXJ5ICYmIFwiP1wiICsgcXVlcnkgfHwgXCJcIjtcbiAgICBpZiAocHJvdG9jb2wgJiYgIXByb3RvY29sLmVuZHNXaXRoKFwiOlwiKSkgcHJvdG9jb2wgKz0gXCI6XCI7XG4gICAgaWYgKHVybE9iai5zbGFzaGVzIHx8ICghcHJvdG9jb2wgfHwgc2xhc2hlZFByb3RvY29scy50ZXN0KHByb3RvY29sKSkgJiYgaG9zdCAhPT0gZmFsc2UpIHtcbiAgICAgICAgaG9zdCA9IFwiLy9cIiArIChob3N0IHx8IFwiXCIpO1xuICAgICAgICBpZiAocGF0aG5hbWUgJiYgcGF0aG5hbWVbMF0gIT09IFwiL1wiKSBwYXRobmFtZSA9IFwiL1wiICsgcGF0aG5hbWU7XG4gICAgfSBlbHNlIGlmICghaG9zdCkge1xuICAgICAgICBob3N0ID0gXCJcIjtcbiAgICB9XG4gICAgaWYgKGhhc2ggJiYgaGFzaFswXSAhPT0gXCIjXCIpIGhhc2ggPSBcIiNcIiArIGhhc2g7XG4gICAgaWYgKHNlYXJjaCAmJiBzZWFyY2hbMF0gIT09IFwiP1wiKSBzZWFyY2ggPSBcIj9cIiArIHNlYXJjaDtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnJlcGxhY2UoL1s/I10vZywgZW5jb2RlVVJJQ29tcG9uZW50KTtcbiAgICBzZWFyY2ggPSBzZWFyY2gucmVwbGFjZShcIiNcIiwgXCIlMjNcIik7XG4gICAgcmV0dXJuIFwiXCIgKyBwcm90b2NvbCArIGhvc3QgKyBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG59XG5jb25zdCB1cmxPYmplY3RLZXlzID0gW1xuICAgIFwiYXV0aFwiLFxuICAgIFwiaGFzaFwiLFxuICAgIFwiaG9zdFwiLFxuICAgIFwiaG9zdG5hbWVcIixcbiAgICBcImhyZWZcIixcbiAgICBcInBhdGhcIixcbiAgICBcInBhdGhuYW1lXCIsXG4gICAgXCJwb3J0XCIsXG4gICAgXCJwcm90b2NvbFwiLFxuICAgIFwicXVlcnlcIixcbiAgICBcInNlYXJjaFwiLFxuICAgIFwic2xhc2hlc1wiXG5dO1xuZnVuY3Rpb24gZm9ybWF0V2l0aFZhbGlkYXRpb24odXJsKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCIpIHtcbiAgICAgICAgaWYgKHVybCAhPT0gbnVsbCAmJiB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyh1cmwpLmZvckVhY2goKGtleSk9PntcbiAgICAgICAgICAgICAgICBpZiAoIXVybE9iamVjdEtleXMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJVbmtub3duIGtleSBwYXNzZWQgdmlhIHVybE9iamVjdCBpbnRvIHVybC5mb3JtYXQ6IFwiICsga2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZm9ybWF0VXJsKHVybCk7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvcm1hdC11cmwuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJvbWl0XCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBvbWl0O1xuICAgIH1cbn0pO1xuZnVuY3Rpb24gb21pdChvYmplY3QsIGtleXMpIHtcbiAgICBjb25zdCBvbWl0dGVkID0ge307XG4gICAgT2JqZWN0LmtleXMob2JqZWN0KS5mb3JFYWNoKChrZXkpPT57XG4gICAgICAgIGlmICgha2V5cy5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICBvbWl0dGVkW2tleV0gPSBvYmplY3Rba2V5XTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBvbWl0dGVkO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1vbWl0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgV0VCX1ZJVEFMUzogbnVsbCxcbiAgICBleGVjT25jZTogbnVsbCxcbiAgICBpc0Fic29sdXRlVXJsOiBudWxsLFxuICAgIGdldExvY2F0aW9uT3JpZ2luOiBudWxsLFxuICAgIGdldFVSTDogbnVsbCxcbiAgICBnZXREaXNwbGF5TmFtZTogbnVsbCxcbiAgICBpc1Jlc1NlbnQ6IG51bGwsXG4gICAgbm9ybWFsaXplUmVwZWF0ZWRTbGFzaGVzOiBudWxsLFxuICAgIGxvYWRHZXRJbml0aWFsUHJvcHM6IG51bGwsXG4gICAgU1A6IG51bGwsXG4gICAgU1Q6IG51bGwsXG4gICAgRGVjb2RlRXJyb3I6IG51bGwsXG4gICAgTm9ybWFsaXplRXJyb3I6IG51bGwsXG4gICAgUGFnZU5vdEZvdW5kRXJyb3I6IG51bGwsXG4gICAgTWlzc2luZ1N0YXRpY1BhZ2U6IG51bGwsXG4gICAgTWlkZGxld2FyZU5vdEZvdW5kRXJyb3I6IG51bGwsXG4gICAgc3RyaW5naWZ5RXJyb3I6IG51bGxcbn0pO1xuZnVuY3Rpb24gX2V4cG9ydCh0YXJnZXQsIGFsbCkge1xuICAgIGZvcih2YXIgbmFtZSBpbiBhbGwpT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgbmFtZSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGFsbFtuYW1lXVxuICAgIH0pO1xufVxuX2V4cG9ydChleHBvcnRzLCB7XG4gICAgV0VCX1ZJVEFMUzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBXRUJfVklUQUxTO1xuICAgIH0sXG4gICAgZXhlY09uY2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZXhlY09uY2U7XG4gICAgfSxcbiAgICBpc0Fic29sdXRlVXJsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGlzQWJzb2x1dGVVcmw7XG4gICAgfSxcbiAgICBnZXRMb2NhdGlvbk9yaWdpbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXRMb2NhdGlvbk9yaWdpbjtcbiAgICB9LFxuICAgIGdldFVSTDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXRVUkw7XG4gICAgfSxcbiAgICBnZXREaXNwbGF5TmFtZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXREaXNwbGF5TmFtZTtcbiAgICB9LFxuICAgIGlzUmVzU2VudDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBpc1Jlc1NlbnQ7XG4gICAgfSxcbiAgICBub3JtYWxpemVSZXBlYXRlZFNsYXNoZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbm9ybWFsaXplUmVwZWF0ZWRTbGFzaGVzO1xuICAgIH0sXG4gICAgbG9hZEdldEluaXRpYWxQcm9wczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBsb2FkR2V0SW5pdGlhbFByb3BzO1xuICAgIH0sXG4gICAgU1A6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gU1A7XG4gICAgfSxcbiAgICBTVDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBTVDtcbiAgICB9LFxuICAgIERlY29kZUVycm9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIERlY29kZUVycm9yO1xuICAgIH0sXG4gICAgTm9ybWFsaXplRXJyb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gTm9ybWFsaXplRXJyb3I7XG4gICAgfSxcbiAgICBQYWdlTm90Rm91bmRFcnJvcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBQYWdlTm90Rm91bmRFcnJvcjtcbiAgICB9LFxuICAgIE1pc3NpbmdTdGF0aWNQYWdlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIE1pc3NpbmdTdGF0aWNQYWdlO1xuICAgIH0sXG4gICAgTWlkZGxld2FyZU5vdEZvdW5kRXJyb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gTWlkZGxld2FyZU5vdEZvdW5kRXJyb3I7XG4gICAgfSxcbiAgICBzdHJpbmdpZnlFcnJvcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmdpZnlFcnJvcjtcbiAgICB9XG59KTtcbmNvbnN0IFdFQl9WSVRBTFMgPSBbXG4gICAgXCJDTFNcIixcbiAgICBcIkZDUFwiLFxuICAgIFwiRklEXCIsXG4gICAgXCJJTlBcIixcbiAgICBcIkxDUFwiLFxuICAgIFwiVFRGQlwiXG5dO1xuZnVuY3Rpb24gZXhlY09uY2UoZm4pIHtcbiAgICBsZXQgdXNlZCA9IGZhbHNlO1xuICAgIGxldCByZXN1bHQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBmb3IodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKyl7XG4gICAgICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdXNlZCkge1xuICAgICAgICAgICAgdXNlZCA9IHRydWU7XG4gICAgICAgICAgICByZXN1bHQgPSBmbiguLi5hcmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG59XG4vLyBTY2hlbWU6IGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2I3NlY3Rpb24tMy4xXG4vLyBBYnNvbHV0ZSBVUkw6IGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2I3NlY3Rpb24tNC4zXG5jb25zdCBBQlNPTFVURV9VUkxfUkVHRVggPSAvXlthLXpBLVpdW2EtekEtWlxcZCtcXC0uXSo/Oi87XG5jb25zdCBpc0Fic29sdXRlVXJsID0gKHVybCk9PkFCU09MVVRFX1VSTF9SRUdFWC50ZXN0KHVybCk7XG5mdW5jdGlvbiBnZXRMb2NhdGlvbk9yaWdpbigpIHtcbiAgICBjb25zdCB7IHByb3RvY29sLCBob3N0bmFtZSwgcG9ydCB9ID0gd2luZG93LmxvY2F0aW9uO1xuICAgIHJldHVybiBwcm90b2NvbCArIFwiLy9cIiArIGhvc3RuYW1lICsgKHBvcnQgPyBcIjpcIiArIHBvcnQgOiBcIlwiKTtcbn1cbmZ1bmN0aW9uIGdldFVSTCgpIHtcbiAgICBjb25zdCB7IGhyZWYgfSA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgICBjb25zdCBvcmlnaW4gPSBnZXRMb2NhdGlvbk9yaWdpbigpO1xuICAgIHJldHVybiBocmVmLnN1YnN0cmluZyhvcmlnaW4ubGVuZ3RoKTtcbn1cbmZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKENvbXBvbmVudCkge1xuICAgIHJldHVybiB0eXBlb2YgQ29tcG9uZW50ID09PSBcInN0cmluZ1wiID8gQ29tcG9uZW50IDogQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8IFwiVW5rbm93blwiO1xufVxuZnVuY3Rpb24gaXNSZXNTZW50KHJlcykge1xuICAgIHJldHVybiByZXMuZmluaXNoZWQgfHwgcmVzLmhlYWRlcnNTZW50O1xufVxuZnVuY3Rpb24gbm9ybWFsaXplUmVwZWF0ZWRTbGFzaGVzKHVybCkge1xuICAgIGNvbnN0IHVybFBhcnRzID0gdXJsLnNwbGl0KFwiP1wiKTtcbiAgICBjb25zdCB1cmxOb1F1ZXJ5ID0gdXJsUGFydHNbMF07XG4gICAgcmV0dXJuIHVybE5vUXVlcnkvLyBmaXJzdCB3ZSByZXBsYWNlIGFueSBub24tZW5jb2RlZCBiYWNrc2xhc2hlcyB3aXRoIGZvcndhcmRcbiAgICAvLyB0aGVuIG5vcm1hbGl6ZSByZXBlYXRlZCBmb3J3YXJkIHNsYXNoZXNcbiAgICAucmVwbGFjZSgvXFxcXC9nLCBcIi9cIikucmVwbGFjZSgvXFwvXFwvKy9nLCBcIi9cIikgKyAodXJsUGFydHNbMV0gPyBcIj9cIiArIHVybFBhcnRzLnNsaWNlKDEpLmpvaW4oXCI/XCIpIDogXCJcIik7XG59XG5hc3luYyBmdW5jdGlvbiBsb2FkR2V0SW5pdGlhbFByb3BzKEFwcCwgY3R4KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICB2YXIgX0FwcF9wcm90b3R5cGU7XG4gICAgICAgIGlmICgoX0FwcF9wcm90b3R5cGUgPSBBcHAucHJvdG90eXBlKSA9PSBudWxsID8gdm9pZCAwIDogX0FwcF9wcm90b3R5cGUuZ2V0SW5pdGlhbFByb3BzKSB7XG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gJ1wiJyArIGdldERpc3BsYXlOYW1lKEFwcCkgKyAnLmdldEluaXRpYWxQcm9wcygpXCIgaXMgZGVmaW5lZCBhcyBhbiBpbnN0YW5jZSBtZXRob2QgLSB2aXNpdCBodHRwczovL25leHRqcy5vcmcvZG9jcy9tZXNzYWdlcy9nZXQtaW5pdGlhbC1wcm9wcy1hcy1hbi1pbnN0YW5jZS1tZXRob2QgZm9yIG1vcmUgaW5mb3JtYXRpb24uJztcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyB3aGVuIGNhbGxlZCBmcm9tIF9hcHAgYGN0eGAgaXMgbmVzdGVkIGluIGBjdHhgXG4gICAgY29uc3QgcmVzID0gY3R4LnJlcyB8fCBjdHguY3R4ICYmIGN0eC5jdHgucmVzO1xuICAgIGlmICghQXBwLmdldEluaXRpYWxQcm9wcykge1xuICAgICAgICBpZiAoY3R4LmN0eCAmJiBjdHguQ29tcG9uZW50KSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlIHBhZ2VQcm9wcyBkZWZhdWx0XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHBhZ2VQcm9wczogYXdhaXQgbG9hZEdldEluaXRpYWxQcm9wcyhjdHguQ29tcG9uZW50LCBjdHguY3R4KVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGNvbnN0IHByb3BzID0gYXdhaXQgQXBwLmdldEluaXRpYWxQcm9wcyhjdHgpO1xuICAgIGlmIChyZXMgJiYgaXNSZXNTZW50KHJlcykpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzO1xuICAgIH1cbiAgICBpZiAoIXByb3BzKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSAnXCInICsgZ2V0RGlzcGxheU5hbWUoQXBwKSArICcuZ2V0SW5pdGlhbFByb3BzKClcIiBzaG91bGQgcmVzb2x2ZSB0byBhbiBvYmplY3QuIEJ1dCBmb3VuZCBcIicgKyBwcm9wcyArICdcIiBpbnN0ZWFkLic7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBpZiAoT2JqZWN0LmtleXMocHJvcHMpLmxlbmd0aCA9PT0gMCAmJiAhY3R4LmN0eCkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiXCIgKyBnZXREaXNwbGF5TmFtZShBcHApICsgXCIgcmV0dXJuZWQgYW4gZW1wdHkgb2JqZWN0IGZyb20gYGdldEluaXRpYWxQcm9wc2AuIFRoaXMgZGUtb3B0aW1pemVzIGFuZCBwcmV2ZW50cyBhdXRvbWF0aWMgc3RhdGljIG9wdGltaXphdGlvbi4gaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvbWVzc2FnZXMvZW1wdHktb2JqZWN0LWdldEluaXRpYWxQcm9wc1wiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcHJvcHM7XG59XG5jb25zdCBTUCA9IHR5cGVvZiBwZXJmb3JtYW5jZSAhPT0gXCJ1bmRlZmluZWRcIjtcbmNvbnN0IFNUID0gU1AgJiYgW1xuICAgIFwibWFya1wiLFxuICAgIFwibWVhc3VyZVwiLFxuICAgIFwiZ2V0RW50cmllc0J5TmFtZVwiXG5dLmV2ZXJ5KChtZXRob2QpPT50eXBlb2YgcGVyZm9ybWFuY2VbbWV0aG9kXSA9PT0gXCJmdW5jdGlvblwiKTtcbmNsYXNzIERlY29kZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xufVxuY2xhc3MgTm9ybWFsaXplRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG59XG5jbGFzcyBQYWdlTm90Rm91bmRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihwYWdlKXtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5jb2RlID0gXCJFTk9FTlRcIjtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJQYWdlTm90Rm91bmRFcnJvclwiO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBcIkNhbm5vdCBmaW5kIG1vZHVsZSBmb3IgcGFnZTogXCIgKyBwYWdlO1xuICAgIH1cbn1cbmNsYXNzIE1pc3NpbmdTdGF0aWNQYWdlIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHBhZ2UsIG1lc3NhZ2Upe1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBcIkZhaWxlZCB0byBsb2FkIHN0YXRpYyBmaWxlIGZvciBwYWdlOiBcIiArIHBhZ2UgKyBcIiBcIiArIG1lc3NhZ2U7XG4gICAgfVxufVxuY2xhc3MgTWlkZGxld2FyZU5vdEZvdW5kRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5jb2RlID0gXCJFTk9FTlRcIjtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gXCJDYW5ub3QgZmluZCB0aGUgbWlkZGxld2FyZSBtb2R1bGVcIjtcbiAgICB9XG59XG5mdW5jdGlvbiBzdHJpbmdpZnlFcnJvcihlcnJvcikge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgIHN0YWNrOiBlcnJvci5zdGFja1xuICAgIH0pO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiLCIvKipcbiAqIFJlbW92ZXMgdGhlIHRyYWlsaW5nIHNsYXNoIGZvciBhIGdpdmVuIHJvdXRlIG9yIHBhZ2UgcGF0aC4gUHJlc2VydmVzIHRoZVxuICogcm9vdCBwYWdlLiBFeGFtcGxlczpcbiAqICAgLSBgL2Zvby9iYXIvYCAtPiBgL2Zvby9iYXJgXG4gKiAgIC0gYC9mb28vYmFyYCAtPiBgL2Zvby9iYXJgXG4gKiAgIC0gYC9gIC0+IGAvYFxuICovIFwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicmVtb3ZlVHJhaWxpbmdTbGFzaFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcmVtb3ZlVHJhaWxpbmdTbGFzaDtcbiAgICB9XG59KTtcbmZ1bmN0aW9uIHJlbW92ZVRyYWlsaW5nU2xhc2gocm91dGUpIHtcbiAgICByZXR1cm4gcm91dGUucmVwbGFjZSgvXFwvJC8sIFwiXCIpIHx8IFwiL1wiO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZW1vdmUtdHJhaWxpbmctc2xhc2guanMubWFwIiwiLyoqXG4gKiBHaXZlbiBhIHBhdGggdGhpcyBmdW5jdGlvbiB3aWxsIGZpbmQgdGhlIHBhdGhuYW1lLCBxdWVyeSBhbmQgaGFzaCBhbmQgcmV0dXJuXG4gKiB0aGVtLiBUaGlzIGlzIHVzZWZ1bCB0byBwYXJzZSBmdWxsIHBhdGhzIG9uIHRoZSBjbGllbnQgc2lkZS5cbiAqIEBwYXJhbSBwYXRoIEEgcGF0aCB0byBwYXJzZSBlLmcuIC9mb28vYmFyP2lkPTEjaGFzaFxuICovIFwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicGFyc2VQYXRoXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBwYXJzZVBhdGg7XG4gICAgfVxufSk7XG5mdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICAgIGNvbnN0IGhhc2hJbmRleCA9IHBhdGguaW5kZXhPZihcIiNcIik7XG4gICAgY29uc3QgcXVlcnlJbmRleCA9IHBhdGguaW5kZXhPZihcIj9cIik7XG4gICAgY29uc3QgaGFzUXVlcnkgPSBxdWVyeUluZGV4ID4gLTEgJiYgKGhhc2hJbmRleCA8IDAgfHwgcXVlcnlJbmRleCA8IGhhc2hJbmRleCk7XG4gICAgaWYgKGhhc1F1ZXJ5IHx8IGhhc2hJbmRleCA+IC0xKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwYXRobmFtZTogcGF0aC5zdWJzdHJpbmcoMCwgaGFzUXVlcnkgPyBxdWVyeUluZGV4IDogaGFzaEluZGV4KSxcbiAgICAgICAgICAgIHF1ZXJ5OiBoYXNRdWVyeSA/IHBhdGguc3Vic3RyaW5nKHF1ZXJ5SW5kZXgsIGhhc2hJbmRleCA+IC0xID8gaGFzaEluZGV4IDogdW5kZWZpbmVkKSA6IFwiXCIsXG4gICAgICAgICAgICBoYXNoOiBoYXNoSW5kZXggPiAtMSA/IHBhdGguc2xpY2UoaGFzaEluZGV4KSA6IFwiXCJcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcGF0aG5hbWU6IHBhdGgsXG4gICAgICAgIHF1ZXJ5OiBcIlwiLFxuICAgICAgICBoYXNoOiBcIlwiXG4gICAgfTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFyc2UtcGF0aC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm5vcm1hbGl6ZVBhdGhUcmFpbGluZ1NsYXNoXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBub3JtYWxpemVQYXRoVHJhaWxpbmdTbGFzaDtcbiAgICB9XG59KTtcbmNvbnN0IF9yZW1vdmV0cmFpbGluZ3NsYXNoID0gcmVxdWlyZShcIi4uL3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL3JlbW92ZS10cmFpbGluZy1zbGFzaFwiKTtcbmNvbnN0IF9wYXJzZXBhdGggPSByZXF1aXJlKFwiLi4vc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvcGFyc2UtcGF0aFwiKTtcbmNvbnN0IG5vcm1hbGl6ZVBhdGhUcmFpbGluZ1NsYXNoID0gKHBhdGgpPT57XG4gICAgaWYgKCFwYXRoLnN0YXJ0c1dpdGgoXCIvXCIpIHx8IHByb2Nlc3MuZW52Ll9fTkVYVF9NQU5VQUxfVFJBSUxJTkdfU0xBU0gpIHtcbiAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgfVxuICAgIGNvbnN0IHsgcGF0aG5hbWUsIHF1ZXJ5LCBoYXNoIH0gPSAoMCwgX3BhcnNlcGF0aC5wYXJzZVBhdGgpKHBhdGgpO1xuICAgIGlmIChwcm9jZXNzLmVudi5fX05FWFRfVFJBSUxJTkdfU0xBU0gpIHtcbiAgICAgICAgaWYgKC9cXC5bXi9dK1xcLz8kLy50ZXN0KHBhdGhuYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIFwiXCIgKyAoMCwgX3JlbW92ZXRyYWlsaW5nc2xhc2gucmVtb3ZlVHJhaWxpbmdTbGFzaCkocGF0aG5hbWUpICsgcXVlcnkgKyBoYXNoO1xuICAgICAgICB9IGVsc2UgaWYgKHBhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKSkge1xuICAgICAgICAgICAgcmV0dXJuIFwiXCIgKyBwYXRobmFtZSArIHF1ZXJ5ICsgaGFzaDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBwYXRobmFtZSArIFwiL1wiICsgcXVlcnkgKyBoYXNoO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBcIlwiICsgKDAsIF9yZW1vdmV0cmFpbGluZ3NsYXNoLnJlbW92ZVRyYWlsaW5nU2xhc2gpKHBhdGhuYW1lKSArIHF1ZXJ5ICsgaGFzaDtcbn07XG5cbmlmICgodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ29iamVjdCcgJiYgZXhwb3J0cy5kZWZhdWx0ICE9PSBudWxsKSkgJiYgdHlwZW9mIGV4cG9ydHMuZGVmYXVsdC5fX2VzTW9kdWxlID09PSAndW5kZWZpbmVkJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cy5kZWZhdWx0LCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gIE9iamVjdC5hc3NpZ24oZXhwb3J0cy5kZWZhdWx0LCBleHBvcnRzKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vcm1hbGl6ZS10cmFpbGluZy1zbGFzaC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInBhdGhIYXNQcmVmaXhcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHBhdGhIYXNQcmVmaXg7XG4gICAgfVxufSk7XG5jb25zdCBfcGFyc2VwYXRoID0gcmVxdWlyZShcIi4vcGFyc2UtcGF0aFwiKTtcbmZ1bmN0aW9uIHBhdGhIYXNQcmVmaXgocGF0aCwgcHJlZml4KSB7XG4gICAgaWYgKHR5cGVvZiBwYXRoICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgeyBwYXRobmFtZSB9ID0gKDAsIF9wYXJzZXBhdGgucGFyc2VQYXRoKShwYXRoKTtcbiAgICByZXR1cm4gcGF0aG5hbWUgPT09IHByZWZpeCB8fCBwYXRobmFtZS5zdGFydHNXaXRoKHByZWZpeCArIFwiL1wiKTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGF0aC1oYXMtcHJlZml4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaGFzQmFzZVBhdGhcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGhhc0Jhc2VQYXRoO1xuICAgIH1cbn0pO1xuY29uc3QgX3BhdGhoYXNwcmVmaXggPSByZXF1aXJlKFwiLi4vc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvcGF0aC1oYXMtcHJlZml4XCIpO1xuY29uc3QgYmFzZVBhdGggPSBwcm9jZXNzLmVudi5fX05FWFRfUk9VVEVSX0JBU0VQQVRIIHx8IFwiXCI7XG5mdW5jdGlvbiBoYXNCYXNlUGF0aChwYXRoKSB7XG4gICAgcmV0dXJuICgwLCBfcGF0aGhhc3ByZWZpeC5wYXRoSGFzUHJlZml4KShwYXRoLCBiYXNlUGF0aCk7XG59XG5cbmlmICgodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ29iamVjdCcgJiYgZXhwb3J0cy5kZWZhdWx0ICE9PSBudWxsKSkgJiYgdHlwZW9mIGV4cG9ydHMuZGVmYXVsdC5fX2VzTW9kdWxlID09PSAndW5kZWZpbmVkJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cy5kZWZhdWx0LCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gIE9iamVjdC5hc3NpZ24oZXhwb3J0cy5kZWZhdWx0LCBleHBvcnRzKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhhcy1iYXNlLXBhdGguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc0xvY2FsVVJMXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBpc0xvY2FsVVJMO1xuICAgIH1cbn0pO1xuY29uc3QgX3V0aWxzID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzXCIpO1xuY29uc3QgX2hhc2Jhc2VwYXRoID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL2NsaWVudC9oYXMtYmFzZS1wYXRoXCIpO1xuZnVuY3Rpb24gaXNMb2NhbFVSTCh1cmwpIHtcbiAgICAvLyBwcmV2ZW50IGEgaHlkcmF0aW9uIG1pc21hdGNoIG9uIGhyZWYgZm9yIHVybCB3aXRoIGFuY2hvciByZWZzXG4gICAgaWYgKCEoMCwgX3V0aWxzLmlzQWJzb2x1dGVVcmwpKHVybCkpIHJldHVybiB0cnVlO1xuICAgIHRyeSB7XG4gICAgICAgIC8vIGFic29sdXRlIHVybHMgY2FuIGJlIGxvY2FsIGlmIHRoZXkgYXJlIG9uIHRoZSBzYW1lIG9yaWdpblxuICAgICAgICBjb25zdCBsb2NhdGlvbk9yaWdpbiA9ICgwLCBfdXRpbHMuZ2V0TG9jYXRpb25PcmlnaW4pKCk7XG4gICAgICAgIGNvbnN0IHJlc29sdmVkID0gbmV3IFVSTCh1cmwsIGxvY2F0aW9uT3JpZ2luKTtcbiAgICAgICAgcmV0dXJuIHJlc29sdmVkLm9yaWdpbiA9PT0gbG9jYXRpb25PcmlnaW4gJiYgKDAsIF9oYXNiYXNlcGF0aC5oYXNCYXNlUGF0aCkocmVzb2x2ZWQucGF0aG5hbWUpO1xuICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXMtbG9jYWwtdXJsLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0U29ydGVkUm91dGVzXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXRTb3J0ZWRSb3V0ZXM7XG4gICAgfVxufSk7XG5jbGFzcyBVcmxOb2RlIHtcbiAgICBpbnNlcnQodXJsUGF0aCkge1xuICAgICAgICB0aGlzLl9pbnNlcnQodXJsUGF0aC5zcGxpdChcIi9cIikuZmlsdGVyKEJvb2xlYW4pLCBbXSwgZmFsc2UpO1xuICAgIH1cbiAgICBzbW9vc2goKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zbW9vc2goKTtcbiAgICB9XG4gICAgX3Ntb29zaChwcmVmaXgpIHtcbiAgICAgICAgaWYgKHByZWZpeCA9PT0gdm9pZCAwKSBwcmVmaXggPSBcIi9cIjtcbiAgICAgICAgY29uc3QgY2hpbGRyZW5QYXRocyA9IFtcbiAgICAgICAgICAgIC4uLnRoaXMuY2hpbGRyZW4ua2V5cygpXG4gICAgICAgIF0uc29ydCgpO1xuICAgICAgICBpZiAodGhpcy5zbHVnTmFtZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY2hpbGRyZW5QYXRocy5zcGxpY2UoY2hpbGRyZW5QYXRocy5pbmRleE9mKFwiW11cIiksIDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnJlc3RTbHVnTmFtZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY2hpbGRyZW5QYXRocy5zcGxpY2UoY2hpbGRyZW5QYXRocy5pbmRleE9mKFwiWy4uLl1cIiksIDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbmFsUmVzdFNsdWdOYW1lICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjaGlsZHJlblBhdGhzLnNwbGljZShjaGlsZHJlblBhdGhzLmluZGV4T2YoXCJbWy4uLl1dXCIpLCAxKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByb3V0ZXMgPSBjaGlsZHJlblBhdGhzLm1hcCgoYyk9PnRoaXMuY2hpbGRyZW4uZ2V0KGMpLl9zbW9vc2goXCJcIiArIHByZWZpeCArIGMgKyBcIi9cIikpLnJlZHVjZSgocHJldiwgY3Vycik9PltcbiAgICAgICAgICAgICAgICAuLi5wcmV2LFxuICAgICAgICAgICAgICAgIC4uLmN1cnJcbiAgICAgICAgICAgIF0sIFtdKTtcbiAgICAgICAgaWYgKHRoaXMuc2x1Z05hbWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJvdXRlcy5wdXNoKC4uLnRoaXMuY2hpbGRyZW4uZ2V0KFwiW11cIikuX3Ntb29zaChwcmVmaXggKyBcIltcIiArIHRoaXMuc2x1Z05hbWUgKyBcIl0vXCIpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMucGxhY2Vob2xkZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IHIgPSBwcmVmaXggPT09IFwiL1wiID8gXCIvXCIgOiBwcmVmaXguc2xpY2UoMCwgLTEpO1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9uYWxSZXN0U2x1Z05hbWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IGNhbm5vdCBkZWZpbmUgYSByb3V0ZSB3aXRoIHRoZSBzYW1lIHNwZWNpZmljaXR5IGFzIGEgb3B0aW9uYWwgY2F0Y2gtYWxsIHJvdXRlIChcIicgKyByICsgJ1wiIGFuZCBcIicgKyByICsgXCJbWy4uLlwiICsgdGhpcy5vcHRpb25hbFJlc3RTbHVnTmFtZSArICddXVwiKS4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJvdXRlcy51bnNoaWZ0KHIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnJlc3RTbHVnTmFtZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcm91dGVzLnB1c2goLi4udGhpcy5jaGlsZHJlbi5nZXQoXCJbLi4uXVwiKS5fc21vb3NoKHByZWZpeCArIFwiWy4uLlwiICsgdGhpcy5yZXN0U2x1Z05hbWUgKyBcIl0vXCIpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcHRpb25hbFJlc3RTbHVnTmFtZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcm91dGVzLnB1c2goLi4udGhpcy5jaGlsZHJlbi5nZXQoXCJbWy4uLl1dXCIpLl9zbW9vc2gocHJlZml4ICsgXCJbWy4uLlwiICsgdGhpcy5vcHRpb25hbFJlc3RTbHVnTmFtZSArIFwiXV0vXCIpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcm91dGVzO1xuICAgIH1cbiAgICBfaW5zZXJ0KHVybFBhdGhzLCBzbHVnTmFtZXMsIGlzQ2F0Y2hBbGwpIHtcbiAgICAgICAgaWYgKHVybFBhdGhzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5wbGFjZWhvbGRlciA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0NhdGNoQWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYXRjaC1hbGwgbXVzdCBiZSB0aGUgbGFzdCBwYXJ0IG9mIHRoZSBVUkwuXCIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRoZSBuZXh0IHNlZ21lbnQgaW4gdGhlIHVybFBhdGhzIGxpc3RcbiAgICAgICAgbGV0IG5leHRTZWdtZW50ID0gdXJsUGF0aHNbMF07XG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSBzZWdtZW50IG1hdGNoZXMgYFtzb21ldGhpbmddYFxuICAgICAgICBpZiAobmV4dFNlZ21lbnQuc3RhcnRzV2l0aChcIltcIikgJiYgbmV4dFNlZ21lbnQuZW5kc1dpdGgoXCJdXCIpKSB7XG4gICAgICAgICAgICAvLyBTdHJpcCBgW2AgYW5kIGBdYCwgbGVhdmluZyBvbmx5IGBzb21ldGhpbmdgXG4gICAgICAgICAgICBsZXQgc2VnbWVudE5hbWUgPSBuZXh0U2VnbWVudC5zbGljZSgxLCAtMSk7XG4gICAgICAgICAgICBsZXQgaXNPcHRpb25hbCA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHNlZ21lbnROYW1lLnN0YXJ0c1dpdGgoXCJbXCIpICYmIHNlZ21lbnROYW1lLmVuZHNXaXRoKFwiXVwiKSkge1xuICAgICAgICAgICAgICAgIC8vIFN0cmlwIG9wdGlvbmFsIGBbYCBhbmQgYF1gLCBsZWF2aW5nIG9ubHkgYHNvbWV0aGluZ2BcbiAgICAgICAgICAgICAgICBzZWdtZW50TmFtZSA9IHNlZ21lbnROYW1lLnNsaWNlKDEsIC0xKTtcbiAgICAgICAgICAgICAgICBpc09wdGlvbmFsID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZWdtZW50TmFtZS5zdGFydHNXaXRoKFwiLi4uXCIpKSB7XG4gICAgICAgICAgICAgICAgLy8gU3RyaXAgYC4uLmAsIGxlYXZpbmcgb25seSBgc29tZXRoaW5nYFxuICAgICAgICAgICAgICAgIHNlZ21lbnROYW1lID0gc2VnbWVudE5hbWUuc3Vic3RyaW5nKDMpO1xuICAgICAgICAgICAgICAgIGlzQ2F0Y2hBbGwgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNlZ21lbnROYW1lLnN0YXJ0c1dpdGgoXCJbXCIpIHx8IHNlZ21lbnROYW1lLmVuZHNXaXRoKFwiXVwiKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNlZ21lbnQgbmFtZXMgbWF5IG5vdCBzdGFydCBvciBlbmQgd2l0aCBleHRyYSBicmFja2V0cyAoJ1wiICsgc2VnbWVudE5hbWUgKyBcIicpLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZWdtZW50TmFtZS5zdGFydHNXaXRoKFwiLlwiKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNlZ21lbnQgbmFtZXMgbWF5IG5vdCBzdGFydCB3aXRoIGVycm9uZW91cyBwZXJpb2RzICgnXCIgKyBzZWdtZW50TmFtZSArIFwiJykuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gaGFuZGxlU2x1ZyhwcmV2aW91c1NsdWcsIG5leHRTbHVnKSB7XG4gICAgICAgICAgICAgICAgaWYgKHByZXZpb3VzU2x1ZyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgc3BlY2lmaWMgc2VnbWVudCBhbHJlYWR5IGhhcyBhIHNsdWcgYnV0IHRoZSBzbHVnIGlzIG5vdCBgc29tZXRoaW5nYFxuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIHByZXZlbnRzIGNvbGxpc2lvbnMgbGlrZTpcbiAgICAgICAgICAgICAgICAgICAgLy8gcGFnZXMvW3Bvc3RdL2luZGV4LmpzXG4gICAgICAgICAgICAgICAgICAgIC8vIHBhZ2VzL1tpZF0vaW5kZXguanNcbiAgICAgICAgICAgICAgICAgICAgLy8gQmVjYXVzZSBjdXJyZW50bHkgbXVsdGlwbGUgZHluYW1pYyBwYXJhbXMgb24gdGhlIHNhbWUgc2VnbWVudCBsZXZlbCBhcmUgbm90IHN1cHBvcnRlZFxuICAgICAgICAgICAgICAgICAgICBpZiAocHJldmlvdXNTbHVnICE9PSBuZXh0U2x1Zykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogVGhpcyBlcnJvciBzZWVtcyB0byBiZSBjb25mdXNpbmcgZm9yIHVzZXJzLCBuZWVkcyBhbiBlcnJvciBsaW5rLCB0aGUgZGVzY3JpcHRpb24gY2FuIGJlIGJhc2VkIG9uIGFib3ZlIGNvbW1lbnQuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgY2Fubm90IHVzZSBkaWZmZXJlbnQgc2x1ZyBuYW1lcyBmb3IgdGhlIHNhbWUgZHluYW1pYyBwYXRoICgnXCIgKyBwcmV2aW91c1NsdWcgKyBcIicgIT09ICdcIiArIG5leHRTbHVnICsgXCInKS5cIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2x1Z05hbWVzLmZvckVhY2goKHNsdWcpPT57XG4gICAgICAgICAgICAgICAgICAgIGlmIChzbHVnID09PSBuZXh0U2x1Zykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgY2Fubm90IGhhdmUgdGhlIHNhbWUgc2x1ZyBuYW1lIFwiJyArIG5leHRTbHVnICsgJ1wiIHJlcGVhdCB3aXRoaW4gYSBzaW5nbGUgZHluYW1pYyBwYXRoJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNsdWcucmVwbGFjZSgvXFxXL2csIFwiXCIpID09PSBuZXh0U2VnbWVudC5yZXBsYWNlKC9cXFcvZywgXCJcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IGNhbm5vdCBoYXZlIHRoZSBzbHVnIG5hbWVzIFwiJyArIHNsdWcgKyAnXCIgYW5kIFwiJyArIG5leHRTbHVnICsgJ1wiIGRpZmZlciBvbmx5IGJ5IG5vbi13b3JkIHN5bWJvbHMgd2l0aGluIGEgc2luZ2xlIGR5bmFtaWMgcGF0aCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgc2x1Z05hbWVzLnB1c2gobmV4dFNsdWcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzQ2F0Y2hBbGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNPcHRpb25hbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5yZXN0U2x1Z05hbWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgY2Fubm90IHVzZSBib3RoIGFuIHJlcXVpcmVkIGFuZCBvcHRpb25hbCBjYXRjaC1hbGwgcm91dGUgYXQgdGhlIHNhbWUgbGV2ZWwgKFwiWy4uLicgKyB0aGlzLnJlc3RTbHVnTmFtZSArICddXCIgYW5kIFwiJyArIHVybFBhdGhzWzBdICsgJ1wiICkuJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlU2x1Zyh0aGlzLm9wdGlvbmFsUmVzdFNsdWdOYW1lLCBzZWdtZW50TmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHNsdWdOYW1lIGlzIGtlcHQgYXMgaXQgY2FuIG9ubHkgYmUgb25lIHBhcnRpY3VsYXIgc2x1Z05hbWVcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25hbFJlc3RTbHVnTmFtZSA9IHNlZ21lbnROYW1lO1xuICAgICAgICAgICAgICAgICAgICAvLyBuZXh0U2VnbWVudCBpcyBvdmVyd3JpdHRlbiB0byBbWy4uLl1dIHNvIHRoYXQgaXQgY2FuIGxhdGVyIGJlIHNvcnRlZCBzcGVjaWZpY2FsbHlcbiAgICAgICAgICAgICAgICAgICAgbmV4dFNlZ21lbnQgPSBcIltbLi4uXV1cIjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25hbFJlc3RTbHVnTmFtZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBjYW5ub3QgdXNlIGJvdGggYW4gb3B0aW9uYWwgYW5kIHJlcXVpcmVkIGNhdGNoLWFsbCByb3V0ZSBhdCB0aGUgc2FtZSBsZXZlbCAoXCJbWy4uLicgKyB0aGlzLm9wdGlvbmFsUmVzdFNsdWdOYW1lICsgJ11dXCIgYW5kIFwiJyArIHVybFBhdGhzWzBdICsgJ1wiKS4nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVTbHVnKHRoaXMucmVzdFNsdWdOYW1lLCBzZWdtZW50TmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHNsdWdOYW1lIGlzIGtlcHQgYXMgaXQgY2FuIG9ubHkgYmUgb25lIHBhcnRpY3VsYXIgc2x1Z05hbWVcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXN0U2x1Z05hbWUgPSBzZWdtZW50TmFtZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gbmV4dFNlZ21lbnQgaXMgb3ZlcndyaXR0ZW4gdG8gWy4uLl0gc28gdGhhdCBpdCBjYW4gbGF0ZXIgYmUgc29ydGVkIHNwZWNpZmljYWxseVxuICAgICAgICAgICAgICAgICAgICBuZXh0U2VnbWVudCA9IFwiWy4uLl1cIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChpc09wdGlvbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignT3B0aW9uYWwgcm91dGUgcGFyYW1ldGVycyBhcmUgbm90IHlldCBzdXBwb3J0ZWQgKFwiJyArIHVybFBhdGhzWzBdICsgJ1wiKS4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaGFuZGxlU2x1Zyh0aGlzLnNsdWdOYW1lLCBzZWdtZW50TmFtZSk7XG4gICAgICAgICAgICAgICAgLy8gc2x1Z05hbWUgaXMga2VwdCBhcyBpdCBjYW4gb25seSBiZSBvbmUgcGFydGljdWxhciBzbHVnTmFtZVxuICAgICAgICAgICAgICAgIHRoaXMuc2x1Z05hbWUgPSBzZWdtZW50TmFtZTtcbiAgICAgICAgICAgICAgICAvLyBuZXh0U2VnbWVudCBpcyBvdmVyd3JpdHRlbiB0byBbXSBzbyB0aGF0IGl0IGNhbiBsYXRlciBiZSBzb3J0ZWQgc3BlY2lmaWNhbGx5XG4gICAgICAgICAgICAgICAgbmV4dFNlZ21lbnQgPSBcIltdXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgdGhpcyBVcmxOb2RlIGRvZXNuJ3QgaGF2ZSB0aGUgbmV4dFNlZ21lbnQgeWV0IHdlIGNyZWF0ZSBhIG5ldyBjaGlsZCBVcmxOb2RlXG4gICAgICAgIGlmICghdGhpcy5jaGlsZHJlbi5oYXMobmV4dFNlZ21lbnQpKSB7XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnNldChuZXh0U2VnbWVudCwgbmV3IFVybE5vZGUoKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jaGlsZHJlbi5nZXQobmV4dFNlZ21lbnQpLl9pbnNlcnQodXJsUGF0aHMuc2xpY2UoMSksIHNsdWdOYW1lcywgaXNDYXRjaEFsbCk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgICB0aGlzLmNoaWxkcmVuID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLnNsdWdOYW1lID0gbnVsbDtcbiAgICAgICAgdGhpcy5yZXN0U2x1Z05hbWUgPSBudWxsO1xuICAgICAgICB0aGlzLm9wdGlvbmFsUmVzdFNsdWdOYW1lID0gbnVsbDtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRTb3J0ZWRSb3V0ZXMobm9ybWFsaXplZFBhZ2VzKSB7XG4gICAgLy8gRmlyc3QgdGhlIFVybE5vZGUgaXMgY3JlYXRlZCwgYW5kIGV2ZXJ5IFVybE5vZGUgY2FuIGhhdmUgb25seSAxIGR5bmFtaWMgc2VnbWVudFxuICAgIC8vIEVnIHlvdSBjYW4ndCBoYXZlIHBhZ2VzL1twb3N0XS9hYmMuanMgYW5kIHBhZ2VzL1toZWxsb10vc29tZXRoaW5nLWVsc2UuanNcbiAgICAvLyBPbmx5IDEgZHluYW1pYyBzZWdtZW50IHBlciBuZXN0aW5nIGxldmVsXG4gICAgLy8gU28gaW4gdGhlIGNhc2UgdGhhdCBpcyB0ZXN0L2ludGVncmF0aW9uL2R5bmFtaWMtcm91dGluZyBpdCdsbCBiZSB0aGlzOlxuICAgIC8vIHBhZ2VzL1twb3N0XS9jb21tZW50cy5qc1xuICAgIC8vIHBhZ2VzL2Jsb2cvW3Bvc3RdL2NvbW1lbnQvW2lkXS5qc1xuICAgIC8vIEJvdGggYXJlIGZpbmUgYmVjYXVzZSBgcGFnZXMvW3Bvc3RdYCBhbmQgYHBhZ2VzL2Jsb2dgIGFyZSBvbiB0aGUgc2FtZSBsZXZlbFxuICAgIC8vIFNvIGluIHRoaXMgY2FzZSBgVXJsTm9kZWAgY3JlYXRlZCBoZXJlIGhhcyBgdGhpcy5zbHVnTmFtZSA9PT0gJ3Bvc3QnYFxuICAgIC8vIEFuZCBzaW5jZSB5b3VyIFBSIHBhc3NlZCB0aHJvdWdoIGBzbHVnTmFtZWAgYXMgYW4gYXJyYXkgYmFzaWNhbGx5IGl0J2QgaW5jbHVkaW5nIGl0IGluIHRvbyBtYW55IHBvc3NpYmlsaXRpZXNcbiAgICAvLyBJbnN0ZWFkIHdoYXQgaGFzIHRvIGJlIHBhc3NlZCB0aHJvdWdoIGlzIHRoZSB1cHdhcmRzIHBhdGgncyBkeW5hbWljIG5hbWVzXG4gICAgY29uc3Qgcm9vdCA9IG5ldyBVcmxOb2RlKCk7XG4gICAgLy8gSGVyZSB0aGUgYHJvb3RgIGdldHMgaW5qZWN0ZWQgbXVsdGlwbGUgcGF0aHMsIGFuZCBpbnNlcnQgd2lsbCBicmVhayB0aGVtIHVwIGludG8gc3VibGV2ZWxzXG4gICAgbm9ybWFsaXplZFBhZ2VzLmZvckVhY2goKHBhZ2VQYXRoKT0+cm9vdC5pbnNlcnQocGFnZVBhdGgpKTtcbiAgICAvLyBTbW9vc2ggd2lsbCB0aGVuIHNvcnQgdGhvc2Ugc3VibGV2ZWxzIHVwIHRvIHRoZSBwb2ludCB3aGVyZSB5b3UgZ2V0IHRoZSBjb3JyZWN0IHJvdXRlIGRlZmluaXRpb24gcHJpb3JpdHlcbiAgICByZXR1cm4gcm9vdC5zbW9vc2goKTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c29ydGVkLXJvdXRlcy5qcy5tYXAiLCIvLyBJZGVudGlmeSAvW3BhcmFtXS8gaW4gcm91dGUgc3RyaW5nXG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzRHluYW1pY1JvdXRlXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBpc0R5bmFtaWNSb3V0ZTtcbiAgICB9XG59KTtcbmNvbnN0IFRFU1RfUk9VVEUgPSAvXFwvXFxbW14vXSs/XFxdKD89XFwvfCQpLztcbmZ1bmN0aW9uIGlzRHluYW1pY1JvdXRlKHJvdXRlKSB7XG4gICAgcmV0dXJuIFRFU1RfUk9VVEUudGVzdChyb3V0ZSk7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzLWR5bmFtaWMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBnZXRTb3J0ZWRSb3V0ZXM6IG51bGwsXG4gICAgaXNEeW5hbWljUm91dGU6IG51bGxcbn0pO1xuZnVuY3Rpb24gX2V4cG9ydCh0YXJnZXQsIGFsbCkge1xuICAgIGZvcih2YXIgbmFtZSBpbiBhbGwpT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgbmFtZSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGFsbFtuYW1lXVxuICAgIH0pO1xufVxuX2V4cG9ydChleHBvcnRzLCB7XG4gICAgZ2V0U29ydGVkUm91dGVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9zb3J0ZWRyb3V0ZXMuZ2V0U29ydGVkUm91dGVzO1xuICAgIH0sXG4gICAgaXNEeW5hbWljUm91dGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX2lzZHluYW1pYy5pc0R5bmFtaWNSb3V0ZTtcbiAgICB9XG59KTtcbmNvbnN0IF9zb3J0ZWRyb3V0ZXMgPSByZXF1aXJlKFwiLi9zb3J0ZWQtcm91dGVzXCIpO1xuY29uc3QgX2lzZHluYW1pYyA9IHJlcXVpcmUoXCIuL2lzLWR5bmFtaWNcIik7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0Um91dGVNYXRjaGVyXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXRSb3V0ZU1hdGNoZXI7XG4gICAgfVxufSk7XG5jb25zdCBfdXRpbHMgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHNcIik7XG5mdW5jdGlvbiBnZXRSb3V0ZU1hdGNoZXIocGFyYW0pIHtcbiAgICBsZXQgeyByZSwgZ3JvdXBzIH0gPSBwYXJhbTtcbiAgICByZXR1cm4gKHBhdGhuYW1lKT0+e1xuICAgICAgICBjb25zdCByb3V0ZU1hdGNoID0gcmUuZXhlYyhwYXRobmFtZSk7XG4gICAgICAgIGlmICghcm91dGVNYXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRlY29kZSA9IChwYXJhbSk9PntcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChwYXJhbSk7XG4gICAgICAgICAgICB9IGNhdGNoIChfKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IF91dGlscy5EZWNvZGVFcnJvcihcImZhaWxlZCB0byBkZWNvZGUgcGFyYW1cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHt9O1xuICAgICAgICBPYmplY3Qua2V5cyhncm91cHMpLmZvckVhY2goKHNsdWdOYW1lKT0+e1xuICAgICAgICAgICAgY29uc3QgZyA9IGdyb3Vwc1tzbHVnTmFtZV07XG4gICAgICAgICAgICBjb25zdCBtID0gcm91dGVNYXRjaFtnLnBvc107XG4gICAgICAgICAgICBpZiAobSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcGFyYW1zW3NsdWdOYW1lXSA9IH5tLmluZGV4T2YoXCIvXCIpID8gbS5zcGxpdChcIi9cIikubWFwKChlbnRyeSk9PmRlY29kZShlbnRyeSkpIDogZy5yZXBlYXQgPyBbXG4gICAgICAgICAgICAgICAgICAgIGRlY29kZShtKVxuICAgICAgICAgICAgICAgIF0gOiBkZWNvZGUobSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcGFyYW1zO1xuICAgIH07XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJvdXRlLW1hdGNoZXIuanMubWFwIiwiLyoqXG4gKiBGb3IgYSBnaXZlbiBwYWdlIHBhdGgsIHRoaXMgZnVuY3Rpb24gZW5zdXJlcyB0aGF0IHRoZXJlIGlzIGEgbGVhZGluZyBzbGFzaC5cbiAqIElmIHRoZXJlIGlzIG5vdCBhIGxlYWRpbmcgc2xhc2gsIG9uZSBpcyBhZGRlZCwgb3RoZXJ3aXNlIGl0IGlzIG5vb3AuXG4gKi8gXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJlbnN1cmVMZWFkaW5nU2xhc2hcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGVuc3VyZUxlYWRpbmdTbGFzaDtcbiAgICB9XG59KTtcbmZ1bmN0aW9uIGVuc3VyZUxlYWRpbmdTbGFzaChwYXRoKSB7XG4gICAgcmV0dXJuIHBhdGguc3RhcnRzV2l0aChcIi9cIikgPyBwYXRoIDogXCIvXCIgKyBwYXRoO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbnN1cmUtbGVhZGluZy1zbGFzaC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzR3JvdXBTZWdtZW50XCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBpc0dyb3VwU2VnbWVudDtcbiAgICB9XG59KTtcbmZ1bmN0aW9uIGlzR3JvdXBTZWdtZW50KHNlZ21lbnQpIHtcbiAgICAvLyBVc2UgYXJyYXlbMF0gZm9yIHBlcmZvcm1hbnQgcHVycG9zZVxuICAgIHJldHVybiBzZWdtZW50WzBdID09PSBcIihcIiAmJiBzZWdtZW50LmVuZHNXaXRoKFwiKVwiKTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VnbWVudC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICAgIG5vcm1hbGl6ZUFwcFBhdGg6IG51bGwsXG4gICAgbm9ybWFsaXplUnNjUGF0aDogbnVsbFxufSk7XG5mdW5jdGlvbiBfZXhwb3J0KHRhcmdldCwgYWxsKSB7XG4gICAgZm9yKHZhciBuYW1lIGluIGFsbClPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBuYW1lLCB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGdldDogYWxsW25hbWVdXG4gICAgfSk7XG59XG5fZXhwb3J0KGV4cG9ydHMsIHtcbiAgICBub3JtYWxpemVBcHBQYXRoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZUFwcFBhdGg7XG4gICAgfSxcbiAgICBub3JtYWxpemVSc2NQYXRoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZVJzY1BhdGg7XG4gICAgfVxufSk7XG5jb25zdCBfZW5zdXJlbGVhZGluZ3NsYXNoID0gcmVxdWlyZShcIi4uLy4uL3BhZ2UtcGF0aC9lbnN1cmUtbGVhZGluZy1zbGFzaFwiKTtcbmNvbnN0IF9zZWdtZW50ID0gcmVxdWlyZShcIi4uLy4uL3NlZ21lbnRcIik7XG5mdW5jdGlvbiBub3JtYWxpemVBcHBQYXRoKHJvdXRlKSB7XG4gICAgcmV0dXJuICgwLCBfZW5zdXJlbGVhZGluZ3NsYXNoLmVuc3VyZUxlYWRpbmdTbGFzaCkocm91dGUuc3BsaXQoXCIvXCIpLnJlZHVjZSgocGF0aG5hbWUsIHNlZ21lbnQsIGluZGV4LCBzZWdtZW50cyk9PntcbiAgICAgICAgLy8gRW1wdHkgc2VnbWVudHMgYXJlIGlnbm9yZWQuXG4gICAgICAgIGlmICghc2VnbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhdGhuYW1lO1xuICAgICAgICB9XG4gICAgICAgIC8vIEdyb3VwcyBhcmUgaWdub3JlZC5cbiAgICAgICAgaWYgKCgwLCBfc2VnbWVudC5pc0dyb3VwU2VnbWVudCkoc2VnbWVudCkpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXRobmFtZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBQYXJhbGxlbCBzZWdtZW50cyBhcmUgaWdub3JlZC5cbiAgICAgICAgaWYgKHNlZ21lbnRbMF0gPT09IFwiQFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gcGF0aG5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhlIGxhc3Qgc2VnbWVudCAoaWYgaXQncyBhIGxlYWYpIHNob3VsZCBiZSBpZ25vcmVkLlxuICAgICAgICBpZiAoKHNlZ21lbnQgPT09IFwicGFnZVwiIHx8IHNlZ21lbnQgPT09IFwicm91dGVcIikgJiYgaW5kZXggPT09IHNlZ21lbnRzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXRobmFtZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGF0aG5hbWUgKyBcIi9cIiArIHNlZ21lbnQ7XG4gICAgfSwgXCJcIikpO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplUnNjUGF0aChwYXRobmFtZSwgZW5hYmxlZCkge1xuICAgIHJldHVybiBlbmFibGVkID8gcGF0aG5hbWUucmVwbGFjZSgvXFwucnNjKCR8XFw/KS8sIC8vICQxIGVuc3VyZXMgYD9gIGlzIHByZXNlcnZlZFxuICAgIFwiJDFcIikgOiBwYXRobmFtZTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXBhdGhzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgSU5URVJDRVBUSU9OX1JPVVRFX01BUktFUlM6IG51bGwsXG4gICAgaXNJbnRlcmNlcHRpb25Sb3V0ZUFwcFBhdGg6IG51bGwsXG4gICAgZXh0cmFjdEludGVyY2VwdGlvblJvdXRlSW5mb3JtYXRpb246IG51bGxcbn0pO1xuZnVuY3Rpb24gX2V4cG9ydCh0YXJnZXQsIGFsbCkge1xuICAgIGZvcih2YXIgbmFtZSBpbiBhbGwpT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgbmFtZSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGFsbFtuYW1lXVxuICAgIH0pO1xufVxuX2V4cG9ydChleHBvcnRzLCB7XG4gICAgSU5URVJDRVBUSU9OX1JPVVRFX01BUktFUlM6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gSU5URVJDRVBUSU9OX1JPVVRFX01BUktFUlM7XG4gICAgfSxcbiAgICBpc0ludGVyY2VwdGlvblJvdXRlQXBwUGF0aDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBpc0ludGVyY2VwdGlvblJvdXRlQXBwUGF0aDtcbiAgICB9LFxuICAgIGV4dHJhY3RJbnRlcmNlcHRpb25Sb3V0ZUluZm9ybWF0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGV4dHJhY3RJbnRlcmNlcHRpb25Sb3V0ZUluZm9ybWF0aW9uO1xuICAgIH1cbn0pO1xuY29uc3QgX2FwcHBhdGhzID0gcmVxdWlyZShcIi4uLy4uLy4uL3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2FwcC1wYXRoc1wiKTtcbmNvbnN0IElOVEVSQ0VQVElPTl9ST1VURV9NQVJLRVJTID0gW1xuICAgIFwiKC4uKSguLilcIixcbiAgICBcIiguKVwiLFxuICAgIFwiKC4uKVwiLFxuICAgIFwiKC4uLilcIlxuXTtcbmZ1bmN0aW9uIGlzSW50ZXJjZXB0aW9uUm91dGVBcHBQYXRoKHBhdGgpIHtcbiAgICAvLyBUT0RPLUFQUDogYWRkIG1vcmUgc2VyaW91cyB2YWxpZGF0aW9uXG4gICAgcmV0dXJuIHBhdGguc3BsaXQoXCIvXCIpLmZpbmQoKHNlZ21lbnQpPT5JTlRFUkNFUFRJT05fUk9VVEVfTUFSS0VSUy5maW5kKChtKT0+c2VnbWVudC5zdGFydHNXaXRoKG0pKSkgIT09IHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIGV4dHJhY3RJbnRlcmNlcHRpb25Sb3V0ZUluZm9ybWF0aW9uKHBhdGgpIHtcbiAgICBsZXQgaW50ZXJjZXB0aW5nUm91dGUsIG1hcmtlciwgaW50ZXJjZXB0ZWRSb3V0ZTtcbiAgICBmb3IgKGNvbnN0IHNlZ21lbnQgb2YgcGF0aC5zcGxpdChcIi9cIikpe1xuICAgICAgICBtYXJrZXIgPSBJTlRFUkNFUFRJT05fUk9VVEVfTUFSS0VSUy5maW5kKChtKT0+c2VnbWVudC5zdGFydHNXaXRoKG0pKTtcbiAgICAgICAgaWYgKG1hcmtlcikge1xuICAgICAgICAgICAgW2ludGVyY2VwdGluZ1JvdXRlLCBpbnRlcmNlcHRlZFJvdXRlXSA9IHBhdGguc3BsaXQobWFya2VyLCAyKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghaW50ZXJjZXB0aW5nUm91dGUgfHwgIW1hcmtlciB8fCAhaW50ZXJjZXB0ZWRSb3V0ZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgaW50ZXJjZXB0aW9uIHJvdXRlOiAke3BhdGh9LiBNdXN0IGJlIGluIHRoZSBmb3JtYXQgLzxpbnRlcmNlcHRpbmcgcm91dGU+LyguLnwuLi58Li4pKC4uKS88aW50ZXJjZXB0ZWQgcm91dGU+YCk7XG4gICAgfVxuICAgIGludGVyY2VwdGluZ1JvdXRlID0gKDAsIF9hcHBwYXRocy5ub3JtYWxpemVBcHBQYXRoKShpbnRlcmNlcHRpbmdSb3V0ZSkgLy8gbm9ybWFsaXplIHRoZSBwYXRoLCBlLmcuIC8oYmxvZykvZmVlZCAtPiAvZmVlZFxuICAgIDtcbiAgICBzd2l0Y2gobWFya2VyKXtcbiAgICAgICAgY2FzZSBcIiguKVwiOlxuICAgICAgICAgICAgLy8gKC4pIGluZGljYXRlcyB0aGF0IHdlIHNob3VsZCBtYXRjaCB3aXRoIHNpYmxpbmcgcm91dGVzLCBzbyB3ZSBqdXN0IG5lZWQgdG8gYXBwZW5kIHRoZSBpbnRlcmNlcHRlZCByb3V0ZSB0byB0aGUgaW50ZXJjZXB0aW5nIHJvdXRlXG4gICAgICAgICAgICBpZiAoaW50ZXJjZXB0aW5nUm91dGUgPT09IFwiL1wiKSB7XG4gICAgICAgICAgICAgICAgaW50ZXJjZXB0ZWRSb3V0ZSA9IGAvJHtpbnRlcmNlcHRlZFJvdXRlfWA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGludGVyY2VwdGVkUm91dGUgPSBpbnRlcmNlcHRpbmdSb3V0ZSArIFwiL1wiICsgaW50ZXJjZXB0ZWRSb3V0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiKC4uKVwiOlxuICAgICAgICAgICAgLy8gKC4uKSBpbmRpY2F0ZXMgdGhhdCB3ZSBzaG91bGQgbWF0Y2ggYXQgb25lIGxldmVsIHVwLCBzbyB3ZSBuZWVkIHRvIHJlbW92ZSB0aGUgbGFzdCBzZWdtZW50IG9mIHRoZSBpbnRlcmNlcHRpbmcgcm91dGVcbiAgICAgICAgICAgIGlmIChpbnRlcmNlcHRpbmdSb3V0ZSA9PT0gXCIvXCIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgaW50ZXJjZXB0aW9uIHJvdXRlOiAke3BhdGh9LiBDYW5ub3QgdXNlICguLikgbWFya2VyIGF0IHRoZSByb290IGxldmVsLCB1c2UgKC4pIGluc3RlYWQuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbnRlcmNlcHRlZFJvdXRlID0gaW50ZXJjZXB0aW5nUm91dGUuc3BsaXQoXCIvXCIpLnNsaWNlKDAsIC0xKS5jb25jYXQoaW50ZXJjZXB0ZWRSb3V0ZSkuam9pbihcIi9cIik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIiguLi4pXCI6XG4gICAgICAgICAgICAvLyAoLi4uKSB3aWxsIG1hdGNoIHRoZSByb3V0ZSBzZWdtZW50IGluIHRoZSByb290IGRpcmVjdG9yeSwgc28gd2UgbmVlZCB0byB1c2UgdGhlIHJvb3QgZGlyZWN0b3J5IHRvIHByZXBlbmQgdGhlIGludGVyY2VwdGVkIHJvdXRlXG4gICAgICAgICAgICBpbnRlcmNlcHRlZFJvdXRlID0gXCIvXCIgKyBpbnRlcmNlcHRlZFJvdXRlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCIoLi4pKC4uKVwiOlxuICAgICAgICAgICAgLy8gKC4uKSguLikgaW5kaWNhdGVzIHRoYXQgd2Ugc2hvdWxkIG1hdGNoIGF0IHR3byBsZXZlbHMgdXAsIHNvIHdlIG5lZWQgdG8gcmVtb3ZlIHRoZSBsYXN0IHR3byBzZWdtZW50cyBvZiB0aGUgaW50ZXJjZXB0aW5nIHJvdXRlXG4gICAgICAgICAgICBjb25zdCBzcGxpdEludGVyY2VwdGluZ1JvdXRlID0gaW50ZXJjZXB0aW5nUm91dGUuc3BsaXQoXCIvXCIpO1xuICAgICAgICAgICAgaWYgKHNwbGl0SW50ZXJjZXB0aW5nUm91dGUubGVuZ3RoIDw9IDIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgaW50ZXJjZXB0aW9uIHJvdXRlOiAke3BhdGh9LiBDYW5ub3QgdXNlICguLikoLi4pIG1hcmtlciBhdCB0aGUgcm9vdCBsZXZlbCBvciBvbmUgbGV2ZWwgdXAuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbnRlcmNlcHRlZFJvdXRlID0gc3BsaXRJbnRlcmNlcHRpbmdSb3V0ZS5zbGljZSgwLCAtMikuY29uY2F0KGludGVyY2VwdGVkUm91dGUpLmpvaW4oXCIvXCIpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhcmlhbnQ6IHVuZXhwZWN0ZWQgbWFya2VyXCIpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBpbnRlcmNlcHRpbmdSb3V0ZSxcbiAgICAgICAgaW50ZXJjZXB0ZWRSb3V0ZVxuICAgIH07XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVyY2VwdGlvbi1yb3V0ZXMuanMubWFwIiwiLy8gcmVnZXhwIGlzIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvZXNjYXBlLXN0cmluZy1yZWdleHBcblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZXNjYXBlU3RyaW5nUmVnZXhwXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBlc2NhcGVTdHJpbmdSZWdleHA7XG4gICAgfVxufSk7XG5jb25zdCByZUhhc1JlZ0V4cCA9IC9bfFxcXFx7fSgpW1xcXV4kKyo/Li1dLztcbmNvbnN0IHJlUmVwbGFjZVJlZ0V4cCA9IC9bfFxcXFx7fSgpW1xcXV4kKyo/Li1dL2c7XG5mdW5jdGlvbiBlc2NhcGVTdHJpbmdSZWdleHAoc3RyKSB7XG4gICAgLy8gc2VlIGFsc286IGh0dHBzOi8vZ2l0aHViLmNvbS9sb2Rhc2gvbG9kYXNoL2Jsb2IvMmRhMDI0YzNiNGY5OTQ3YTQ4NTE3NjM5ZGU3NTYwNDU3Y2Q0ZWM2Yy9lc2NhcGVSZWdFeHAuanMjTDIzXG4gICAgaWYgKHJlSGFzUmVnRXhwLnRlc3Qoc3RyKSkge1xuICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UocmVSZXBsYWNlUmVnRXhwLCBcIlxcXFwkJlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXNjYXBlLXJlZ2V4cC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICAgIGdldFJvdXRlUmVnZXg6IG51bGwsXG4gICAgZ2V0TmFtZWRSb3V0ZVJlZ2V4OiBudWxsLFxuICAgIGdldE5hbWVkTWlkZGxld2FyZVJlZ2V4OiBudWxsXG59KTtcbmZ1bmN0aW9uIF9leHBvcnQodGFyZ2V0LCBhbGwpIHtcbiAgICBmb3IodmFyIG5hbWUgaW4gYWxsKU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIG5hbWUsIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiBhbGxbbmFtZV1cbiAgICB9KTtcbn1cbl9leHBvcnQoZXhwb3J0cywge1xuICAgIGdldFJvdXRlUmVnZXg6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZ2V0Um91dGVSZWdleDtcbiAgICB9LFxuICAgIGdldE5hbWVkUm91dGVSZWdleDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXROYW1lZFJvdXRlUmVnZXg7XG4gICAgfSxcbiAgICBnZXROYW1lZE1pZGRsZXdhcmVSZWdleDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXROYW1lZE1pZGRsZXdhcmVSZWdleDtcbiAgICB9XG59KTtcbmNvbnN0IF9pbnRlcmNlcHRpb25yb3V0ZXMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vc2VydmVyL2Z1dHVyZS9oZWxwZXJzL2ludGVyY2VwdGlvbi1yb3V0ZXNcIik7XG5jb25zdCBfZXNjYXBlcmVnZXhwID0gcmVxdWlyZShcIi4uLy4uL2VzY2FwZS1yZWdleHBcIik7XG5jb25zdCBfcmVtb3ZldHJhaWxpbmdzbGFzaCA9IHJlcXVpcmUoXCIuL3JlbW92ZS10cmFpbGluZy1zbGFzaFwiKTtcbmNvbnN0IE5FWFRfUVVFUllfUEFSQU1fUFJFRklYID0gXCJueHRQXCI7XG5jb25zdCBORVhUX0lOVEVSQ0VQVElPTl9NQVJLRVJfUFJFRklYID0gXCJueHRJXCI7XG4vKipcbiAqIFBhcnNlcyBhIGdpdmVuIHBhcmFtZXRlciBmcm9tIGEgcm91dGUgdG8gYSBkYXRhIHN0cnVjdHVyZSB0aGF0IGNhbiBiZSB1c2VkXG4gKiB0byBnZW5lcmF0ZSB0aGUgcGFyYW1ldHJpemVkIHJvdXRlLiBFeGFtcGxlczpcbiAqICAgLSBgWy4uLnNsdWddYCAtPiBgeyBrZXk6ICdzbHVnJywgcmVwZWF0OiB0cnVlLCBvcHRpb25hbDogdHJ1ZSB9YFxuICogICAtIGAuLi5zbHVnYCAtPiBgeyBrZXk6ICdzbHVnJywgcmVwZWF0OiB0cnVlLCBvcHRpb25hbDogZmFsc2UgfWBcbiAqICAgLSBgW2Zvb11gIC0+IGB7IGtleTogJ2ZvbycsIHJlcGVhdDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlIH1gXG4gKiAgIC0gYGJhcmAgLT4gYHsga2V5OiAnYmFyJywgcmVwZWF0OiBmYWxzZSwgb3B0aW9uYWw6IGZhbHNlIH1gXG4gKi8gZnVuY3Rpb24gcGFyc2VQYXJhbWV0ZXIocGFyYW0pIHtcbiAgICBjb25zdCBvcHRpb25hbCA9IHBhcmFtLnN0YXJ0c1dpdGgoXCJbXCIpICYmIHBhcmFtLmVuZHNXaXRoKFwiXVwiKTtcbiAgICBpZiAob3B0aW9uYWwpIHtcbiAgICAgICAgcGFyYW0gPSBwYXJhbS5zbGljZSgxLCAtMSk7XG4gICAgfVxuICAgIGNvbnN0IHJlcGVhdCA9IHBhcmFtLnN0YXJ0c1dpdGgoXCIuLi5cIik7XG4gICAgaWYgKHJlcGVhdCkge1xuICAgICAgICBwYXJhbSA9IHBhcmFtLnNsaWNlKDMpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBrZXk6IHBhcmFtLFxuICAgICAgICByZXBlYXQsXG4gICAgICAgIG9wdGlvbmFsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGdldFBhcmFtZXRyaXplZFJvdXRlKHJvdXRlKSB7XG4gICAgY29uc3Qgc2VnbWVudHMgPSAoMCwgX3JlbW92ZXRyYWlsaW5nc2xhc2gucmVtb3ZlVHJhaWxpbmdTbGFzaCkocm91dGUpLnNsaWNlKDEpLnNwbGl0KFwiL1wiKTtcbiAgICBjb25zdCBncm91cHMgPSB7fTtcbiAgICBsZXQgZ3JvdXBJbmRleCA9IDE7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcGFyYW1ldGVyaXplZFJvdXRlOiBzZWdtZW50cy5tYXAoKHNlZ21lbnQpPT57XG4gICAgICAgICAgICBjb25zdCBtYXJrZXJNYXRjaCA9IF9pbnRlcmNlcHRpb25yb3V0ZXMuSU5URVJDRVBUSU9OX1JPVVRFX01BUktFUlMuZmluZCgobSk9PnNlZ21lbnQuc3RhcnRzV2l0aChtKSk7XG4gICAgICAgICAgICBjb25zdCBwYXJhbU1hdGNoZXMgPSBzZWdtZW50Lm1hdGNoKC9cXFsoKD86XFxbLipcXF0pfC4rKVxcXS8pIC8vIENoZWNrIGZvciBwYXJhbWV0ZXJzXG4gICAgICAgICAgICA7XG4gICAgICAgICAgICBpZiAobWFya2VyTWF0Y2ggJiYgcGFyYW1NYXRjaGVzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBrZXksIG9wdGlvbmFsLCByZXBlYXQgfSA9IHBhcnNlUGFyYW1ldGVyKHBhcmFtTWF0Y2hlc1sxXSk7XG4gICAgICAgICAgICAgICAgZ3JvdXBzW2tleV0gPSB7XG4gICAgICAgICAgICAgICAgICAgIHBvczogZ3JvdXBJbmRleCsrLFxuICAgICAgICAgICAgICAgICAgICByZXBlYXQsXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCIvXCIgKyAoMCwgX2VzY2FwZXJlZ2V4cC5lc2NhcGVTdHJpbmdSZWdleHApKG1hcmtlck1hdGNoKSArIFwiKFteL10rPylcIjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyYW1NYXRjaGVzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBrZXksIHJlcGVhdCwgb3B0aW9uYWwgfSA9IHBhcnNlUGFyYW1ldGVyKHBhcmFtTWF0Y2hlc1sxXSk7XG4gICAgICAgICAgICAgICAgZ3JvdXBzW2tleV0gPSB7XG4gICAgICAgICAgICAgICAgICAgIHBvczogZ3JvdXBJbmRleCsrLFxuICAgICAgICAgICAgICAgICAgICByZXBlYXQsXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVwZWF0ID8gb3B0aW9uYWwgPyBcIig/Oi8oLis/KSk/XCIgOiBcIi8oLis/KVwiIDogXCIvKFteL10rPylcIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiL1wiICsgKDAsIF9lc2NhcGVyZWdleHAuZXNjYXBlU3RyaW5nUmVnZXhwKShzZWdtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkuam9pbihcIlwiKSxcbiAgICAgICAgZ3JvdXBzXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGdldFJvdXRlUmVnZXgobm9ybWFsaXplZFJvdXRlKSB7XG4gICAgY29uc3QgeyBwYXJhbWV0ZXJpemVkUm91dGUsIGdyb3VwcyB9ID0gZ2V0UGFyYW1ldHJpemVkUm91dGUobm9ybWFsaXplZFJvdXRlKTtcbiAgICByZXR1cm4ge1xuICAgICAgICByZTogbmV3IFJlZ0V4cChcIl5cIiArIHBhcmFtZXRlcml6ZWRSb3V0ZSArIFwiKD86Lyk/JFwiKSxcbiAgICAgICAgZ3JvdXBzOiBncm91cHNcbiAgICB9O1xufVxuLyoqXG4gKiBCdWlsZHMgYSBmdW5jdGlvbiB0byBnZW5lcmF0ZSBhIG1pbmltYWwgcm91dGVLZXkgdXNpbmcgb25seSBhLXogYW5kIG1pbmltYWxcbiAqIG51bWJlciBvZiBjaGFyYWN0ZXJzLlxuICovIGZ1bmN0aW9uIGJ1aWxkR2V0U2FmZVJvdXRlS2V5KCkge1xuICAgIGxldCBpID0gMDtcbiAgICByZXR1cm4gKCk9PntcbiAgICAgICAgbGV0IHJvdXRlS2V5ID0gXCJcIjtcbiAgICAgICAgbGV0IGogPSArK2k7XG4gICAgICAgIHdoaWxlKGogPiAwKXtcbiAgICAgICAgICAgIHJvdXRlS2V5ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoOTcgKyAoaiAtIDEpICUgMjYpO1xuICAgICAgICAgICAgaiA9IE1hdGguZmxvb3IoKGogLSAxKSAvIDI2KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcm91dGVLZXk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGdldFNhZmVLZXlGcm9tU2VnbWVudChwYXJhbSkge1xuICAgIGxldCB7IGdldFNhZmVSb3V0ZUtleSwgc2VnbWVudCwgcm91dGVLZXlzLCBrZXlQcmVmaXggfSA9IHBhcmFtO1xuICAgIGNvbnN0IHsga2V5LCBvcHRpb25hbCwgcmVwZWF0IH0gPSBwYXJzZVBhcmFtZXRlcihzZWdtZW50KTtcbiAgICAvLyByZXBsYWNlIGFueSBub24td29yZCBjaGFyYWN0ZXJzIHNpbmNlIHRoZXkgY2FuIGJyZWFrXG4gICAgLy8gdGhlIG5hbWVkIHJlZ2V4XG4gICAgbGV0IGNsZWFuZWRLZXkgPSBrZXkucmVwbGFjZSgvXFxXL2csIFwiXCIpO1xuICAgIGlmIChrZXlQcmVmaXgpIHtcbiAgICAgICAgY2xlYW5lZEtleSA9IFwiXCIgKyBrZXlQcmVmaXggKyBjbGVhbmVkS2V5O1xuICAgIH1cbiAgICBsZXQgaW52YWxpZEtleSA9IGZhbHNlO1xuICAgIC8vIGNoZWNrIGlmIHRoZSBrZXkgaXMgc3RpbGwgaW52YWxpZCBhbmQgZmFsbGJhY2sgdG8gdXNpbmcgYSBrbm93blxuICAgIC8vIHNhZmUga2V5XG4gICAgaWYgKGNsZWFuZWRLZXkubGVuZ3RoID09PSAwIHx8IGNsZWFuZWRLZXkubGVuZ3RoID4gMzApIHtcbiAgICAgICAgaW52YWxpZEtleSA9IHRydWU7XG4gICAgfVxuICAgIGlmICghaXNOYU4ocGFyc2VJbnQoY2xlYW5lZEtleS5zbGljZSgwLCAxKSkpKSB7XG4gICAgICAgIGludmFsaWRLZXkgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoaW52YWxpZEtleSkge1xuICAgICAgICBjbGVhbmVkS2V5ID0gZ2V0U2FmZVJvdXRlS2V5KCk7XG4gICAgfVxuICAgIGlmIChrZXlQcmVmaXgpIHtcbiAgICAgICAgcm91dGVLZXlzW2NsZWFuZWRLZXldID0gXCJcIiArIGtleVByZWZpeCArIGtleTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByb3V0ZUtleXNbY2xlYW5lZEtleV0gPSBcIlwiICsga2V5O1xuICAgIH1cbiAgICByZXR1cm4gcmVwZWF0ID8gb3B0aW9uYWwgPyBcIig/Oi8oPzxcIiArIGNsZWFuZWRLZXkgKyBcIj4uKz8pKT9cIiA6IFwiLyg/PFwiICsgY2xlYW5lZEtleSArIFwiPi4rPylcIiA6IFwiLyg/PFwiICsgY2xlYW5lZEtleSArIFwiPlteL10rPylcIjtcbn1cbmZ1bmN0aW9uIGdldE5hbWVkUGFyYW1ldHJpemVkUm91dGUocm91dGUsIHByZWZpeFJvdXRlS2V5cykge1xuICAgIGNvbnN0IHNlZ21lbnRzID0gKDAsIF9yZW1vdmV0cmFpbGluZ3NsYXNoLnJlbW92ZVRyYWlsaW5nU2xhc2gpKHJvdXRlKS5zbGljZSgxKS5zcGxpdChcIi9cIik7XG4gICAgY29uc3QgZ2V0U2FmZVJvdXRlS2V5ID0gYnVpbGRHZXRTYWZlUm91dGVLZXkoKTtcbiAgICBjb25zdCByb3V0ZUtleXMgPSB7fTtcbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lZFBhcmFtZXRlcml6ZWRSb3V0ZTogc2VnbWVudHMubWFwKChzZWdtZW50KT0+e1xuICAgICAgICAgICAgY29uc3QgaGFzSW50ZXJjZXB0aW9uTWFya2VyID0gX2ludGVyY2VwdGlvbnJvdXRlcy5JTlRFUkNFUFRJT05fUk9VVEVfTUFSS0VSUy5zb21lKChtKT0+c2VnbWVudC5zdGFydHNXaXRoKG0pKTtcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtTWF0Y2hlcyA9IHNlZ21lbnQubWF0Y2goL1xcWygoPzpcXFsuKlxcXSl8LispXFxdLykgLy8gQ2hlY2sgZm9yIHBhcmFtZXRlcnNcbiAgICAgICAgICAgIDtcbiAgICAgICAgICAgIGlmIChoYXNJbnRlcmNlcHRpb25NYXJrZXIgJiYgcGFyYW1NYXRjaGVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldFNhZmVLZXlGcm9tU2VnbWVudCh7XG4gICAgICAgICAgICAgICAgICAgIGdldFNhZmVSb3V0ZUtleSxcbiAgICAgICAgICAgICAgICAgICAgc2VnbWVudDogcGFyYW1NYXRjaGVzWzFdLFxuICAgICAgICAgICAgICAgICAgICByb3V0ZUtleXMsXG4gICAgICAgICAgICAgICAgICAgIGtleVByZWZpeDogcHJlZml4Um91dGVLZXlzID8gTkVYVF9JTlRFUkNFUFRJT05fTUFSS0VSX1BSRUZJWCA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJhbU1hdGNoZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0U2FmZUtleUZyb21TZWdtZW50KHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0U2FmZVJvdXRlS2V5LFxuICAgICAgICAgICAgICAgICAgICBzZWdtZW50OiBwYXJhbU1hdGNoZXNbMV0sXG4gICAgICAgICAgICAgICAgICAgIHJvdXRlS2V5cyxcbiAgICAgICAgICAgICAgICAgICAga2V5UHJlZml4OiBwcmVmaXhSb3V0ZUtleXMgPyBORVhUX1FVRVJZX1BBUkFNX1BSRUZJWCA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCIvXCIgKyAoMCwgX2VzY2FwZXJlZ2V4cC5lc2NhcGVTdHJpbmdSZWdleHApKHNlZ21lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KS5qb2luKFwiXCIpLFxuICAgICAgICByb3V0ZUtleXNcbiAgICB9O1xufVxuZnVuY3Rpb24gZ2V0TmFtZWRSb3V0ZVJlZ2V4KG5vcm1hbGl6ZWRSb3V0ZSwgcHJlZml4Um91dGVLZXkpIHtcbiAgICBjb25zdCByZXN1bHQgPSBnZXROYW1lZFBhcmFtZXRyaXplZFJvdXRlKG5vcm1hbGl6ZWRSb3V0ZSwgcHJlZml4Um91dGVLZXkpO1xuICAgIHJldHVybiB7XG4gICAgICAgIC4uLmdldFJvdXRlUmVnZXgobm9ybWFsaXplZFJvdXRlKSxcbiAgICAgICAgbmFtZWRSZWdleDogXCJeXCIgKyByZXN1bHQubmFtZWRQYXJhbWV0ZXJpemVkUm91dGUgKyBcIig/Oi8pPyRcIixcbiAgICAgICAgcm91dGVLZXlzOiByZXN1bHQucm91dGVLZXlzXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGdldE5hbWVkTWlkZGxld2FyZVJlZ2V4KG5vcm1hbGl6ZWRSb3V0ZSwgb3B0aW9ucykge1xuICAgIGNvbnN0IHsgcGFyYW1ldGVyaXplZFJvdXRlIH0gPSBnZXRQYXJhbWV0cml6ZWRSb3V0ZShub3JtYWxpemVkUm91dGUpO1xuICAgIGNvbnN0IHsgY2F0Y2hBbGwgPSB0cnVlIH0gPSBvcHRpb25zO1xuICAgIGlmIChwYXJhbWV0ZXJpemVkUm91dGUgPT09IFwiL1wiKSB7XG4gICAgICAgIGxldCBjYXRjaEFsbFJlZ2V4ID0gY2F0Y2hBbGwgPyBcIi4qXCIgOiBcIlwiO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZWRSZWdleDogXCJeL1wiICsgY2F0Y2hBbGxSZWdleCArIFwiJFwiXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHsgbmFtZWRQYXJhbWV0ZXJpemVkUm91dGUgfSA9IGdldE5hbWVkUGFyYW1ldHJpemVkUm91dGUobm9ybWFsaXplZFJvdXRlLCBmYWxzZSk7XG4gICAgbGV0IGNhdGNoQWxsR3JvdXBlZFJlZ2V4ID0gY2F0Y2hBbGwgPyBcIig/OigvLiopPylcIiA6IFwiXCI7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZWRSZWdleDogXCJeXCIgKyBuYW1lZFBhcmFtZXRlcml6ZWRSb3V0ZSArIGNhdGNoQWxsR3JvdXBlZFJlZ2V4ICsgXCIkXCJcbiAgICB9O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yb3V0ZS1yZWdleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImludGVycG9sYXRlQXNcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGludGVycG9sYXRlQXM7XG4gICAgfVxufSk7XG5jb25zdCBfcm91dGVtYXRjaGVyID0gcmVxdWlyZShcIi4vcm91dGUtbWF0Y2hlclwiKTtcbmNvbnN0IF9yb3V0ZXJlZ2V4ID0gcmVxdWlyZShcIi4vcm91dGUtcmVnZXhcIik7XG5mdW5jdGlvbiBpbnRlcnBvbGF0ZUFzKHJvdXRlLCBhc1BhdGhuYW1lLCBxdWVyeSkge1xuICAgIGxldCBpbnRlcnBvbGF0ZWRSb3V0ZSA9IFwiXCI7XG4gICAgY29uc3QgZHluYW1pY1JlZ2V4ID0gKDAsIF9yb3V0ZXJlZ2V4LmdldFJvdXRlUmVnZXgpKHJvdXRlKTtcbiAgICBjb25zdCBkeW5hbWljR3JvdXBzID0gZHluYW1pY1JlZ2V4Lmdyb3VwcztcbiAgICBjb25zdCBkeW5hbWljTWF0Y2hlcyA9IC8vIFRyeSB0byBtYXRjaCB0aGUgZHluYW1pYyByb3V0ZSBhZ2FpbnN0IHRoZSBhc1BhdGhcbiAgICAoYXNQYXRobmFtZSAhPT0gcm91dGUgPyAoMCwgX3JvdXRlbWF0Y2hlci5nZXRSb3V0ZU1hdGNoZXIpKGR5bmFtaWNSZWdleCkoYXNQYXRobmFtZSkgOiBcIlwiKSB8fCAvLyBGYWxsIGJhY2sgdG8gcmVhZGluZyB0aGUgdmFsdWVzIGZyb20gdGhlIGhyZWZcbiAgICAvLyBUT0RPOiBzaG91bGQgdGhpcyB0YWtlIHByaW9yaXR5OyBhbHNvIG5lZWQgdG8gY2hhbmdlIGluIHRoZSByb3V0ZXIuXG4gICAgcXVlcnk7XG4gICAgaW50ZXJwb2xhdGVkUm91dGUgPSByb3V0ZTtcbiAgICBjb25zdCBwYXJhbXMgPSBPYmplY3Qua2V5cyhkeW5hbWljR3JvdXBzKTtcbiAgICBpZiAoIXBhcmFtcy5ldmVyeSgocGFyYW0pPT57XG4gICAgICAgIGxldCB2YWx1ZSA9IGR5bmFtaWNNYXRjaGVzW3BhcmFtXSB8fCBcIlwiO1xuICAgICAgICBjb25zdCB7IHJlcGVhdCwgb3B0aW9uYWwgfSA9IGR5bmFtaWNHcm91cHNbcGFyYW1dO1xuICAgICAgICAvLyBzdXBwb3J0IHNpbmdsZS1sZXZlbCBjYXRjaC1hbGxcbiAgICAgICAgLy8gVE9ETzogbW9yZSByb2J1c3QgaGFuZGxpbmcgZm9yIHVzZXItZXJyb3IgKHBhc3NpbmcgYC9gKVxuICAgICAgICBsZXQgcmVwbGFjZWQgPSBcIltcIiArIChyZXBlYXQgPyBcIi4uLlwiIDogXCJcIikgKyBwYXJhbSArIFwiXVwiO1xuICAgICAgICBpZiAob3B0aW9uYWwpIHtcbiAgICAgICAgICAgIHJlcGxhY2VkID0gKCF2YWx1ZSA/IFwiL1wiIDogXCJcIikgKyBcIltcIiArIHJlcGxhY2VkICsgXCJdXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcGVhdCAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHZhbHVlID0gW1xuICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgXTtcbiAgICAgICAgcmV0dXJuIChvcHRpb25hbCB8fCBwYXJhbSBpbiBkeW5hbWljTWF0Y2hlcykgJiYgLy8gSW50ZXJwb2xhdGUgZ3JvdXAgaW50byBkYXRhIFVSTCBpZiBwcmVzZW50XG4gICAgICAgIChpbnRlcnBvbGF0ZWRSb3V0ZSA9IGludGVycG9sYXRlZFJvdXRlLnJlcGxhY2UocmVwbGFjZWQsIHJlcGVhdCA/IHZhbHVlLm1hcCgvLyB0aGVzZSB2YWx1ZXMgc2hvdWxkIGJlIGZ1bGx5IGVuY29kZWQgaW5zdGVhZCBvZiBqdXN0XG4gICAgICAgIC8vIHBhdGggZGVsaW1pdGVyIGVzY2FwZWQgc2luY2UgdGhleSBhcmUgYmVpbmcgaW5zZXJ0ZWRcbiAgICAgICAgLy8gaW50byB0aGUgVVJMIGFuZCB3ZSBleHBlY3QgVVJMIGVuY29kZWQgc2VnbWVudHNcbiAgICAgICAgLy8gd2hlbiBwYXJzaW5nIGR5bmFtaWMgcm91dGUgcGFyYW1zXG4gICAgICAgIChzZWdtZW50KT0+ZW5jb2RlVVJJQ29tcG9uZW50KHNlZ21lbnQpKS5qb2luKFwiL1wiKSA6IGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpIHx8IFwiL1wiKTtcbiAgICB9KSkge1xuICAgICAgICBpbnRlcnBvbGF0ZWRSb3V0ZSA9IFwiXCIgLy8gZGlkIG5vdCBzYXRpc2Z5IGFsbCByZXF1aXJlbWVudHNcbiAgICAgICAgO1xuICAgIC8vIG4uYi4gV2UgaWdub3JlIHRoaXMgZXJyb3IgYmVjYXVzZSB3ZSBoYW5kbGUgd2FybmluZyBmb3IgdGhpcyBjYXNlIGluXG4gICAgLy8gZGV2ZWxvcG1lbnQgaW4gdGhlIGA8TGluaz5gIGNvbXBvbmVudCBkaXJlY3RseS5cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcGFyYW1zLFxuICAgICAgICByZXN1bHQ6IGludGVycG9sYXRlZFJvdXRlXG4gICAgfTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJwb2xhdGUtYXMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyZXNvbHZlSHJlZlwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZUhyZWY7XG4gICAgfVxufSk7XG5jb25zdCBfcXVlcnlzdHJpbmcgPSByZXF1aXJlKFwiLi4vc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvcXVlcnlzdHJpbmdcIik7XG5jb25zdCBfZm9ybWF0dXJsID0gcmVxdWlyZShcIi4uL3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2Zvcm1hdC11cmxcIik7XG5jb25zdCBfb21pdCA9IHJlcXVpcmUoXCIuLi9zaGFyZWQvbGliL3JvdXRlci91dGlscy9vbWl0XCIpO1xuY29uc3QgX3V0aWxzID0gcmVxdWlyZShcIi4uL3NoYXJlZC9saWIvdXRpbHNcIik7XG5jb25zdCBfbm9ybWFsaXpldHJhaWxpbmdzbGFzaCA9IHJlcXVpcmUoXCIuL25vcm1hbGl6ZS10cmFpbGluZy1zbGFzaFwiKTtcbmNvbnN0IF9pc2xvY2FsdXJsID0gcmVxdWlyZShcIi4uL3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2lzLWxvY2FsLXVybFwiKTtcbmNvbnN0IF91dGlsczEgPSByZXF1aXJlKFwiLi4vc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHNcIik7XG5jb25zdCBfaW50ZXJwb2xhdGVhcyA9IHJlcXVpcmUoXCIuLi9zaGFyZWQvbGliL3JvdXRlci91dGlscy9pbnRlcnBvbGF0ZS1hc1wiKTtcbmZ1bmN0aW9uIHJlc29sdmVIcmVmKHJvdXRlciwgaHJlZiwgcmVzb2x2ZUFzKSB7XG4gICAgLy8gd2UgdXNlIGEgZHVtbXkgYmFzZSB1cmwgZm9yIHJlbGF0aXZlIHVybHNcbiAgICBsZXQgYmFzZTtcbiAgICBsZXQgdXJsQXNTdHJpbmcgPSB0eXBlb2YgaHJlZiA9PT0gXCJzdHJpbmdcIiA/IGhyZWYgOiAoMCwgX2Zvcm1hdHVybC5mb3JtYXRXaXRoVmFsaWRhdGlvbikoaHJlZik7XG4gICAgLy8gcmVwZWF0ZWQgc2xhc2hlcyBhbmQgYmFja3NsYXNoZXMgaW4gdGhlIFVSTCBhcmUgY29uc2lkZXJlZFxuICAgIC8vIGludmFsaWQgYW5kIHdpbGwgbmV2ZXIgbWF0Y2ggYSBOZXh0LmpzIHBhZ2UvZmlsZVxuICAgIGNvbnN0IHVybFByb3RvTWF0Y2ggPSB1cmxBc1N0cmluZy5tYXRjaCgvXlthLXpBLVpdezEsfTpcXC9cXC8vKTtcbiAgICBjb25zdCB1cmxBc1N0cmluZ05vUHJvdG8gPSB1cmxQcm90b01hdGNoID8gdXJsQXNTdHJpbmcuc2xpY2UodXJsUHJvdG9NYXRjaFswXS5sZW5ndGgpIDogdXJsQXNTdHJpbmc7XG4gICAgY29uc3QgdXJsUGFydHMgPSB1cmxBc1N0cmluZ05vUHJvdG8uc3BsaXQoXCI/XCIpO1xuICAgIGlmICgodXJsUGFydHNbMF0gfHwgXCJcIikubWF0Y2goLyhcXC9cXC98XFxcXCkvKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiSW52YWxpZCBocmVmICdcIiArIHVybEFzU3RyaW5nICsgXCInIHBhc3NlZCB0byBuZXh0L3JvdXRlciBpbiBwYWdlOiAnXCIgKyByb3V0ZXIucGF0aG5hbWUgKyBcIicuIFJlcGVhdGVkIGZvcndhcmQtc2xhc2hlcyAoLy8pIG9yIGJhY2tzbGFzaGVzIFxcXFwgYXJlIG5vdCB2YWxpZCBpbiB0aGUgaHJlZi5cIik7XG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRVcmwgPSAoMCwgX3V0aWxzLm5vcm1hbGl6ZVJlcGVhdGVkU2xhc2hlcykodXJsQXNTdHJpbmdOb1Byb3RvKTtcbiAgICAgICAgdXJsQXNTdHJpbmcgPSAodXJsUHJvdG9NYXRjaCA/IHVybFByb3RvTWF0Y2hbMF0gOiBcIlwiKSArIG5vcm1hbGl6ZWRVcmw7XG4gICAgfVxuICAgIC8vIFJldHVybiBiZWNhdXNlIGl0IGNhbm5vdCBiZSByb3V0ZWQgYnkgdGhlIE5leHQuanMgcm91dGVyXG4gICAgaWYgKCEoMCwgX2lzbG9jYWx1cmwuaXNMb2NhbFVSTCkodXJsQXNTdHJpbmcpKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlQXMgPyBbXG4gICAgICAgICAgICB1cmxBc1N0cmluZ1xuICAgICAgICBdIDogdXJsQXNTdHJpbmc7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGJhc2UgPSBuZXcgVVJMKHVybEFzU3RyaW5nLnN0YXJ0c1dpdGgoXCIjXCIpID8gcm91dGVyLmFzUGF0aCA6IHJvdXRlci5wYXRobmFtZSwgXCJodHRwOi8vblwiKTtcbiAgICB9IGNhdGNoIChfKSB7XG4gICAgICAgIC8vIGZhbGxiYWNrIHRvIC8gZm9yIGludmFsaWQgYXNQYXRoIHZhbHVlcyBlLmcuIC8vXG4gICAgICAgIGJhc2UgPSBuZXcgVVJMKFwiL1wiLCBcImh0dHA6Ly9uXCIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBjb25zdCBmaW5hbFVybCA9IG5ldyBVUkwodXJsQXNTdHJpbmcsIGJhc2UpO1xuICAgICAgICBmaW5hbFVybC5wYXRobmFtZSA9ICgwLCBfbm9ybWFsaXpldHJhaWxpbmdzbGFzaC5ub3JtYWxpemVQYXRoVHJhaWxpbmdTbGFzaCkoZmluYWxVcmwucGF0aG5hbWUpO1xuICAgICAgICBsZXQgaW50ZXJwb2xhdGVkQXMgPSBcIlwiO1xuICAgICAgICBpZiAoKDAsIF91dGlsczEuaXNEeW5hbWljUm91dGUpKGZpbmFsVXJsLnBhdGhuYW1lKSAmJiBmaW5hbFVybC5zZWFyY2hQYXJhbXMgJiYgcmVzb2x2ZUFzKSB7XG4gICAgICAgICAgICBjb25zdCBxdWVyeSA9ICgwLCBfcXVlcnlzdHJpbmcuc2VhcmNoUGFyYW1zVG9VcmxRdWVyeSkoZmluYWxVcmwuc2VhcmNoUGFyYW1zKTtcbiAgICAgICAgICAgIGNvbnN0IHsgcmVzdWx0LCBwYXJhbXMgfSA9ICgwLCBfaW50ZXJwb2xhdGVhcy5pbnRlcnBvbGF0ZUFzKShmaW5hbFVybC5wYXRobmFtZSwgZmluYWxVcmwucGF0aG5hbWUsIHF1ZXJ5KTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBpbnRlcnBvbGF0ZWRBcyA9ICgwLCBfZm9ybWF0dXJsLmZvcm1hdFdpdGhWYWxpZGF0aW9uKSh7XG4gICAgICAgICAgICAgICAgICAgIHBhdGhuYW1lOiByZXN1bHQsXG4gICAgICAgICAgICAgICAgICAgIGhhc2g6IGZpbmFsVXJsLmhhc2gsXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5OiAoMCwgX29taXQub21pdCkocXVlcnksIHBhcmFtcylcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBpZiB0aGUgb3JpZ2luIGRpZG4ndCBjaGFuZ2UsIGl0IG1lYW5zIHdlIHJlY2VpdmVkIGEgcmVsYXRpdmUgaHJlZlxuICAgICAgICBjb25zdCByZXNvbHZlZEhyZWYgPSBmaW5hbFVybC5vcmlnaW4gPT09IGJhc2Uub3JpZ2luID8gZmluYWxVcmwuaHJlZi5zbGljZShmaW5hbFVybC5vcmlnaW4ubGVuZ3RoKSA6IGZpbmFsVXJsLmhyZWY7XG4gICAgICAgIHJldHVybiByZXNvbHZlQXMgPyBbXG4gICAgICAgICAgICByZXNvbHZlZEhyZWYsXG4gICAgICAgICAgICBpbnRlcnBvbGF0ZWRBcyB8fCByZXNvbHZlZEhyZWZcbiAgICAgICAgXSA6IHJlc29sdmVkSHJlZjtcbiAgICB9IGNhdGNoIChfKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlQXMgPyBbXG4gICAgICAgICAgICB1cmxBc1N0cmluZ1xuICAgICAgICBdIDogdXJsQXNTdHJpbmc7XG4gICAgfVxufVxuXG5pZiAoKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdvYmplY3QnICYmIGV4cG9ydHMuZGVmYXVsdCAhPT0gbnVsbCkpICYmIHR5cGVvZiBleHBvcnRzLmRlZmF1bHQuX19lc01vZHVsZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMuZGVmYXVsdCwgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuICBPYmplY3QuYXNzaWduKGV4cG9ydHMuZGVmYXVsdCwgZXhwb3J0cyk7XG4gIG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNvbHZlLWhyZWYuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhZGRQYXRoUHJlZml4XCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBhZGRQYXRoUHJlZml4O1xuICAgIH1cbn0pO1xuY29uc3QgX3BhcnNlcGF0aCA9IHJlcXVpcmUoXCIuL3BhcnNlLXBhdGhcIik7XG5mdW5jdGlvbiBhZGRQYXRoUHJlZml4KHBhdGgsIHByZWZpeCkge1xuICAgIGlmICghcGF0aC5zdGFydHNXaXRoKFwiL1wiKSB8fCAhcHJlZml4KSB7XG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgIH1cbiAgICBjb25zdCB7IHBhdGhuYW1lLCBxdWVyeSwgaGFzaCB9ID0gKDAsIF9wYXJzZXBhdGgucGFyc2VQYXRoKShwYXRoKTtcbiAgICByZXR1cm4gXCJcIiArIHByZWZpeCArIHBhdGhuYW1lICsgcXVlcnkgKyBoYXNoO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hZGQtcGF0aC1wcmVmaXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhZGRMb2NhbGVcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGFkZExvY2FsZTtcbiAgICB9XG59KTtcbmNvbnN0IF9hZGRwYXRocHJlZml4ID0gcmVxdWlyZShcIi4vYWRkLXBhdGgtcHJlZml4XCIpO1xuY29uc3QgX3BhdGhoYXNwcmVmaXggPSByZXF1aXJlKFwiLi9wYXRoLWhhcy1wcmVmaXhcIik7XG5mdW5jdGlvbiBhZGRMb2NhbGUocGF0aCwgbG9jYWxlLCBkZWZhdWx0TG9jYWxlLCBpZ25vcmVQcmVmaXgpIHtcbiAgICAvLyBJZiBubyBsb2NhbGUgd2FzIGdpdmVuIG9yIHRoZSBsb2NhbGUgaXMgdGhlIGRlZmF1bHQgbG9jYWxlLCB3ZSBkb24ndCBuZWVkXG4gICAgLy8gdG8gcHJlZml4IHRoZSBwYXRoLlxuICAgIGlmICghbG9jYWxlIHx8IGxvY2FsZSA9PT0gZGVmYXVsdExvY2FsZSkgcmV0dXJuIHBhdGg7XG4gICAgY29uc3QgbG93ZXIgPSBwYXRoLnRvTG93ZXJDYXNlKCk7XG4gICAgLy8gSWYgdGhlIHBhdGggaXMgYW4gQVBJIHBhdGggb3IgdGhlIHBhdGggYWxyZWFkeSBoYXMgdGhlIGxvY2FsZSBwcmVmaXgsIHdlXG4gICAgLy8gZG9uJ3QgbmVlZCB0byBwcmVmaXggdGhlIHBhdGguXG4gICAgaWYgKCFpZ25vcmVQcmVmaXgpIHtcbiAgICAgICAgaWYgKCgwLCBfcGF0aGhhc3ByZWZpeC5wYXRoSGFzUHJlZml4KShsb3dlciwgXCIvYXBpXCIpKSByZXR1cm4gcGF0aDtcbiAgICAgICAgaWYgKCgwLCBfcGF0aGhhc3ByZWZpeC5wYXRoSGFzUHJlZml4KShsb3dlciwgXCIvXCIgKyBsb2NhbGUudG9Mb3dlckNhc2UoKSkpIHJldHVybiBwYXRoO1xuICAgIH1cbiAgICAvLyBBZGQgdGhlIGxvY2FsZSBwcmVmaXggdG8gdGhlIHBhdGguXG4gICAgcmV0dXJuICgwLCBfYWRkcGF0aHByZWZpeC5hZGRQYXRoUHJlZml4KShwYXRoLCBcIi9cIiArIGxvY2FsZSk7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFkZC1sb2NhbGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhZGRMb2NhbGVcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGFkZExvY2FsZTtcbiAgICB9XG59KTtcbmNvbnN0IF9ub3JtYWxpemV0cmFpbGluZ3NsYXNoID0gcmVxdWlyZShcIi4vbm9ybWFsaXplLXRyYWlsaW5nLXNsYXNoXCIpO1xuY29uc3QgYWRkTG9jYWxlID0gZnVuY3Rpb24ocGF0aCkge1xuICAgIGZvcih2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKyl7XG4gICAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cbiAgICBpZiAocHJvY2Vzcy5lbnYuX19ORVhUX0kxOE5fU1VQUE9SVCkge1xuICAgICAgICByZXR1cm4gKDAsIF9ub3JtYWxpemV0cmFpbGluZ3NsYXNoLm5vcm1hbGl6ZVBhdGhUcmFpbGluZ1NsYXNoKShyZXF1aXJlKFwiLi4vc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvYWRkLWxvY2FsZVwiKS5hZGRMb2NhbGUocGF0aCwgLi4uYXJncykpO1xuICAgIH1cbiAgICByZXR1cm4gcGF0aDtcbn07XG5cbmlmICgodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ29iamVjdCcgJiYgZXhwb3J0cy5kZWZhdWx0ICE9PSBudWxsKSkgJiYgdHlwZW9mIGV4cG9ydHMuZGVmYXVsdC5fX2VzTW9kdWxlID09PSAndW5kZWZpbmVkJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cy5kZWZhdWx0LCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gIE9iamVjdC5hc3NpZ24oZXhwb3J0cy5kZWZhdWx0LCBleHBvcnRzKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFkZC1sb2NhbGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSb3V0ZXJDb250ZXh0XCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBSb3V0ZXJDb250ZXh0O1xuICAgIH1cbn0pO1xuY29uc3QgX2ludGVyb3BfcmVxdWlyZV9kZWZhdWx0ID0gcmVxdWlyZShcIkBzd2MvaGVscGVycy9fL19pbnRlcm9wX3JlcXVpcmVfZGVmYXVsdFwiKTtcbmNvbnN0IF9yZWFjdCA9IC8qI19fUFVSRV9fKi8gX2ludGVyb3BfcmVxdWlyZV9kZWZhdWx0Ll8ocmVxdWlyZShcInJlYWN0XCIpKTtcbmNvbnN0IFJvdXRlckNvbnRleHQgPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIFJvdXRlckNvbnRleHQuZGlzcGxheU5hbWUgPSBcIlJvdXRlckNvbnRleHRcIjtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cm91dGVyLWNvbnRleHQuc2hhcmVkLXJ1bnRpbWUuanMubWFwIiwiXCJ1c2UgY2xpZW50XCI7XG5cblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgQ2FjaGVTdGF0ZXM6IG51bGwsXG4gICAgQXBwUm91dGVyQ29udGV4dDogbnVsbCxcbiAgICBMYXlvdXRSb3V0ZXJDb250ZXh0OiBudWxsLFxuICAgIEdsb2JhbExheW91dFJvdXRlckNvbnRleHQ6IG51bGwsXG4gICAgVGVtcGxhdGVDb250ZXh0OiBudWxsXG59KTtcbmZ1bmN0aW9uIF9leHBvcnQodGFyZ2V0LCBhbGwpIHtcbiAgICBmb3IodmFyIG5hbWUgaW4gYWxsKU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIG5hbWUsIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiBhbGxbbmFtZV1cbiAgICB9KTtcbn1cbl9leHBvcnQoZXhwb3J0cywge1xuICAgIENhY2hlU3RhdGVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIENhY2hlU3RhdGVzO1xuICAgIH0sXG4gICAgQXBwUm91dGVyQ29udGV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBBcHBSb3V0ZXJDb250ZXh0O1xuICAgIH0sXG4gICAgTGF5b3V0Um91dGVyQ29udGV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBMYXlvdXRSb3V0ZXJDb250ZXh0O1xuICAgIH0sXG4gICAgR2xvYmFsTGF5b3V0Um91dGVyQ29udGV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBHbG9iYWxMYXlvdXRSb3V0ZXJDb250ZXh0O1xuICAgIH0sXG4gICAgVGVtcGxhdGVDb250ZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFRlbXBsYXRlQ29udGV4dDtcbiAgICB9XG59KTtcbmNvbnN0IF9pbnRlcm9wX3JlcXVpcmVfZGVmYXVsdCA9IHJlcXVpcmUoXCJAc3djL2hlbHBlcnMvXy9faW50ZXJvcF9yZXF1aXJlX2RlZmF1bHRcIik7XG5jb25zdCBfcmVhY3QgPSAvKiNfX1BVUkVfXyovIF9pbnRlcm9wX3JlcXVpcmVfZGVmYXVsdC5fKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgQ2FjaGVTdGF0ZXM7XG4oZnVuY3Rpb24oQ2FjaGVTdGF0ZXMpIHtcbiAgICBDYWNoZVN0YXRlc1tcIkxBWllfSU5JVElBTElaRURcIl0gPSBcIkxBWllJTklUSUFMSVpFRFwiO1xuICAgIENhY2hlU3RhdGVzW1wiREFUQV9GRVRDSFwiXSA9IFwiREFUQUZFVENIXCI7XG4gICAgQ2FjaGVTdGF0ZXNbXCJSRUFEWVwiXSA9IFwiUkVBRFlcIjtcbn0pKENhY2hlU3RhdGVzIHx8IChDYWNoZVN0YXRlcyA9IHt9KSk7XG5jb25zdCBBcHBSb3V0ZXJDb250ZXh0ID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlQ29udGV4dChudWxsKTtcbmNvbnN0IExheW91dFJvdXRlckNvbnRleHQgPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuY29uc3QgR2xvYmFsTGF5b3V0Um91dGVyQ29udGV4dCA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5jb25zdCBUZW1wbGF0ZUNvbnRleHQgPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIEFwcFJvdXRlckNvbnRleHQuZGlzcGxheU5hbWUgPSBcIkFwcFJvdXRlckNvbnRleHRcIjtcbiAgICBMYXlvdXRSb3V0ZXJDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJMYXlvdXRSb3V0ZXJDb250ZXh0XCI7XG4gICAgR2xvYmFsTGF5b3V0Um91dGVyQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiR2xvYmFsTGF5b3V0Um91dGVyQ29udGV4dFwiO1xuICAgIFRlbXBsYXRlQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiVGVtcGxhdGVDb250ZXh0XCI7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZXItY29udGV4dC5zaGFyZWQtcnVudGltZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICAgIHJlcXVlc3RJZGxlQ2FsbGJhY2s6IG51bGwsXG4gICAgY2FuY2VsSWRsZUNhbGxiYWNrOiBudWxsXG59KTtcbmZ1bmN0aW9uIF9leHBvcnQodGFyZ2V0LCBhbGwpIHtcbiAgICBmb3IodmFyIG5hbWUgaW4gYWxsKU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIG5hbWUsIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiBhbGxbbmFtZV1cbiAgICB9KTtcbn1cbl9leHBvcnQoZXhwb3J0cywge1xuICAgIHJlcXVlc3RJZGxlQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcmVxdWVzdElkbGVDYWxsYmFjaztcbiAgICB9LFxuICAgIGNhbmNlbElkbGVDYWxsYmFjazogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBjYW5jZWxJZGxlQ2FsbGJhY2s7XG4gICAgfVxufSk7XG5jb25zdCByZXF1ZXN0SWRsZUNhbGxiYWNrID0gdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5yZXF1ZXN0SWRsZUNhbGxiYWNrICYmIHNlbGYucmVxdWVzdElkbGVDYWxsYmFjay5iaW5kKHdpbmRvdykgfHwgZnVuY3Rpb24oY2IpIHtcbiAgICBsZXQgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIHJldHVybiBzZWxmLnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIGNiKHtcbiAgICAgICAgICAgIGRpZFRpbWVvdXQ6IGZhbHNlLFxuICAgICAgICAgICAgdGltZVJlbWFpbmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgubWF4KDAsIDUwIC0gKERhdGUubm93KCkgLSBzdGFydCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9LCAxKTtcbn07XG5jb25zdCBjYW5jZWxJZGxlQ2FsbGJhY2sgPSB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLmNhbmNlbElkbGVDYWxsYmFjayAmJiBzZWxmLmNhbmNlbElkbGVDYWxsYmFjay5iaW5kKHdpbmRvdykgfHwgZnVuY3Rpb24oaWQpIHtcbiAgICByZXR1cm4gY2xlYXJUaW1lb3V0KGlkKTtcbn07XG5cbmlmICgodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ29iamVjdCcgJiYgZXhwb3J0cy5kZWZhdWx0ICE9PSBudWxsKSkgJiYgdHlwZW9mIGV4cG9ydHMuZGVmYXVsdC5fX2VzTW9kdWxlID09PSAndW5kZWZpbmVkJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cy5kZWZhdWx0LCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gIE9iamVjdC5hc3NpZ24oZXhwb3J0cy5kZWZhdWx0LCBleHBvcnRzKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlcXVlc3QtaWRsZS1jYWxsYmFjay5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInVzZUludGVyc2VjdGlvblwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdXNlSW50ZXJzZWN0aW9uO1xuICAgIH1cbn0pO1xuY29uc3QgX3JlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuY29uc3QgX3JlcXVlc3RpZGxlY2FsbGJhY2sgPSByZXF1aXJlKFwiLi9yZXF1ZXN0LWlkbGUtY2FsbGJhY2tcIik7XG5jb25zdCBoYXNJbnRlcnNlY3Rpb25PYnNlcnZlciA9IHR5cGVvZiBJbnRlcnNlY3Rpb25PYnNlcnZlciA9PT0gXCJmdW5jdGlvblwiO1xuY29uc3Qgb2JzZXJ2ZXJzID0gbmV3IE1hcCgpO1xuY29uc3QgaWRMaXN0ID0gW107XG5mdW5jdGlvbiBjcmVhdGVPYnNlcnZlcihvcHRpb25zKSB7XG4gICAgY29uc3QgaWQgPSB7XG4gICAgICAgIHJvb3Q6IG9wdGlvbnMucm9vdCB8fCBudWxsLFxuICAgICAgICBtYXJnaW46IG9wdGlvbnMucm9vdE1hcmdpbiB8fCBcIlwiXG4gICAgfTtcbiAgICBjb25zdCBleGlzdGluZyA9IGlkTGlzdC5maW5kKChvYmopPT5vYmoucm9vdCA9PT0gaWQucm9vdCAmJiBvYmoubWFyZ2luID09PSBpZC5tYXJnaW4pO1xuICAgIGxldCBpbnN0YW5jZTtcbiAgICBpZiAoZXhpc3RpbmcpIHtcbiAgICAgICAgaW5zdGFuY2UgPSBvYnNlcnZlcnMuZ2V0KGV4aXN0aW5nKTtcbiAgICAgICAgaWYgKGluc3RhbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZWxlbWVudHMgPSBuZXcgTWFwKCk7XG4gICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoKGVudHJpZXMpPT57XG4gICAgICAgIGVudHJpZXMuZm9yRWFjaCgoZW50cnkpPT57XG4gICAgICAgICAgICBjb25zdCBjYWxsYmFjayA9IGVsZW1lbnRzLmdldChlbnRyeS50YXJnZXQpO1xuICAgICAgICAgICAgY29uc3QgaXNWaXNpYmxlID0gZW50cnkuaXNJbnRlcnNlY3RpbmcgfHwgZW50cnkuaW50ZXJzZWN0aW9uUmF0aW8gPiAwO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICYmIGlzVmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGlzVmlzaWJsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0sIG9wdGlvbnMpO1xuICAgIGluc3RhbmNlID0ge1xuICAgICAgICBpZCxcbiAgICAgICAgb2JzZXJ2ZXIsXG4gICAgICAgIGVsZW1lbnRzXG4gICAgfTtcbiAgICBpZExpc3QucHVzaChpZCk7XG4gICAgb2JzZXJ2ZXJzLnNldChpZCwgaW5zdGFuY2UpO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbn1cbmZ1bmN0aW9uIG9ic2VydmUoZWxlbWVudCwgY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgICBjb25zdCB7IGlkLCBvYnNlcnZlciwgZWxlbWVudHMgfSA9IGNyZWF0ZU9ic2VydmVyKG9wdGlvbnMpO1xuICAgIGVsZW1lbnRzLnNldChlbGVtZW50LCBjYWxsYmFjayk7XG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZShlbGVtZW50KTtcbiAgICByZXR1cm4gZnVuY3Rpb24gdW5vYnNlcnZlKCkge1xuICAgICAgICBlbGVtZW50cy5kZWxldGUoZWxlbWVudCk7XG4gICAgICAgIG9ic2VydmVyLnVub2JzZXJ2ZShlbGVtZW50KTtcbiAgICAgICAgLy8gRGVzdHJveSBvYnNlcnZlciB3aGVuIHRoZXJlJ3Mgbm90aGluZyBsZWZ0IHRvIHdhdGNoOlxuICAgICAgICBpZiAoZWxlbWVudHMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgb2JzZXJ2ZXJzLmRlbGV0ZShpZCk7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IGlkTGlzdC5maW5kSW5kZXgoKG9iaik9Pm9iai5yb290ID09PSBpZC5yb290ICYmIG9iai5tYXJnaW4gPT09IGlkLm1hcmdpbik7XG4gICAgICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgICAgICAgIGlkTGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHVzZUludGVyc2VjdGlvbihwYXJhbSkge1xuICAgIGxldCB7IHJvb3RSZWYsIHJvb3RNYXJnaW4sIGRpc2FibGVkIH0gPSBwYXJhbTtcbiAgICBjb25zdCBpc0Rpc2FibGVkID0gZGlzYWJsZWQgfHwgIWhhc0ludGVyc2VjdGlvbk9ic2VydmVyO1xuICAgIGNvbnN0IFt2aXNpYmxlLCBzZXRWaXNpYmxlXSA9ICgwLCBfcmVhY3QudXNlU3RhdGUpKGZhbHNlKTtcbiAgICBjb25zdCBlbGVtZW50UmVmID0gKDAsIF9yZWFjdC51c2VSZWYpKG51bGwpO1xuICAgIGNvbnN0IHNldEVsZW1lbnQgPSAoMCwgX3JlYWN0LnVzZUNhbGxiYWNrKSgoZWxlbWVudCk9PntcbiAgICAgICAgZWxlbWVudFJlZi5jdXJyZW50ID0gZWxlbWVudDtcbiAgICB9LCBbXSk7XG4gICAgKDAsIF9yZWFjdC51c2VFZmZlY3QpKCgpPT57XG4gICAgICAgIGlmIChoYXNJbnRlcnNlY3Rpb25PYnNlcnZlcikge1xuICAgICAgICAgICAgaWYgKGlzRGlzYWJsZWQgfHwgdmlzaWJsZSkgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGVsZW1lbnRSZWYuY3VycmVudDtcbiAgICAgICAgICAgIGlmIChlbGVtZW50ICYmIGVsZW1lbnQudGFnTmFtZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHVub2JzZXJ2ZSA9IG9ic2VydmUoZWxlbWVudCwgKGlzVmlzaWJsZSk9PmlzVmlzaWJsZSAmJiBzZXRWaXNpYmxlKGlzVmlzaWJsZSksIHtcbiAgICAgICAgICAgICAgICAgICAgcm9vdDogcm9vdFJlZiA9PSBudWxsID8gdm9pZCAwIDogcm9vdFJlZi5jdXJyZW50LFxuICAgICAgICAgICAgICAgICAgICByb290TWFyZ2luXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVub2JzZXJ2ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghdmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlkbGVDYWxsYmFjayA9ICgwLCBfcmVxdWVzdGlkbGVjYWxsYmFjay5yZXF1ZXN0SWRsZUNhbGxiYWNrKSgoKT0+c2V0VmlzaWJsZSh0cnVlKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgpPT4oMCwgX3JlcXVlc3RpZGxlY2FsbGJhY2suY2FuY2VsSWRsZUNhbGxiYWNrKShpZGxlQ2FsbGJhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICAgIH0sIFtcbiAgICAgICAgaXNEaXNhYmxlZCxcbiAgICAgICAgcm9vdE1hcmdpbixcbiAgICAgICAgcm9vdFJlZixcbiAgICAgICAgdmlzaWJsZSxcbiAgICAgICAgZWxlbWVudFJlZi5jdXJyZW50XG4gICAgXSk7XG4gICAgY29uc3QgcmVzZXRWaXNpYmxlID0gKDAsIF9yZWFjdC51c2VDYWxsYmFjaykoKCk9PntcbiAgICAgICAgc2V0VmlzaWJsZShmYWxzZSk7XG4gICAgfSwgW10pO1xuICAgIHJldHVybiBbXG4gICAgICAgIHNldEVsZW1lbnQsXG4gICAgICAgIHZpc2libGUsXG4gICAgICAgIHJlc2V0VmlzaWJsZVxuICAgIF07XG59XG5cbmlmICgodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ29iamVjdCcgJiYgZXhwb3J0cy5kZWZhdWx0ICE9PSBudWxsKSkgJiYgdHlwZW9mIGV4cG9ydHMuZGVmYXVsdC5fX2VzTW9kdWxlID09PSAndW5kZWZpbmVkJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cy5kZWZhdWx0LCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gIE9iamVjdC5hc3NpZ24oZXhwb3J0cy5kZWZhdWx0LCBleHBvcnRzKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZS1pbnRlcnNlY3Rpb24uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJub3JtYWxpemVMb2NhbGVQYXRoXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBub3JtYWxpemVMb2NhbGVQYXRoO1xuICAgIH1cbn0pO1xuZnVuY3Rpb24gbm9ybWFsaXplTG9jYWxlUGF0aChwYXRobmFtZSwgbG9jYWxlcykge1xuICAgIGxldCBkZXRlY3RlZExvY2FsZTtcbiAgICAvLyBmaXJzdCBpdGVtIHdpbGwgYmUgZW1wdHkgc3RyaW5nIGZyb20gc3BsaXR0aW5nIGF0IGZpcnN0IGNoYXJcbiAgICBjb25zdCBwYXRobmFtZVBhcnRzID0gcGF0aG5hbWUuc3BsaXQoXCIvXCIpO1xuICAgIChsb2NhbGVzIHx8IFtdKS5zb21lKChsb2NhbGUpPT57XG4gICAgICAgIGlmIChwYXRobmFtZVBhcnRzWzFdICYmIHBhdGhuYW1lUGFydHNbMV0udG9Mb3dlckNhc2UoKSA9PT0gbG9jYWxlLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgIGRldGVjdGVkTG9jYWxlID0gbG9jYWxlO1xuICAgICAgICAgICAgcGF0aG5hbWVQYXJ0cy5zcGxpY2UoMSwgMSk7XG4gICAgICAgICAgICBwYXRobmFtZSA9IHBhdGhuYW1lUGFydHMuam9pbihcIi9cIikgfHwgXCIvXCI7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcGF0aG5hbWUsXG4gICAgICAgIGRldGVjdGVkTG9jYWxlXG4gICAgfTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9ybWFsaXplLWxvY2FsZS1wYXRoLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibm9ybWFsaXplTG9jYWxlUGF0aFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbm9ybWFsaXplTG9jYWxlUGF0aDtcbiAgICB9XG59KTtcbmNvbnN0IG5vcm1hbGl6ZUxvY2FsZVBhdGggPSAocGF0aG5hbWUsIGxvY2FsZXMpPT57XG4gICAgaWYgKHByb2Nlc3MuZW52Ll9fTkVYVF9JMThOX1NVUFBPUlQpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVpcmUoXCIuLi9zaGFyZWQvbGliL2kxOG4vbm9ybWFsaXplLWxvY2FsZS1wYXRoXCIpLm5vcm1hbGl6ZUxvY2FsZVBhdGgocGF0aG5hbWUsIGxvY2FsZXMpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBwYXRobmFtZSxcbiAgICAgICAgZGV0ZWN0ZWRMb2NhbGU6IHVuZGVmaW5lZFxuICAgIH07XG59O1xuXG5pZiAoKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdvYmplY3QnICYmIGV4cG9ydHMuZGVmYXVsdCAhPT0gbnVsbCkpICYmIHR5cGVvZiBleHBvcnRzLmRlZmF1bHQuX19lc01vZHVsZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMuZGVmYXVsdCwgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuICBPYmplY3QuYXNzaWduKGV4cG9ydHMuZGVmYXVsdCwgZXhwb3J0cyk7XG4gIG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub3JtYWxpemUtbG9jYWxlLXBhdGguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZXRlY3REb21haW5Mb2NhbGVcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGRldGVjdERvbWFpbkxvY2FsZTtcbiAgICB9XG59KTtcbmZ1bmN0aW9uIGRldGVjdERvbWFpbkxvY2FsZShkb21haW5JdGVtcywgaG9zdG5hbWUsIGRldGVjdGVkTG9jYWxlKSB7XG4gICAgaWYgKCFkb21haW5JdGVtcykgcmV0dXJuO1xuICAgIGlmIChkZXRlY3RlZExvY2FsZSkge1xuICAgICAgICBkZXRlY3RlZExvY2FsZSA9IGRldGVjdGVkTG9jYWxlLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgaXRlbSBvZiBkb21haW5JdGVtcyl7XG4gICAgICAgIHZhciBfaXRlbV9kb21haW4sIF9pdGVtX2xvY2FsZXM7XG4gICAgICAgIC8vIHJlbW92ZSBwb3J0IGlmIHByZXNlbnRcbiAgICAgICAgY29uc3QgZG9tYWluSG9zdG5hbWUgPSAoX2l0ZW1fZG9tYWluID0gaXRlbS5kb21haW4pID09IG51bGwgPyB2b2lkIDAgOiBfaXRlbV9kb21haW4uc3BsaXQoXCI6XCIpWzBdLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmIChob3N0bmFtZSA9PT0gZG9tYWluSG9zdG5hbWUgfHwgZGV0ZWN0ZWRMb2NhbGUgPT09IGl0ZW0uZGVmYXVsdExvY2FsZS50b0xvd2VyQ2FzZSgpIHx8ICgoX2l0ZW1fbG9jYWxlcyA9IGl0ZW0ubG9jYWxlcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9pdGVtX2xvY2FsZXMuc29tZSgobG9jYWxlKT0+bG9jYWxlLnRvTG93ZXJDYXNlKCkgPT09IGRldGVjdGVkTG9jYWxlKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZXRlY3QtZG9tYWluLWxvY2FsZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRldGVjdERvbWFpbkxvY2FsZVwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZGV0ZWN0RG9tYWluTG9jYWxlO1xuICAgIH1cbn0pO1xuY29uc3QgZGV0ZWN0RG9tYWluTG9jYWxlID0gZnVuY3Rpb24oKSB7XG4gICAgZm9yKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5Kyspe1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cbiAgICBpZiAocHJvY2Vzcy5lbnYuX19ORVhUX0kxOE5fU1VQUE9SVCkge1xuICAgICAgICByZXR1cm4gcmVxdWlyZShcIi4uL3NoYXJlZC9saWIvaTE4bi9kZXRlY3QtZG9tYWluLWxvY2FsZVwiKS5kZXRlY3REb21haW5Mb2NhbGUoLi4uYXJncyk7XG4gICAgfVxufTtcblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGV0ZWN0LWRvbWFpbi1sb2NhbGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXREb21haW5Mb2NhbGVcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGdldERvbWFpbkxvY2FsZTtcbiAgICB9XG59KTtcbmNvbnN0IF9ub3JtYWxpemV0cmFpbGluZ3NsYXNoID0gcmVxdWlyZShcIi4vbm9ybWFsaXplLXRyYWlsaW5nLXNsYXNoXCIpO1xuY29uc3QgYmFzZVBhdGggPSBwcm9jZXNzLmVudi5fX05FWFRfUk9VVEVSX0JBU0VQQVRIIHx8IFwiXCI7XG5mdW5jdGlvbiBnZXREb21haW5Mb2NhbGUocGF0aCwgbG9jYWxlLCBsb2NhbGVzLCBkb21haW5Mb2NhbGVzKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Ll9fTkVYVF9JMThOX1NVUFBPUlQpIHtcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplTG9jYWxlUGF0aCA9IHJlcXVpcmUoXCIuL25vcm1hbGl6ZS1sb2NhbGUtcGF0aFwiKS5ub3JtYWxpemVMb2NhbGVQYXRoO1xuICAgICAgICBjb25zdCBkZXRlY3REb21haW5Mb2NhbGUgPSByZXF1aXJlKFwiLi9kZXRlY3QtZG9tYWluLWxvY2FsZVwiKS5kZXRlY3REb21haW5Mb2NhbGU7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGxvY2FsZSB8fCBub3JtYWxpemVMb2NhbGVQYXRoKHBhdGgsIGxvY2FsZXMpLmRldGVjdGVkTG9jYWxlO1xuICAgICAgICBjb25zdCBkb21haW4gPSBkZXRlY3REb21haW5Mb2NhbGUoZG9tYWluTG9jYWxlcywgdW5kZWZpbmVkLCB0YXJnZXQpO1xuICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgICBjb25zdCBwcm90byA9IFwiaHR0cFwiICsgKGRvbWFpbi5odHRwID8gXCJcIiA6IFwic1wiKSArIFwiOi8vXCI7XG4gICAgICAgICAgICBjb25zdCBmaW5hbExvY2FsZSA9IHRhcmdldCA9PT0gZG9tYWluLmRlZmF1bHRMb2NhbGUgPyBcIlwiIDogXCIvXCIgKyB0YXJnZXQ7XG4gICAgICAgICAgICByZXR1cm4gXCJcIiArIHByb3RvICsgZG9tYWluLmRvbWFpbiArICgwLCBfbm9ybWFsaXpldHJhaWxpbmdzbGFzaC5ub3JtYWxpemVQYXRoVHJhaWxpbmdTbGFzaCkoXCJcIiArIGJhc2VQYXRoICsgZmluYWxMb2NhbGUgKyBwYXRoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0LWRvbWFpbi1sb2NhbGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhZGRCYXNlUGF0aFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYWRkQmFzZVBhdGg7XG4gICAgfVxufSk7XG5jb25zdCBfYWRkcGF0aHByZWZpeCA9IHJlcXVpcmUoXCIuLi9zaGFyZWQvbGliL3JvdXRlci91dGlscy9hZGQtcGF0aC1wcmVmaXhcIik7XG5jb25zdCBfbm9ybWFsaXpldHJhaWxpbmdzbGFzaCA9IHJlcXVpcmUoXCIuL25vcm1hbGl6ZS10cmFpbGluZy1zbGFzaFwiKTtcbmNvbnN0IGJhc2VQYXRoID0gcHJvY2Vzcy5lbnYuX19ORVhUX1JPVVRFUl9CQVNFUEFUSCB8fCBcIlwiO1xuZnVuY3Rpb24gYWRkQmFzZVBhdGgocGF0aCwgcmVxdWlyZWQpIHtcbiAgICByZXR1cm4gKDAsIF9ub3JtYWxpemV0cmFpbGluZ3NsYXNoLm5vcm1hbGl6ZVBhdGhUcmFpbGluZ1NsYXNoKShwcm9jZXNzLmVudi5fX05FWFRfTUFOVUFMX0NMSUVOVF9CQVNFX1BBVEggJiYgIXJlcXVpcmVkID8gcGF0aCA6ICgwLCBfYWRkcGF0aHByZWZpeC5hZGRQYXRoUHJlZml4KShwYXRoLCBiYXNlUGF0aCkpO1xufVxuXG5pZiAoKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdvYmplY3QnICYmIGV4cG9ydHMuZGVmYXVsdCAhPT0gbnVsbCkpICYmIHR5cGVvZiBleHBvcnRzLmRlZmF1bHQuX19lc01vZHVsZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMuZGVmYXVsdCwgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuICBPYmplY3QuYXNzaWduKGV4cG9ydHMuZGVmYXVsdCwgZXhwb3J0cyk7XG4gIG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hZGQtYmFzZS1wYXRoLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgUHJlZmV0Y2hLaW5kOiBudWxsLFxuICAgIEFDVElPTl9SRUZSRVNIOiBudWxsLFxuICAgIEFDVElPTl9OQVZJR0FURTogbnVsbCxcbiAgICBBQ1RJT05fUkVTVE9SRTogbnVsbCxcbiAgICBBQ1RJT05fU0VSVkVSX1BBVENIOiBudWxsLFxuICAgIEFDVElPTl9QUkVGRVRDSDogbnVsbCxcbiAgICBBQ1RJT05fRkFTVF9SRUZSRVNIOiBudWxsLFxuICAgIEFDVElPTl9TRVJWRVJfQUNUSU9OOiBudWxsXG59KTtcbmZ1bmN0aW9uIF9leHBvcnQodGFyZ2V0LCBhbGwpIHtcbiAgICBmb3IodmFyIG5hbWUgaW4gYWxsKU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIG5hbWUsIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiBhbGxbbmFtZV1cbiAgICB9KTtcbn1cbl9leHBvcnQoZXhwb3J0cywge1xuICAgIFByZWZldGNoS2luZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBQcmVmZXRjaEtpbmQ7XG4gICAgfSxcbiAgICBBQ1RJT05fUkVGUkVTSDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBBQ1RJT05fUkVGUkVTSDtcbiAgICB9LFxuICAgIEFDVElPTl9OQVZJR0FURTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBBQ1RJT05fTkFWSUdBVEU7XG4gICAgfSxcbiAgICBBQ1RJT05fUkVTVE9SRTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBBQ1RJT05fUkVTVE9SRTtcbiAgICB9LFxuICAgIEFDVElPTl9TRVJWRVJfUEFUQ0g6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gQUNUSU9OX1NFUlZFUl9QQVRDSDtcbiAgICB9LFxuICAgIEFDVElPTl9QUkVGRVRDSDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBBQ1RJT05fUFJFRkVUQ0g7XG4gICAgfSxcbiAgICBBQ1RJT05fRkFTVF9SRUZSRVNIOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIEFDVElPTl9GQVNUX1JFRlJFU0g7XG4gICAgfSxcbiAgICBBQ1RJT05fU0VSVkVSX0FDVElPTjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBBQ1RJT05fU0VSVkVSX0FDVElPTjtcbiAgICB9XG59KTtcbmNvbnN0IEFDVElPTl9SRUZSRVNIID0gXCJyZWZyZXNoXCI7XG5jb25zdCBBQ1RJT05fTkFWSUdBVEUgPSBcIm5hdmlnYXRlXCI7XG5jb25zdCBBQ1RJT05fUkVTVE9SRSA9IFwicmVzdG9yZVwiO1xuY29uc3QgQUNUSU9OX1NFUlZFUl9QQVRDSCA9IFwic2VydmVyLXBhdGNoXCI7XG5jb25zdCBBQ1RJT05fUFJFRkVUQ0ggPSBcInByZWZldGNoXCI7XG5jb25zdCBBQ1RJT05fRkFTVF9SRUZSRVNIID0gXCJmYXN0LXJlZnJlc2hcIjtcbmNvbnN0IEFDVElPTl9TRVJWRVJfQUNUSU9OID0gXCJzZXJ2ZXItYWN0aW9uXCI7XG52YXIgUHJlZmV0Y2hLaW5kO1xuKGZ1bmN0aW9uKFByZWZldGNoS2luZCkge1xuICAgIFByZWZldGNoS2luZFtcIkFVVE9cIl0gPSBcImF1dG9cIjtcbiAgICBQcmVmZXRjaEtpbmRbXCJGVUxMXCJdID0gXCJmdWxsXCI7XG4gICAgUHJlZmV0Y2hLaW5kW1wiVEVNUE9SQVJZXCJdID0gXCJ0ZW1wb3JhcnlcIjtcbn0pKFByZWZldGNoS2luZCB8fCAoUHJlZmV0Y2hLaW5kID0ge30pKTtcblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cm91dGVyLXJlZHVjZXItdHlwZXMuanMubWFwIiwiXCJ1c2UgY2xpZW50XCI7XG5cblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX2RlZmF1bHQ7XG4gICAgfVxufSk7XG5jb25zdCBfaW50ZXJvcF9yZXF1aXJlX2RlZmF1bHQgPSByZXF1aXJlKFwiQHN3Yy9oZWxwZXJzL18vX2ludGVyb3BfcmVxdWlyZV9kZWZhdWx0XCIpO1xuY29uc3QgX3JlYWN0ID0gLyojX19QVVJFX18qLyBfaW50ZXJvcF9yZXF1aXJlX2RlZmF1bHQuXyhyZXF1aXJlKFwicmVhY3RcIikpO1xuY29uc3QgX3Jlc29sdmVocmVmID0gcmVxdWlyZShcIi4vcmVzb2x2ZS1ocmVmXCIpO1xuY29uc3QgX2lzbG9jYWx1cmwgPSByZXF1aXJlKFwiLi4vc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvaXMtbG9jYWwtdXJsXCIpO1xuY29uc3QgX2Zvcm1hdHVybCA9IHJlcXVpcmUoXCIuLi9zaGFyZWQvbGliL3JvdXRlci91dGlscy9mb3JtYXQtdXJsXCIpO1xuY29uc3QgX3V0aWxzID0gcmVxdWlyZShcIi4uL3NoYXJlZC9saWIvdXRpbHNcIik7XG5jb25zdCBfYWRkbG9jYWxlID0gcmVxdWlyZShcIi4vYWRkLWxvY2FsZVwiKTtcbmNvbnN0IF9yb3V0ZXJjb250ZXh0c2hhcmVkcnVudGltZSA9IHJlcXVpcmUoXCIuLi9zaGFyZWQvbGliL3JvdXRlci1jb250ZXh0LnNoYXJlZC1ydW50aW1lXCIpO1xuY29uc3QgX2FwcHJvdXRlcmNvbnRleHRzaGFyZWRydW50aW1lID0gcmVxdWlyZShcIi4uL3NoYXJlZC9saWIvYXBwLXJvdXRlci1jb250ZXh0LnNoYXJlZC1ydW50aW1lXCIpO1xuY29uc3QgX3VzZWludGVyc2VjdGlvbiA9IHJlcXVpcmUoXCIuL3VzZS1pbnRlcnNlY3Rpb25cIik7XG5jb25zdCBfZ2V0ZG9tYWlubG9jYWxlID0gcmVxdWlyZShcIi4vZ2V0LWRvbWFpbi1sb2NhbGVcIik7XG5jb25zdCBfYWRkYmFzZXBhdGggPSByZXF1aXJlKFwiLi9hZGQtYmFzZS1wYXRoXCIpO1xuY29uc3QgX3JvdXRlcnJlZHVjZXJ0eXBlcyA9IHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvcm91dGVyLXJlZHVjZXIvcm91dGVyLXJlZHVjZXItdHlwZXNcIik7XG5jb25zdCBwcmVmZXRjaGVkID0gbmV3IFNldCgpO1xuZnVuY3Rpb24gcHJlZmV0Y2gocm91dGVyLCBocmVmLCBhcywgb3B0aW9ucywgYXBwT3B0aW9ucywgaXNBcHBSb3V0ZXIpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGFwcC1yb3V0ZXIgc3VwcG9ydHMgZXh0ZXJuYWwgdXJscyBvdXQgb2YgdGhlIGJveCBzbyBpdCBzaG91bGRuJ3Qgc2hvcnQtY2lyY3VpdCBoZXJlIGFzIHN1cHBvcnQgZm9yIGUuZy4gYHJlcGxhY2VgIGlzIGFkZGVkIGluIHRoZSBhcHAtcm91dGVyLlxuICAgIGlmICghaXNBcHBSb3V0ZXIgJiYgISgwLCBfaXNsb2NhbHVybC5pc0xvY2FsVVJMKShocmVmKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFdlIHNob3VsZCBvbmx5IGRlZHVwZSByZXF1ZXN0cyB3aGVuIGV4cGVyaW1lbnRhbC5vcHRpbWlzdGljQ2xpZW50Q2FjaGUgaXNcbiAgICAvLyBkaXNhYmxlZC5cbiAgICBpZiAoIW9wdGlvbnMuYnlwYXNzUHJlZmV0Y2hlZENoZWNrKSB7XG4gICAgICAgIGNvbnN0IGxvY2FsZSA9IC8vIExldCB0aGUgbGluaydzIGxvY2FsZSBwcm9wIG92ZXJyaWRlIHRoZSBkZWZhdWx0IHJvdXRlciBsb2NhbGUuXG4gICAgICAgIHR5cGVvZiBvcHRpb25zLmxvY2FsZSAhPT0gXCJ1bmRlZmluZWRcIiA/IG9wdGlvbnMubG9jYWxlIDogXCJsb2NhbGVcIiBpbiByb3V0ZXIgPyByb3V0ZXIubG9jYWxlIDogdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBwcmVmZXRjaGVkS2V5ID0gaHJlZiArIFwiJVwiICsgYXMgKyBcIiVcIiArIGxvY2FsZTtcbiAgICAgICAgLy8gSWYgd2UndmUgYWxyZWFkeSBmZXRjaGVkIHRoZSBrZXksIHRoZW4gZG9uJ3QgcHJlZmV0Y2ggaXQgYWdhaW4hXG4gICAgICAgIGlmIChwcmVmZXRjaGVkLmhhcyhwcmVmZXRjaGVkS2V5KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIE1hcmsgdGhpcyBVUkwgYXMgcHJlZmV0Y2hlZC5cbiAgICAgICAgcHJlZmV0Y2hlZC5hZGQocHJlZmV0Y2hlZEtleSk7XG4gICAgfVxuICAgIGNvbnN0IHByZWZldGNoUHJvbWlzZSA9IGlzQXBwUm91dGVyID8gcm91dGVyLnByZWZldGNoKGhyZWYsIGFwcE9wdGlvbnMpIDogcm91dGVyLnByZWZldGNoKGhyZWYsIGFzLCBvcHRpb25zKTtcbiAgICAvLyBQcmVmZXRjaCB0aGUgSlNPTiBwYWdlIGlmIGFza2VkIChvbmx5IGluIHRoZSBjbGllbnQpXG4gICAgLy8gV2UgbmVlZCB0byBoYW5kbGUgYSBwcmVmZXRjaCBlcnJvciBoZXJlIHNpbmNlIHdlIG1heSBiZVxuICAgIC8vIGxvYWRpbmcgd2l0aCBwcmlvcml0eSB3aGljaCBjYW4gcmVqZWN0IGJ1dCB3ZSBkb24ndFxuICAgIC8vIHdhbnQgdG8gZm9yY2UgbmF2aWdhdGlvbiBzaW5jZSB0aGlzIGlzIG9ubHkgYSBwcmVmZXRjaFxuICAgIFByb21pc2UucmVzb2x2ZShwcmVmZXRjaFByb21pc2UpLmNhdGNoKChlcnIpPT57XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIC8vIHJldGhyb3cgdG8gc2hvdyBpbnZhbGlkIFVSTCBlcnJvcnNcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gICAgY29uc3QgZXZlbnRUYXJnZXQgPSBldmVudC5jdXJyZW50VGFyZ2V0O1xuICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50VGFyZ2V0LmdldEF0dHJpYnV0ZShcInRhcmdldFwiKTtcbiAgICByZXR1cm4gdGFyZ2V0ICYmIHRhcmdldCAhPT0gXCJfc2VsZlwiIHx8IGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSB8fCBldmVudC5hbHRLZXkgfHwgLy8gdHJpZ2dlcnMgcmVzb3VyY2UgZG93bmxvYWRcbiAgICBldmVudC5uYXRpdmVFdmVudCAmJiBldmVudC5uYXRpdmVFdmVudC53aGljaCA9PT0gMjtcbn1cbmZ1bmN0aW9uIGxpbmtDbGlja2VkKGUsIHJvdXRlciwgaHJlZiwgYXMsIHJlcGxhY2UsIHNoYWxsb3csIHNjcm9sbCwgbG9jYWxlLCBpc0FwcFJvdXRlciwgcHJlZmV0Y2hFbmFibGVkKSB7XG4gICAgY29uc3QgeyBub2RlTmFtZSB9ID0gZS5jdXJyZW50VGFyZ2V0O1xuICAgIC8vIGFuY2hvcnMgaW5zaWRlIGFuIHN2ZyBoYXZlIGEgbG93ZXJjYXNlIG5vZGVOYW1lXG4gICAgY29uc3QgaXNBbmNob3JOb2RlTmFtZSA9IG5vZGVOYW1lLnRvVXBwZXJDYXNlKCkgPT09IFwiQVwiO1xuICAgIGlmIChpc0FuY2hvck5vZGVOYW1lICYmIChpc01vZGlmaWVkRXZlbnQoZSkgfHwgLy8gYXBwLXJvdXRlciBzdXBwb3J0cyBleHRlcm5hbCB1cmxzIG91dCBvZiB0aGUgYm94IHNvIGl0IHNob3VsZG4ndCBzaG9ydC1jaXJjdWl0IGhlcmUgYXMgc3VwcG9ydCBmb3IgZS5nLiBgcmVwbGFjZWAgaXMgYWRkZWQgaW4gdGhlIGFwcC1yb3V0ZXIuXG4gICAgIWlzQXBwUm91dGVyICYmICEoMCwgX2lzbG9jYWx1cmwuaXNMb2NhbFVSTCkoaHJlZikpKSB7XG4gICAgICAgIC8vIGlnbm9yZSBjbGljayBmb3IgYnJvd3NlcuKAmXMgZGVmYXVsdCBiZWhhdmlvclxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCBuYXZpZ2F0ZSA9ICgpPT57XG4gICAgICAgIC8vIElmIHRoZSByb3V0ZXIgaXMgYW4gTmV4dFJvdXRlciBpbnN0YW5jZSBpdCB3aWxsIGhhdmUgYGJlZm9yZVBvcFN0YXRlYFxuICAgICAgICBjb25zdCByb3V0ZXJTY3JvbGwgPSBzY3JvbGwgIT0gbnVsbCA/IHNjcm9sbCA6IHRydWU7XG4gICAgICAgIGlmIChcImJlZm9yZVBvcFN0YXRlXCIgaW4gcm91dGVyKSB7XG4gICAgICAgICAgICByb3V0ZXJbcmVwbGFjZSA/IFwicmVwbGFjZVwiIDogXCJwdXNoXCJdKGhyZWYsIGFzLCB7XG4gICAgICAgICAgICAgICAgc2hhbGxvdyxcbiAgICAgICAgICAgICAgICBsb2NhbGUsXG4gICAgICAgICAgICAgICAgc2Nyb2xsOiByb3V0ZXJTY3JvbGxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcm91dGVyW3JlcGxhY2UgPyBcInJlcGxhY2VcIiA6IFwicHVzaFwiXShhcyB8fCBocmVmLCB7XG4gICAgICAgICAgICAgICAgZm9yY2VPcHRpbWlzdGljTmF2aWdhdGlvbjogIXByZWZldGNoRW5hYmxlZCxcbiAgICAgICAgICAgICAgICBzY3JvbGw6IHJvdXRlclNjcm9sbFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGlmIChpc0FwcFJvdXRlcikge1xuICAgICAgICBfcmVhY3QuZGVmYXVsdC5zdGFydFRyYW5zaXRpb24obmF2aWdhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG5hdmlnYXRlKCk7XG4gICAgfVxufVxuZnVuY3Rpb24gZm9ybWF0U3RyaW5nT3JVcmwodXJsT2JqT3JTdHJpbmcpIHtcbiAgICBpZiAodHlwZW9mIHVybE9iak9yU3RyaW5nID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiB1cmxPYmpPclN0cmluZztcbiAgICB9XG4gICAgcmV0dXJuICgwLCBfZm9ybWF0dXJsLmZvcm1hdFVybCkodXJsT2JqT3JTdHJpbmcpO1xufVxuLyoqXG4gKiBSZWFjdCBDb21wb25lbnQgdGhhdCBlbmFibGVzIGNsaWVudC1zaWRlIHRyYW5zaXRpb25zIGJldHdlZW4gcm91dGVzLlxuICovIGNvbnN0IExpbmsgPSAvKiNfX1BVUkVfXyovIF9yZWFjdC5kZWZhdWx0LmZvcndhcmRSZWYoZnVuY3Rpb24gTGlua0NvbXBvbmVudChwcm9wcywgZm9yd2FyZGVkUmVmKSB7XG4gICAgbGV0IGNoaWxkcmVuO1xuICAgIGNvbnN0IHsgaHJlZjogaHJlZlByb3AsIGFzOiBhc1Byb3AsIGNoaWxkcmVuOiBjaGlsZHJlblByb3AsIHByZWZldGNoOiBwcmVmZXRjaFByb3AgPSBudWxsLCBwYXNzSHJlZiwgcmVwbGFjZSwgc2hhbGxvdywgc2Nyb2xsLCBsb2NhbGUsIG9uQ2xpY2ssIG9uTW91c2VFbnRlcjogb25Nb3VzZUVudGVyUHJvcCwgb25Ub3VjaFN0YXJ0OiBvblRvdWNoU3RhcnRQcm9wLCBsZWdhY3lCZWhhdmlvciA9IGZhbHNlLCAuLi5yZXN0UHJvcHMgfSA9IHByb3BzO1xuICAgIGNoaWxkcmVuID0gY2hpbGRyZW5Qcm9wO1xuICAgIGlmIChsZWdhY3lCZWhhdmlvciAmJiAodHlwZW9mIGNoaWxkcmVuID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJudW1iZXJcIikpIHtcbiAgICAgICAgY2hpbGRyZW4gPSAvKiNfX1BVUkVfXyovIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIG51bGwsIGNoaWxkcmVuKTtcbiAgICB9XG4gICAgY29uc3QgcGFnZXNSb3V0ZXIgPSBfcmVhY3QuZGVmYXVsdC51c2VDb250ZXh0KF9yb3V0ZXJjb250ZXh0c2hhcmVkcnVudGltZS5Sb3V0ZXJDb250ZXh0KTtcbiAgICBjb25zdCBhcHBSb3V0ZXIgPSBfcmVhY3QuZGVmYXVsdC51c2VDb250ZXh0KF9hcHByb3V0ZXJjb250ZXh0c2hhcmVkcnVudGltZS5BcHBSb3V0ZXJDb250ZXh0KTtcbiAgICBjb25zdCByb3V0ZXIgPSBwYWdlc1JvdXRlciAhPSBudWxsID8gcGFnZXNSb3V0ZXIgOiBhcHBSb3V0ZXI7XG4gICAgLy8gV2UncmUgaW4gdGhlIGFwcCBkaXJlY3RvcnkgaWYgdGhlcmUgaXMgbm8gcGFnZXMgcm91dGVyLlxuICAgIGNvbnN0IGlzQXBwUm91dGVyID0gIXBhZ2VzUm91dGVyO1xuICAgIGNvbnN0IHByZWZldGNoRW5hYmxlZCA9IHByZWZldGNoUHJvcCAhPT0gZmFsc2U7XG4gICAgLyoqXG4gICAgICogVGhlIHBvc3NpYmxlIHN0YXRlcyBmb3IgcHJlZmV0Y2ggYXJlOlxuICAgICAqIC0gbnVsbDogdGhpcyBpcyB0aGUgZGVmYXVsdCBcImF1dG9cIiBtb2RlLCB3aGVyZSB3ZSB3aWxsIHByZWZldGNoIHBhcnRpYWxseSBpZiB0aGUgbGluayBpcyBpbiB0aGUgdmlld3BvcnRcbiAgICAgKiAtIHRydWU6IHdlIHdpbGwgcHJlZmV0Y2ggaWYgdGhlIGxpbmsgaXMgdmlzaWJsZSBhbmQgcHJlZmV0Y2ggdGhlIGZ1bGwgcGFnZSwgbm90IGp1c3QgcGFydGlhbGx5XG4gICAgICogLSBmYWxzZTogd2Ugd2lsbCBub3QgcHJlZmV0Y2ggaWYgaW4gdGhlIHZpZXdwb3J0IGF0IGFsbFxuICAgICAqLyBjb25zdCBhcHBQcmVmZXRjaEtpbmQgPSBwcmVmZXRjaFByb3AgPT09IG51bGwgPyBfcm91dGVycmVkdWNlcnR5cGVzLlByZWZldGNoS2luZC5BVVRPIDogX3JvdXRlcnJlZHVjZXJ0eXBlcy5QcmVmZXRjaEtpbmQuRlVMTDtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVByb3BFcnJvcihhcmdzKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKFwiRmFpbGVkIHByb3AgdHlwZTogVGhlIHByb3AgYFwiICsgYXJncy5rZXkgKyBcImAgZXhwZWN0cyBhIFwiICsgYXJncy5leHBlY3RlZCArIFwiIGluIGA8TGluaz5gLCBidXQgZ290IGBcIiArIGFyZ3MuYWN0dWFsICsgXCJgIGluc3RlYWQuXCIgKyAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IFwiXFxuT3BlbiB5b3VyIGJyb3dzZXIncyBjb25zb2xlIHRvIHZpZXcgdGhlIENvbXBvbmVudCBzdGFjayB0cmFjZS5cIiA6IFwiXCIpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUeXBlU2NyaXB0IHRyaWNrIGZvciB0eXBlLWd1YXJkaW5nOlxuICAgICAgICBjb25zdCByZXF1aXJlZFByb3BzR3VhcmQgPSB7XG4gICAgICAgICAgICBocmVmOiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlcXVpcmVkUHJvcHMgPSBPYmplY3Qua2V5cyhyZXF1aXJlZFByb3BzR3VhcmQpO1xuICAgICAgICByZXF1aXJlZFByb3BzLmZvckVhY2goKGtleSk9PntcbiAgICAgICAgICAgIGlmIChrZXkgPT09IFwiaHJlZlwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKHByb3BzW2tleV0gPT0gbnVsbCB8fCB0eXBlb2YgcHJvcHNba2V5XSAhPT0gXCJzdHJpbmdcIiAmJiB0eXBlb2YgcHJvcHNba2V5XSAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBjcmVhdGVQcm9wRXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IFwiYHN0cmluZ2Agb3IgYG9iamVjdGBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdHVhbDogcHJvcHNba2V5XSA9PT0gbnVsbCA/IFwibnVsbFwiIDogdHlwZW9mIHByb3BzW2tleV1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBUeXBlU2NyaXB0IHRyaWNrIGZvciB0eXBlLWd1YXJkaW5nOlxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICAgICAgICAgICAgICBjb25zdCBfID0ga2V5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gVHlwZVNjcmlwdCB0cmljayBmb3IgdHlwZS1ndWFyZGluZzpcbiAgICAgICAgY29uc3Qgb3B0aW9uYWxQcm9wc0d1YXJkID0ge1xuICAgICAgICAgICAgYXM6IHRydWUsXG4gICAgICAgICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgICAgICAgc2Nyb2xsOiB0cnVlLFxuICAgICAgICAgICAgc2hhbGxvdzogdHJ1ZSxcbiAgICAgICAgICAgIHBhc3NIcmVmOiB0cnVlLFxuICAgICAgICAgICAgcHJlZmV0Y2g6IHRydWUsXG4gICAgICAgICAgICBsb2NhbGU6IHRydWUsXG4gICAgICAgICAgICBvbkNsaWNrOiB0cnVlLFxuICAgICAgICAgICAgb25Nb3VzZUVudGVyOiB0cnVlLFxuICAgICAgICAgICAgb25Ub3VjaFN0YXJ0OiB0cnVlLFxuICAgICAgICAgICAgbGVnYWN5QmVoYXZpb3I6IHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgb3B0aW9uYWxQcm9wcyA9IE9iamVjdC5rZXlzKG9wdGlvbmFsUHJvcHNHdWFyZCk7XG4gICAgICAgIG9wdGlvbmFsUHJvcHMuZm9yRWFjaCgoa2V5KT0+e1xuICAgICAgICAgICAgY29uc3QgdmFsVHlwZSA9IHR5cGVvZiBwcm9wc1trZXldO1xuICAgICAgICAgICAgaWYgKGtleSA9PT0gXCJhc1wiKSB7XG4gICAgICAgICAgICAgICAgaWYgKHByb3BzW2tleV0gJiYgdmFsVHlwZSAhPT0gXCJzdHJpbmdcIiAmJiB2YWxUeXBlICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGNyZWF0ZVByb3BFcnJvcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBlY3RlZDogXCJgc3RyaW5nYCBvciBgb2JqZWN0YFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0dWFsOiB2YWxUeXBlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSBcImxvY2FsZVwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKHByb3BzW2tleV0gJiYgdmFsVHlwZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBjcmVhdGVQcm9wRXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IFwiYHN0cmluZ2BcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdHVhbDogdmFsVHlwZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gXCJvbkNsaWNrXCIgfHwga2V5ID09PSBcIm9uTW91c2VFbnRlclwiIHx8IGtleSA9PT0gXCJvblRvdWNoU3RhcnRcIikge1xuICAgICAgICAgICAgICAgIGlmIChwcm9wc1trZXldICYmIHZhbFR5cGUgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBjcmVhdGVQcm9wRXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IFwiYGZ1bmN0aW9uYFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0dWFsOiB2YWxUeXBlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSBcInJlcGxhY2VcIiB8fCBrZXkgPT09IFwic2Nyb2xsXCIgfHwga2V5ID09PSBcInNoYWxsb3dcIiB8fCBrZXkgPT09IFwicGFzc0hyZWZcIiB8fCBrZXkgPT09IFwicHJlZmV0Y2hcIiB8fCBrZXkgPT09IFwibGVnYWN5QmVoYXZpb3JcIikge1xuICAgICAgICAgICAgICAgIGlmIChwcm9wc1trZXldICE9IG51bGwgJiYgdmFsVHlwZSAhPT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgY3JlYXRlUHJvcEVycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBcImBib29sZWFuYFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0dWFsOiB2YWxUeXBlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gVHlwZVNjcmlwdCB0cmljayBmb3IgdHlwZS1ndWFyZGluZzpcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgICAgICAgICAgICAgY29uc3QgXyA9IGtleTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIFRoaXMgaG9vayBpcyBpbiBhIGNvbmRpdGlvbmFsIGJ1dCB0aGF0IGlzIG9rIGJlY2F1c2UgYHByb2Nlc3MuZW52Lk5PREVfRU5WYCBuZXZlciBjaGFuZ2VzXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgICAgICBjb25zdCBoYXNXYXJuZWQgPSBfcmVhY3QuZGVmYXVsdC51c2VSZWYoZmFsc2UpO1xuICAgICAgICBpZiAocHJvcHMucHJlZmV0Y2ggJiYgIWhhc1dhcm5lZC5jdXJyZW50ICYmICFpc0FwcFJvdXRlcikge1xuICAgICAgICAgICAgaGFzV2FybmVkLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiTmV4dC5qcyBhdXRvLXByZWZldGNoZXMgYXV0b21hdGljYWxseSBiYXNlZCBvbiB2aWV3cG9ydC4gVGhlIHByZWZldGNoIGF0dHJpYnV0ZSBpcyBubyBsb25nZXIgbmVlZGVkLiBNb3JlOiBodHRwczovL25leHRqcy5vcmcvZG9jcy9tZXNzYWdlcy9wcmVmZXRjaC10cnVlLWRlcHJlY2F0ZWRcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBpZiAoaXNBcHBSb3V0ZXIgJiYgIWFzUHJvcCkge1xuICAgICAgICAgICAgbGV0IGhyZWY7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGhyZWZQcm9wID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgaHJlZiA9IGhyZWZQcm9wO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaHJlZlByb3AgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIGhyZWZQcm9wLnBhdGhuYW1lID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgaHJlZiA9IGhyZWZQcm9wLnBhdGhuYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGhyZWYpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBoYXNEeW5hbWljU2VnbWVudCA9IGhyZWYuc3BsaXQoXCIvXCIpLnNvbWUoKHNlZ21lbnQpPT5zZWdtZW50LnN0YXJ0c1dpdGgoXCJbXCIpICYmIHNlZ21lbnQuZW5kc1dpdGgoXCJdXCIpKTtcbiAgICAgICAgICAgICAgICBpZiAoaGFzRHluYW1pY1NlZ21lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRHluYW1pYyBocmVmIGBcIiArIGhyZWYgKyBcImAgZm91bmQgaW4gPExpbms+IHdoaWxlIHVzaW5nIHRoZSBgL2FwcGAgcm91dGVyLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQuIFJlYWQgbW9yZTogaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvbWVzc2FnZXMvYXBwLWRpci1keW5hbWljLWhyZWZcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHsgaHJlZiwgYXMgfSA9IF9yZWFjdC5kZWZhdWx0LnVzZU1lbW8oKCk9PntcbiAgICAgICAgaWYgKCFwYWdlc1JvdXRlcikge1xuICAgICAgICAgICAgY29uc3QgcmVzb2x2ZWRIcmVmID0gZm9ybWF0U3RyaW5nT3JVcmwoaHJlZlByb3ApO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBocmVmOiByZXNvbHZlZEhyZWYsXG4gICAgICAgICAgICAgICAgYXM6IGFzUHJvcCA/IGZvcm1hdFN0cmluZ09yVXJsKGFzUHJvcCkgOiByZXNvbHZlZEhyZWZcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgW3Jlc29sdmVkSHJlZiwgcmVzb2x2ZWRBc10gPSAoMCwgX3Jlc29sdmVocmVmLnJlc29sdmVIcmVmKShwYWdlc1JvdXRlciwgaHJlZlByb3AsIHRydWUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaHJlZjogcmVzb2x2ZWRIcmVmLFxuICAgICAgICAgICAgYXM6IGFzUHJvcCA/ICgwLCBfcmVzb2x2ZWhyZWYucmVzb2x2ZUhyZWYpKHBhZ2VzUm91dGVyLCBhc1Byb3ApIDogcmVzb2x2ZWRBcyB8fCByZXNvbHZlZEhyZWZcbiAgICAgICAgfTtcbiAgICB9LCBbXG4gICAgICAgIHBhZ2VzUm91dGVyLFxuICAgICAgICBocmVmUHJvcCxcbiAgICAgICAgYXNQcm9wXG4gICAgXSk7XG4gICAgY29uc3QgcHJldmlvdXNIcmVmID0gX3JlYWN0LmRlZmF1bHQudXNlUmVmKGhyZWYpO1xuICAgIGNvbnN0IHByZXZpb3VzQXMgPSBfcmVhY3QuZGVmYXVsdC51c2VSZWYoYXMpO1xuICAgIC8vIFRoaXMgd2lsbCByZXR1cm4gdGhlIGZpcnN0IGNoaWxkLCBpZiBtdWx0aXBsZSBhcmUgcHJvdmlkZWQgaXQgd2lsbCB0aHJvdyBhbiBlcnJvclxuICAgIGxldCBjaGlsZDtcbiAgICBpZiAobGVnYWN5QmVoYXZpb3IpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCIpIHtcbiAgICAgICAgICAgIGlmIChvbkNsaWNrKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdcIm9uQ2xpY2tcIiB3YXMgcGFzc2VkIHRvIDxMaW5rPiB3aXRoIGBocmVmYCBvZiBgJyArIGhyZWZQcm9wICsgJ2AgYnV0IFwibGVnYWN5QmVoYXZpb3JcIiB3YXMgc2V0LiBUaGUgbGVnYWN5IGJlaGF2aW9yIHJlcXVpcmVzIG9uQ2xpY2sgYmUgc2V0IG9uIHRoZSBjaGlsZCBvZiBuZXh0L2xpbmsnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvbk1vdXNlRW50ZXJQcm9wKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdcIm9uTW91c2VFbnRlclwiIHdhcyBwYXNzZWQgdG8gPExpbms+IHdpdGggYGhyZWZgIG9mIGAnICsgaHJlZlByb3AgKyAnYCBidXQgXCJsZWdhY3lCZWhhdmlvclwiIHdhcyBzZXQuIFRoZSBsZWdhY3kgYmVoYXZpb3IgcmVxdWlyZXMgb25Nb3VzZUVudGVyIGJlIHNldCBvbiB0aGUgY2hpbGQgb2YgbmV4dC9saW5rJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNoaWxkID0gX3JlYWN0LmRlZmF1bHQuQ2hpbGRyZW4ub25seShjaGlsZHJlbik7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIGNoaWxkcmVuIHdlcmUgcGFzc2VkIHRvIDxMaW5rPiB3aXRoIGBocmVmYCBvZiBgXCIgKyBocmVmUHJvcCArIFwiYCBidXQgb25lIGNoaWxkIGlzIHJlcXVpcmVkIGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL21lc3NhZ2VzL2xpbmstbm8tY2hpbGRyZW5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk11bHRpcGxlIGNoaWxkcmVuIHdlcmUgcGFzc2VkIHRvIDxMaW5rPiB3aXRoIGBocmVmYCBvZiBgXCIgKyBocmVmUHJvcCArIFwiYCBidXQgb25seSBvbmUgY2hpbGQgaXMgc3VwcG9ydGVkIGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL21lc3NhZ2VzL2xpbmstbXVsdGlwbGUtY2hpbGRyZW5cIiArICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gXCIgXFxuT3BlbiB5b3VyIGJyb3dzZXIncyBjb25zb2xlIHRvIHZpZXcgdGhlIENvbXBvbmVudCBzdGFjayB0cmFjZS5cIiA6IFwiXCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoaWxkID0gX3JlYWN0LmRlZmF1bHQuQ2hpbGRyZW4ub25seShjaGlsZHJlbik7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwiZGV2ZWxvcG1lbnRcIikge1xuICAgICAgICAgICAgaWYgKChjaGlsZHJlbiA9PSBudWxsID8gdm9pZCAwIDogY2hpbGRyZW4udHlwZSkgPT09IFwiYVwiKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCA8TGluaz4gd2l0aCA8YT4gY2hpbGQuIFBsZWFzZSByZW1vdmUgPGE+IG9yIHVzZSA8TGluayBsZWdhY3lCZWhhdmlvcj4uXFxuTGVhcm4gbW9yZTogaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvbWVzc2FnZXMvaW52YWxpZC1uZXctbGluay13aXRoLWV4dHJhLWFuY2hvclwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBjaGlsZFJlZiA9IGxlZ2FjeUJlaGF2aW9yID8gY2hpbGQgJiYgdHlwZW9mIGNoaWxkID09PSBcIm9iamVjdFwiICYmIGNoaWxkLnJlZiA6IGZvcndhcmRlZFJlZjtcbiAgICBjb25zdCBbc2V0SW50ZXJzZWN0aW9uUmVmLCBpc1Zpc2libGUsIHJlc2V0VmlzaWJsZV0gPSAoMCwgX3VzZWludGVyc2VjdGlvbi51c2VJbnRlcnNlY3Rpb24pKHtcbiAgICAgICAgcm9vdE1hcmdpbjogXCIyMDBweFwiXG4gICAgfSk7XG4gICAgY29uc3Qgc2V0UmVmID0gX3JlYWN0LmRlZmF1bHQudXNlQ2FsbGJhY2soKGVsKT0+e1xuICAgICAgICAvLyBCZWZvcmUgdGhlIGxpbmsgZ2V0dGluZyBvYnNlcnZlZCwgY2hlY2sgaWYgdmlzaWJsZSBzdGF0ZSBuZWVkIHRvIGJlIHJlc2V0XG4gICAgICAgIGlmIChwcmV2aW91c0FzLmN1cnJlbnQgIT09IGFzIHx8IHByZXZpb3VzSHJlZi5jdXJyZW50ICE9PSBocmVmKSB7XG4gICAgICAgICAgICByZXNldFZpc2libGUoKTtcbiAgICAgICAgICAgIHByZXZpb3VzQXMuY3VycmVudCA9IGFzO1xuICAgICAgICAgICAgcHJldmlvdXNIcmVmLmN1cnJlbnQgPSBocmVmO1xuICAgICAgICB9XG4gICAgICAgIHNldEludGVyc2VjdGlvblJlZihlbCk7XG4gICAgICAgIGlmIChjaGlsZFJlZikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjaGlsZFJlZiA9PT0gXCJmdW5jdGlvblwiKSBjaGlsZFJlZihlbCk7XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgY2hpbGRSZWYgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgICBjaGlsZFJlZi5jdXJyZW50ID0gZWw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCBbXG4gICAgICAgIGFzLFxuICAgICAgICBjaGlsZFJlZixcbiAgICAgICAgaHJlZixcbiAgICAgICAgcmVzZXRWaXNpYmxlLFxuICAgICAgICBzZXRJbnRlcnNlY3Rpb25SZWZcbiAgICBdKTtcbiAgICAvLyBQcmVmZXRjaCB0aGUgVVJMIGlmIHdlIGhhdmVuJ3QgYWxyZWFkeSBhbmQgaXQncyB2aXNpYmxlLlxuICAgIF9yZWFjdC5kZWZhdWx0LnVzZUVmZmVjdCgoKT0+e1xuICAgICAgICAvLyBpbiBkZXYsIHdlIG9ubHkgcHJlZmV0Y2ggb24gaG92ZXIgdG8gYXZvaWQgd2FzdGluZyByZXNvdXJjZXMgYXMgdGhlIHByZWZldGNoIHdpbGwgdHJpZ2dlciBjb21waWxpbmcgdGhlIHBhZ2UuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJvdXRlcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHdlIGRvbid0IG5lZWQgdG8gcHJlZmV0Y2ggdGhlIFVSTCwgZG9uJ3QgZG8gcHJlZmV0Y2guXG4gICAgICAgIGlmICghaXNWaXNpYmxlIHx8ICFwcmVmZXRjaEVuYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBQcmVmZXRjaCB0aGUgVVJMLlxuICAgICAgICBwcmVmZXRjaChyb3V0ZXIsIGhyZWYsIGFzLCB7XG4gICAgICAgICAgICBsb2NhbGVcbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2luZDogYXBwUHJlZmV0Y2hLaW5kXG4gICAgICAgIH0sIGlzQXBwUm91dGVyKTtcbiAgICB9LCBbXG4gICAgICAgIGFzLFxuICAgICAgICBocmVmLFxuICAgICAgICBpc1Zpc2libGUsXG4gICAgICAgIGxvY2FsZSxcbiAgICAgICAgcHJlZmV0Y2hFbmFibGVkLFxuICAgICAgICBwYWdlc1JvdXRlciA9PSBudWxsID8gdm9pZCAwIDogcGFnZXNSb3V0ZXIubG9jYWxlLFxuICAgICAgICByb3V0ZXIsXG4gICAgICAgIGlzQXBwUm91dGVyLFxuICAgICAgICBhcHBQcmVmZXRjaEtpbmRcbiAgICBdKTtcbiAgICBjb25zdCBjaGlsZFByb3BzID0ge1xuICAgICAgICByZWY6IHNldFJlZixcbiAgICAgICAgb25DbGljayAoZSkge1xuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgICAgIGlmICghZSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbXBvbmVudCByZW5kZXJlZCBpbnNpZGUgbmV4dC9saW5rIGhhcyB0byBwYXNzIGNsaWNrIGV2ZW50IHRvIFwib25DbGlja1wiIHByb3AuJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFsZWdhY3lCZWhhdmlvciAmJiB0eXBlb2Ygb25DbGljayA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgb25DbGljayhlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChsZWdhY3lCZWhhdmlvciAmJiBjaGlsZC5wcm9wcyAmJiB0eXBlb2YgY2hpbGQucHJvcHMub25DbGljayA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgY2hpbGQucHJvcHMub25DbGljayhlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghcm91dGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGUuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxpbmtDbGlja2VkKGUsIHJvdXRlciwgaHJlZiwgYXMsIHJlcGxhY2UsIHNoYWxsb3csIHNjcm9sbCwgbG9jYWxlLCBpc0FwcFJvdXRlciwgcHJlZmV0Y2hFbmFibGVkKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25Nb3VzZUVudGVyIChlKSB7XG4gICAgICAgICAgICBpZiAoIWxlZ2FjeUJlaGF2aW9yICYmIHR5cGVvZiBvbk1vdXNlRW50ZXJQcm9wID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBvbk1vdXNlRW50ZXJQcm9wKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxlZ2FjeUJlaGF2aW9yICYmIGNoaWxkLnByb3BzICYmIHR5cGVvZiBjaGlsZC5wcm9wcy5vbk1vdXNlRW50ZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIGNoaWxkLnByb3BzLm9uTW91c2VFbnRlcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghcm91dGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCghcHJlZmV0Y2hFbmFibGVkIHx8IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCIpICYmIGlzQXBwUm91dGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJlZmV0Y2gocm91dGVyLCBocmVmLCBhcywge1xuICAgICAgICAgICAgICAgIGxvY2FsZSxcbiAgICAgICAgICAgICAgICBwcmlvcml0eTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAvLyBAc2VlIHtodHRwczovL2dpdGh1Yi5jb20vdmVyY2VsL25leHQuanMvZGlzY3Vzc2lvbnMvNDAyNjg/c29ydD10b3AjZGlzY3Vzc2lvbmNvbW1lbnQtMzU3MjY0Mn1cbiAgICAgICAgICAgICAgICBieXBhc3NQcmVmZXRjaGVkQ2hlY2s6IHRydWVcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBraW5kOiBhcHBQcmVmZXRjaEtpbmRcbiAgICAgICAgICAgIH0sIGlzQXBwUm91dGVyKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25Ub3VjaFN0YXJ0IChlKSB7XG4gICAgICAgICAgICBpZiAoIWxlZ2FjeUJlaGF2aW9yICYmIHR5cGVvZiBvblRvdWNoU3RhcnRQcm9wID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBvblRvdWNoU3RhcnRQcm9wKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxlZ2FjeUJlaGF2aW9yICYmIGNoaWxkLnByb3BzICYmIHR5cGVvZiBjaGlsZC5wcm9wcy5vblRvdWNoU3RhcnQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIGNoaWxkLnByb3BzLm9uVG91Y2hTdGFydChlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghcm91dGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFwcmVmZXRjaEVuYWJsZWQgJiYgaXNBcHBSb3V0ZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcmVmZXRjaChyb3V0ZXIsIGhyZWYsIGFzLCB7XG4gICAgICAgICAgICAgICAgbG9jYWxlLFxuICAgICAgICAgICAgICAgIHByaW9yaXR5OiB0cnVlLFxuICAgICAgICAgICAgICAgIC8vIEBzZWUge2h0dHBzOi8vZ2l0aHViLmNvbS92ZXJjZWwvbmV4dC5qcy9kaXNjdXNzaW9ucy80MDI2OD9zb3J0PXRvcCNkaXNjdXNzaW9uY29tbWVudC0zNTcyNjQyfVxuICAgICAgICAgICAgICAgIGJ5cGFzc1ByZWZldGNoZWRDaGVjazogdHJ1ZVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGtpbmQ6IGFwcFByZWZldGNoS2luZFxuICAgICAgICAgICAgfSwgaXNBcHBSb3V0ZXIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBJZiBjaGlsZCBpcyBhbiA8YT4gdGFnIGFuZCBkb2Vzbid0IGhhdmUgYSBocmVmIGF0dHJpYnV0ZSwgb3IgaWYgdGhlICdwYXNzSHJlZicgcHJvcGVydHkgaXNcbiAgICAvLyBkZWZpbmVkLCB3ZSBzcGVjaWZ5IHRoZSBjdXJyZW50ICdocmVmJywgc28gdGhhdCByZXBldGl0aW9uIGlzIG5vdCBuZWVkZWQgYnkgdGhlIHVzZXIuXG4gICAgLy8gSWYgdGhlIHVybCBpcyBhYnNvbHV0ZSwgd2UgY2FuIGJ5cGFzcyB0aGUgbG9naWMgdG8gcHJlcGVuZCB0aGUgZG9tYWluIGFuZCBsb2NhbGUuXG4gICAgaWYgKCgwLCBfdXRpbHMuaXNBYnNvbHV0ZVVybCkoYXMpKSB7XG4gICAgICAgIGNoaWxkUHJvcHMuaHJlZiA9IGFzO1xuICAgIH0gZWxzZSBpZiAoIWxlZ2FjeUJlaGF2aW9yIHx8IHBhc3NIcmVmIHx8IGNoaWxkLnR5cGUgPT09IFwiYVwiICYmICEoXCJocmVmXCIgaW4gY2hpbGQucHJvcHMpKSB7XG4gICAgICAgIGNvbnN0IGN1ckxvY2FsZSA9IHR5cGVvZiBsb2NhbGUgIT09IFwidW5kZWZpbmVkXCIgPyBsb2NhbGUgOiBwYWdlc1JvdXRlciA9PSBudWxsID8gdm9pZCAwIDogcGFnZXNSb3V0ZXIubG9jYWxlO1xuICAgICAgICAvLyB3ZSBvbmx5IHJlbmRlciBkb21haW4gbG9jYWxlcyBpZiB3ZSBhcmUgY3VycmVudGx5IG9uIGEgZG9tYWluIGxvY2FsZVxuICAgICAgICAvLyBzbyB0aGF0IGxvY2FsZSBsaW5rcyBhcmUgc3RpbGwgdmlzaXRhYmxlIGluIGRldmVsb3BtZW50L3ByZXZpZXcgZW52c1xuICAgICAgICBjb25zdCBsb2NhbGVEb21haW4gPSAocGFnZXNSb3V0ZXIgPT0gbnVsbCA/IHZvaWQgMCA6IHBhZ2VzUm91dGVyLmlzTG9jYWxlRG9tYWluKSAmJiAoMCwgX2dldGRvbWFpbmxvY2FsZS5nZXREb21haW5Mb2NhbGUpKGFzLCBjdXJMb2NhbGUsIHBhZ2VzUm91dGVyID09IG51bGwgPyB2b2lkIDAgOiBwYWdlc1JvdXRlci5sb2NhbGVzLCBwYWdlc1JvdXRlciA9PSBudWxsID8gdm9pZCAwIDogcGFnZXNSb3V0ZXIuZG9tYWluTG9jYWxlcyk7XG4gICAgICAgIGNoaWxkUHJvcHMuaHJlZiA9IGxvY2FsZURvbWFpbiB8fCAoMCwgX2FkZGJhc2VwYXRoLmFkZEJhc2VQYXRoKSgoMCwgX2FkZGxvY2FsZS5hZGRMb2NhbGUpKGFzLCBjdXJMb2NhbGUsIHBhZ2VzUm91dGVyID09IG51bGwgPyB2b2lkIDAgOiBwYWdlc1JvdXRlci5kZWZhdWx0TG9jYWxlKSk7XG4gICAgfVxuICAgIHJldHVybiBsZWdhY3lCZWhhdmlvciA/IC8qI19fUFVSRV9fKi8gX3JlYWN0LmRlZmF1bHQuY2xvbmVFbGVtZW50KGNoaWxkLCBjaGlsZFByb3BzKSA6IC8qI19fUFVSRV9fKi8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImFcIiwge1xuICAgICAgICAuLi5yZXN0UHJvcHMsXG4gICAgICAgIC4uLmNoaWxkUHJvcHNcbiAgICB9LCBjaGlsZHJlbik7XG59KTtcbmNvbnN0IF9kZWZhdWx0ID0gTGluaztcblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGluay5qcy5tYXAiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGlzdC9jbGllbnQvbGluaycpXG4iXSwibmFtZXMiOlsiX2ludGVyb3BfcmVxdWlyZV9kZWZhdWx0XzEiLCJfIiwiX2ludGVyb3BfcmVxdWlyZV9kZWZhdWx0Iiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9leHBvcnQiLCJ0YXJnZXQiLCJhbGwiLCJuYW1lIiwiZW51bWVyYWJsZSIsImdldCIsInNlYXJjaFBhcmFtc1RvVXJsUXVlcnkiLCJ1cmxRdWVyeVRvU2VhcmNoUGFyYW1zIiwiYXNzaWduIiwic2VhcmNoUGFyYW1zIiwicXVlcnkiLCJmb3JFYWNoIiwia2V5IiwiQXJyYXkiLCJpc0FycmF5IiwicHVzaCIsInN0cmluZ2lmeVVybFF1ZXJ5UGFyYW0iLCJwYXJhbSIsImlzTmFOIiwiU3RyaW5nIiwidXJsUXVlcnkiLCJyZXN1bHQiLCJVUkxTZWFyY2hQYXJhbXMiLCJlbnRyaWVzIiwiaXRlbSIsImFwcGVuZCIsInNldCIsIl9sZW4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzZWFyY2hQYXJhbXNMaXN0IiwiX2tleSIsImZyb20iLCJrZXlzIiwiZGVsZXRlIiwiX2UiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJfaW50ZXJvcF9yZXF1aXJlX3dpbGRjYXJkXzEiLCJfaW50ZXJvcF9yZXF1aXJlX3dpbGRjYXJkIiwiY2FjaGUiLCJoYXMiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwiZm9ybWF0VXJsIiwidXJsT2JqZWN0S2V5cyIsImZvcm1hdFdpdGhWYWxpZGF0aW9uIiwiX3F1ZXJ5c3RyaW5nIiwicmVxdWlyZSQkMCIsInJlcXVpcmUkJDEiLCJzbGFzaGVkUHJvdG9jb2xzIiwidXJsT2JqIiwiYXV0aCIsImhvc3RuYW1lIiwicHJvdG9jb2wiLCJwYXRobmFtZSIsImhhc2giLCJob3N0IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicmVwbGFjZSIsImluZGV4T2YiLCJwb3J0Iiwic2VhcmNoIiwiZW5kc1dpdGgiLCJzbGFzaGVzIiwidGVzdCIsImciLCJFIiwibSIsInVybCIsImRlZmluZV9wcm9jZXNzX2Vudl9kZWZhdWx0IiwiTk9ERV9FTlYiLCJpbmNsdWRlcyIsImNvbnNvbGUiLCJ3YXJuIiwibWUiLCJvbWl0Iiwib2JqZWN0Iiwib21pdHRlZCIsImdlIiwiV0VCX1ZJVEFMUyIsImV4ZWNPbmNlIiwiaXNBYnNvbHV0ZVVybCIsImdldExvY2F0aW9uT3JpZ2luIiwiZ2V0VVJMIiwiZ2V0RGlzcGxheU5hbWUiLCJpc1Jlc1NlbnQiLCJub3JtYWxpemVSZXBlYXRlZFNsYXNoZXMiLCJsb2FkR2V0SW5pdGlhbFByb3BzIiwiU1AiLCJTVCIsIkRlY29kZUVycm9yIiwiTm9ybWFsaXplRXJyb3IiLCJQYWdlTm90Rm91bmRFcnJvciIsIk1pc3NpbmdTdGF0aWNQYWdlIiwiTWlkZGxld2FyZU5vdEZvdW5kRXJyb3IiLCJzdHJpbmdpZnlFcnJvciIsImZuIiwidXNlZCIsImFyZ3MiLCJBQlNPTFVURV9VUkxfUkVHRVgiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhyZWYiLCJvcmlnaW4iLCJzdWJzdHJpbmciLCJDb21wb25lbnQiLCJkaXNwbGF5TmFtZSIsInJlcyIsImZpbmlzaGVkIiwiaGVhZGVyc1NlbnQiLCJ1cmxQYXJ0cyIsInNwbGl0Iiwic2xpY2UiLCJqb2luIiwiQXBwIiwiY3R4IiwiX0FwcF9wcm90b3R5cGUiLCJnZXRJbml0aWFsUHJvcHMiLCJtZXNzYWdlIiwiRXJyb3IiLCJwYWdlUHJvcHMiLCJwcm9wcyIsInBlcmZvcm1hbmNlIiwiZXZlcnkiLCJtZXRob2QiLCJjb25zdHJ1Y3RvciIsInBhZ2UiLCJjb2RlIiwiZXJyb3IiLCJKU09OIiwic3RyaW5naWZ5Iiwic3RhY2siLCJ5ZSIsInJlbW92ZVRyYWlsaW5nU2xhc2giLCJyb3V0ZSIsInZlIiwicGFyc2VQYXRoIiwicGF0aCIsImhhc2hJbmRleCIsInF1ZXJ5SW5kZXgiLCJoYXNRdWVyeSIsIlBlIiwibm9ybWFsaXplUGF0aFRyYWlsaW5nU2xhc2giLCJfcmVtb3ZldHJhaWxpbmdzbGFzaCIsIl9wYXJzZXBhdGgiLCJzdGFydHNXaXRoIiwiX19ORVhUX01BTlVBTF9UUkFJTElOR19TTEFTSCIsIl9fTkVYVF9UUkFJTElOR19TTEFTSCIsIm1vZHVsZSIsIkoiLCJwYXRoSGFzUHJlZml4IiwicHJlZml4IiwiYmUiLCJoYXNCYXNlUGF0aCIsIl9wYXRoaGFzcHJlZml4IiwiYmFzZVBhdGgiLCJfX05FWFRfUk9VVEVSX0JBU0VQQVRIIiwiZWUiLCJpc0xvY2FsVVJMIiwiX3V0aWxzIiwiX2hhc2Jhc2VwYXRoIiwibG9jYXRpb25PcmlnaW4iLCJyZXNvbHZlZCIsIlVSTCIsIlJlIiwiZ2V0U29ydGVkUm91dGVzIiwiVXJsTm9kZSIsImluc2VydCIsInVybFBhdGgiLCJfaW5zZXJ0IiwiZmlsdGVyIiwiQm9vbGVhbiIsInNtb29zaCIsIl9zbW9vc2giLCJjaGlsZHJlblBhdGhzIiwiY2hpbGRyZW4iLCJzb3J0Iiwic2x1Z05hbWUiLCJzcGxpY2UiLCJyZXN0U2x1Z05hbWUiLCJvcHRpb25hbFJlc3RTbHVnTmFtZSIsInJvdXRlcyIsIm1hcCIsImMiLCJyZWR1Y2UiLCJwcmV2IiwiY3VyciIsInBsYWNlaG9sZGVyIiwiciIsInVuc2hpZnQiLCJ1cmxQYXRocyIsInNsdWdOYW1lcyIsImlzQ2F0Y2hBbGwiLCJuZXh0U2VnbWVudCIsImhhbmRsZVNsdWciLCJwcmV2aW91c1NsdWciLCJuZXh0U2x1ZyIsInNsdWciLCJzZWdtZW50TmFtZSIsImlzT3B0aW9uYWwiLCJNYXAiLCJub3JtYWxpemVkUGFnZXMiLCJyb290IiwicGFnZVBhdGgiLCJPZSIsImlzRHluYW1pY1JvdXRlIiwiVEVTVF9ST1VURSIsIndlIiwiX3NvcnRlZHJvdXRlcyIsIl9pc2R5bmFtaWMiLCJnZXRSb3V0ZU1hdGNoZXIiLCJyZSIsImdyb3VwcyIsInJvdXRlTWF0Y2giLCJleGVjIiwiZGVjb2RlIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicGFyYW1zIiwicG9zIiwiZW50cnkiLCJyZXBlYXQiLCJUZSIsImVuc3VyZUxlYWRpbmdTbGFzaCIsInFlIiwiaXNHcm91cFNlZ21lbnQiLCJzZWdtZW50IiwiSWUiLCJub3JtYWxpemVBcHBQYXRoIiwibm9ybWFsaXplUnNjUGF0aCIsIl9lbnN1cmVsZWFkaW5nc2xhc2giLCJfc2VnbWVudCIsImluZGV4Iiwic2VnbWVudHMiLCJlbmFibGVkIiwiTGUiLCJJTlRFUkNFUFRJT05fUk9VVEVfTUFSS0VSUyIsImlzSW50ZXJjZXB0aW9uUm91dGVBcHBQYXRoIiwiZXh0cmFjdEludGVyY2VwdGlvblJvdXRlSW5mb3JtYXRpb24iLCJfYXBwcGF0aHMiLCJmaW5kIiwiaW50ZXJjZXB0aW5nUm91dGUiLCJtYXJrZXIiLCJpbnRlcmNlcHRlZFJvdXRlIiwiY29uY2F0Iiwic3BsaXRJbnRlcmNlcHRpbmdSb3V0ZSIsIlNlIiwiZXNjYXBlU3RyaW5nUmVnZXhwIiwicmVIYXNSZWdFeHAiLCJyZVJlcGxhY2VSZWdFeHAiLCJzdHIiLCJNZSIsImdldFJvdXRlUmVnZXgiLCJnZXROYW1lZFJvdXRlUmVnZXgiLCJnZXROYW1lZE1pZGRsZXdhcmVSZWdleCIsIl9pbnRlcmNlcHRpb25yb3V0ZXMiLCJfZXNjYXBlcmVnZXhwIiwicmVxdWlyZSQkMiIsIk5FWFRfUVVFUllfUEFSQU1fUFJFRklYIiwiTkVYVF9JTlRFUkNFUFRJT05fTUFSS0VSX1BSRUZJWCIsInBhcnNlUGFyYW1ldGVyIiwib3B0aW9uYWwiLCJnZXRQYXJhbWV0cml6ZWRSb3V0ZSIsImdyb3VwSW5kZXgiLCJwYXJhbWV0ZXJpemVkUm91dGUiLCJtYXJrZXJNYXRjaCIsInBhcmFtTWF0Y2hlcyIsIm1hdGNoIiwibm9ybWFsaXplZFJvdXRlIiwiUmVnRXhwIiwiYnVpbGRHZXRTYWZlUm91dGVLZXkiLCJpIiwicm91dGVLZXkiLCJqIiwiZnJvbUNoYXJDb2RlIiwiTWF0aCIsImZsb29yIiwiZ2V0U2FmZUtleUZyb21TZWdtZW50IiwiZ2V0U2FmZVJvdXRlS2V5Iiwicm91dGVLZXlzIiwia2V5UHJlZml4IiwiY2xlYW5lZEtleSIsImludmFsaWRLZXkiLCJwYXJzZUludCIsImdldE5hbWVkUGFyYW1ldHJpemVkUm91dGUiLCJwcmVmaXhSb3V0ZUtleXMiLCJuYW1lZFBhcmFtZXRlcml6ZWRSb3V0ZSIsImhhc0ludGVyY2VwdGlvbk1hcmtlciIsInNvbWUiLCJwcmVmaXhSb3V0ZUtleSIsIm5hbWVkUmVnZXgiLCJvcHRpb25zIiwiY2F0Y2hBbGwiLCJjYXRjaEFsbEdyb3VwZWRSZWdleCIsImplIiwiaW50ZXJwb2xhdGVBcyIsIl9yb3V0ZW1hdGNoZXIiLCJfcm91dGVyZWdleCIsImFzUGF0aG5hbWUiLCJpbnRlcnBvbGF0ZWRSb3V0ZSIsImR5bmFtaWNSZWdleCIsImR5bmFtaWNHcm91cHMiLCJkeW5hbWljTWF0Y2hlcyIsInJlcGxhY2VkIiwiTmUiLCJyZXNvbHZlSHJlZiIsIl9mb3JtYXR1cmwiLCJfb21pdCIsInJlcXVpcmUkJDMiLCJfbm9ybWFsaXpldHJhaWxpbmdzbGFzaCIsInJlcXVpcmUkJDQiLCJfaXNsb2NhbHVybCIsInJlcXVpcmUkJDUiLCJfdXRpbHMxIiwicmVxdWlyZSQkNiIsIl9pbnRlcnBvbGF0ZWFzIiwicmVxdWlyZSQkNyIsInJvdXRlciIsInJlc29sdmVBcyIsImJhc2UiLCJ1cmxBc1N0cmluZyIsInVybFByb3RvTWF0Y2giLCJ1cmxBc1N0cmluZ05vUHJvdG8iLCJub3JtYWxpemVkVXJsIiwiYXNQYXRoIiwiZmluYWxVcmwiLCJpbnRlcnBvbGF0ZWRBcyIsInJlc29sdmVkSHJlZiIsIlkiLCJhZGRQYXRoUHJlZml4IiwiQWUiLCJhZGRMb2NhbGUiLCJfYWRkcGF0aHByZWZpeCIsImxvY2FsZSIsImRlZmF1bHRMb2NhbGUiLCJpZ25vcmVQcmVmaXgiLCJsb3dlciIsInRvTG93ZXJDYXNlIiwiQ2UiLCJfX05FWFRfSTE4Tl9TVVBQT1JUIiwidGUiLCJSb3V0ZXJDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsIkRlIiwiQ2FjaGVTdGF0ZXMiLCJBcHBSb3V0ZXJDb250ZXh0IiwiTGF5b3V0Um91dGVyQ29udGV4dCIsIkdsb2JhbExheW91dFJvdXRlckNvbnRleHQiLCJUZW1wbGF0ZUNvbnRleHQiLCJfcmVhY3QiLCJMQVpZX0lOSVRJQUxJWkVEIiwiREFUQV9GRVRDSCIsIlJFQURZIiwiVWUiLCJyZXF1ZXN0SWRsZUNhbGxiYWNrIiwiY2FuY2VsSWRsZUNhbGxiYWNrIiwic2VsZiIsImJpbmQiLCJjYiIsInN0YXJ0IiwiRGF0ZSIsIm5vdyIsInNldFRpbWVvdXQiLCJkaWRUaW1lb3V0IiwidGltZVJlbWFpbmluZyIsIm1heCIsImlkIiwiY2xlYXJUaW1lb3V0IiwibmUiLCJ1c2VJbnRlcnNlY3Rpb24iLCJfcmVxdWVzdGlkbGVjYWxsYmFjayIsImhhc0ludGVyc2VjdGlvbk9ic2VydmVyIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJvYnNlcnZlcnMiLCJpZExpc3QiLCJjcmVhdGVPYnNlcnZlciIsIm1hcmdpbiIsInJvb3RNYXJnaW4iLCJleGlzdGluZyIsImluc3RhbmNlIiwiZWxlbWVudHMiLCJvYnNlcnZlciIsImNhbGxiYWNrIiwiaXNWaXNpYmxlIiwiaXNJbnRlcnNlY3RpbmciLCJpbnRlcnNlY3Rpb25SYXRpbyIsIm9ic2VydmUiLCJlbGVtZW50IiwidW5vYnNlcnZlIiwic2l6ZSIsImRpc2Nvbm5lY3QiLCJmaW5kSW5kZXgiLCJyb290UmVmIiwiZGlzYWJsZWQiLCJpc0Rpc2FibGVkIiwidmlzaWJsZSIsInNldFZpc2libGUiLCJ1c2VTdGF0ZSIsImVsZW1lbnRSZWYiLCJ1c2VSZWYiLCJzZXRFbGVtZW50IiwidXNlQ2FsbGJhY2siLCJjdXJyZW50IiwidXNlRWZmZWN0IiwidGFnTmFtZSIsImlkbGVDYWxsYmFjayIsInJlc2V0VmlzaWJsZSIsIm5vcm1hbGl6ZUxvY2FsZVBhdGgiLCJsb2NhbGVzIiwiZGV0ZWN0ZWRMb2NhbGUiLCJwYXRobmFtZVBhcnRzIiwieGUiLCJpZSIsImRldGVjdERvbWFpbkxvY2FsZSIsImRvbWFpbkl0ZW1zIiwiX2l0ZW1fZG9tYWluIiwiX2l0ZW1fbG9jYWxlcyIsImRvbWFpbkhvc3RuYW1lIiwiZG9tYWluIiwia2UiLCJhZSIsImdldERvbWFpbkxvY2FsZSIsImRvbWFpbkxvY2FsZXMiLCJwcm90byIsImh0dHAiLCJmaW5hbExvY2FsZSIsIm9lIiwiYWRkQmFzZVBhdGgiLCJyZXF1aXJlZCIsIl9fTkVYVF9NQU5VQUxfQ0xJRU5UX0JBU0VfUEFUSCIsInVlIiwiUHJlZmV0Y2hLaW5kIiwiQUNUSU9OX1JFRlJFU0giLCJBQ1RJT05fTkFWSUdBVEUiLCJBQ1RJT05fUkVTVE9SRSIsIkFDVElPTl9TRVJWRVJfUEFUQ0giLCJBQ1RJT05fUFJFRkVUQ0giLCJBQ1RJT05fRkFTVF9SRUZSRVNIIiwiQUNUSU9OX1NFUlZFUl9BQ1RJT04iLCJBVVRPIiwiRlVMTCIsIlRFTVBPUkFSWSIsInNlIiwiX2RlZmF1bHQiLCJfcmVzb2x2ZWhyZWYiLCJfYWRkbG9jYWxlIiwiX3JvdXRlcmNvbnRleHRzaGFyZWRydW50aW1lIiwiX2FwcHJvdXRlcmNvbnRleHRzaGFyZWRydW50aW1lIiwicmVxdWlyZSQkOCIsIl91c2VpbnRlcnNlY3Rpb24iLCJyZXF1aXJlJCQ5IiwiX2dldGRvbWFpbmxvY2FsZSIsInJlcXVpcmUkJDEwIiwiX2FkZGJhc2VwYXRoIiwicmVxdWlyZSQkMTEiLCJfcm91dGVycmVkdWNlcnR5cGVzIiwicmVxdWlyZSQkMTIiLCJwcmVmZXRjaGVkIiwiU2V0IiwicHJlZmV0Y2giLCJhcyIsImFwcE9wdGlvbnMiLCJpc0FwcFJvdXRlciIsImJ5cGFzc1ByZWZldGNoZWRDaGVjayIsInByZWZldGNoZWRLZXkiLCJhZGQiLCJwcmVmZXRjaFByb21pc2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsImNhdGNoIiwiZXJyIiwiaXNNb2RpZmllZEV2ZW50IiwiZXZlbnQiLCJjdXJyZW50VGFyZ2V0IiwiZ2V0QXR0cmlidXRlIiwibWV0YUtleSIsImN0cmxLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsIm5hdGl2ZUV2ZW50Iiwid2hpY2giLCJsaW5rQ2xpY2tlZCIsImUiLCJzaGFsbG93Iiwic2Nyb2xsIiwicHJlZmV0Y2hFbmFibGVkIiwibm9kZU5hbWUiLCJ0b1VwcGVyQ2FzZSIsInByZXZlbnREZWZhdWx0IiwibmF2aWdhdGUiLCJyb3V0ZXJTY3JvbGwiLCJmb3JjZU9wdGltaXN0aWNOYXZpZ2F0aW9uIiwic3RhcnRUcmFuc2l0aW9uIiwiZm9ybWF0U3RyaW5nT3JVcmwiLCJ1cmxPYmpPclN0cmluZyIsImZvcndhcmRSZWYiLCJmb3J3YXJkZWRSZWYiLCJocmVmUHJvcCIsImFzUHJvcCIsImNoaWxkcmVuUHJvcCIsInByZWZldGNoUHJvcCIsInBhc3NIcmVmIiwib25DbGljayIsIm9uTW91c2VFbnRlciIsIm9uTW91c2VFbnRlclByb3AiLCJvblRvdWNoU3RhcnQiLCJvblRvdWNoU3RhcnRQcm9wIiwibGVnYWN5QmVoYXZpb3IiLCJyZXN0UHJvcHMiLCJjcmVhdGVFbGVtZW50IiwicGFnZXNSb3V0ZXIiLCJ1c2VDb250ZXh0IiwiYXBwUm91dGVyIiwiYXBwUHJlZmV0Y2hLaW5kIiwiY3JlYXRlUHJvcEVycm9yIiwiZXhwZWN0ZWQiLCJhY3R1YWwiLCJ2YWxUeXBlIiwiaGFzV2FybmVkIiwidXNlTWVtbyIsInJlc29sdmVkQXMiLCJwcmV2aW91c0hyZWYiLCJwcmV2aW91c0FzIiwiY2hpbGQiLCJDaGlsZHJlbiIsIm9ubHkiLCJ0eXBlIiwiY2hpbGRSZWYiLCJyZWYiLCJzZXRJbnRlcnNlY3Rpb25SZWYiLCJzZXRSZWYiLCJlbCIsImtpbmQiLCJjaGlsZFByb3BzIiwiZGVmYXVsdFByZXZlbnRlZCIsInByaW9yaXR5IiwiY3VyTG9jYWxlIiwibG9jYWxlRG9tYWluIiwiaXNMb2NhbGVEb21haW4iLCJjbG9uZUVsZW1lbnQiLCJsaW5rIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@uma-sdk/uma-auth-client/dist/link-DaH_InAP.js\n"));

/***/ })

}]);